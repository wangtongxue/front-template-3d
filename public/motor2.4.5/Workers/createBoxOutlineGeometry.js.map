{"version":3,"file":"createBoxOutlineGeometry.js","sources":["../../../../Source/Core/BoxOutlineGeometry.js","../../../../Source/WorkersES6/createBoxOutlineGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\n\r\n    var diffScratch = new Cartesian3();\r\n\r\n    /**\r\n     * A description of the outline of a cube centered at the origin.\r\n     *\r\n     * @alias BoxOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3} options.minimum The minimum x, y, and z coordinates of the box.\r\n     * @param {Cartesian3} options.maximum The maximum x, y, and z coordinates of the box.\r\n     *\r\n     * @see BoxOutlineGeometry.fromDimensions\r\n     * @see BoxOutlineGeometry.createGeometry\r\n     * @see Packable\r\n     *\r\n     * @example\r\n     * var box = new Cesium.BoxOutlineGeometry({\r\n     *   maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0),\r\n     *   minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0)\r\n     * });\r\n     * var geometry = Cesium.BoxOutlineGeometry.createGeometry(box);\r\n     */\r\n    function BoxOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var min = options.minimum;\r\n        var max = options.maximum;\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('min', min);\r\n        Check.typeOf.object('max', max);\r\n        if (defined(options.offsetAttribute) && options.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n            throw new DeveloperError('GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        this._min = Cartesian3.clone(min);\r\n        this._max = Cartesian3.clone(max);\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._workerName = 'createBoxOutlineGeometry';\r\n    }\r\n\r\n    /**\r\n     * Creates an outline of a cube centered at the origin given its dimensions.\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3} options.dimensions The width, depth, and height of the box stored in the x, y, and z coordinates of the <code>Cartesian3</code>, respectively.\r\n     * @returns {BoxOutlineGeometry}\r\n     *\r\n     * @exception {DeveloperError} All dimensions components must be greater than or equal to zero.\r\n     *\r\n     *\r\n     * @example\r\n     * var box = Cesium.BoxOutlineGeometry.fromDimensions({\r\n     *   dimensions : new Cesium.Cartesian3(500000.0, 500000.0, 500000.0)\r\n     * });\r\n     * var geometry = Cesium.BoxOutlineGeometry.createGeometry(box);\r\n     *\r\n     * @see BoxOutlineGeometry.createGeometry\r\n     */\r\n    BoxOutlineGeometry.fromDimensions = function(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var dimensions = options.dimensions;\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('dimensions', dimensions);\r\n        Check.typeOf.number.greaterThanOrEquals('dimensions.x', dimensions.x, 0);\r\n        Check.typeOf.number.greaterThanOrEquals('dimensions.y', dimensions.y, 0);\r\n        Check.typeOf.number.greaterThanOrEquals('dimensions.z', dimensions.z, 0);\r\n        //>>includeEnd('debug');\r\n\r\n        var corner = Cartesian3.multiplyByScalar(dimensions, 0.5, new Cartesian3());\r\n\r\n        return new BoxOutlineGeometry({\r\n            minimum : Cartesian3.negate(corner, new Cartesian3()),\r\n            maximum : corner,\r\n            offsetAttribute: options.offsetAttribute\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Creates an outline of a cube from the dimensions of an AxisAlignedBoundingBox.\r\n     *\r\n     * @param {AxisAlignedBoundingBox} boundingBox A description of the AxisAlignedBoundingBox.\r\n     * @returns {BoxOutlineGeometry}\r\n     *\r\n     *\r\n     *\r\n     * @example\r\n     * var aabb = Cesium.AxisAlignedBoundingBox.fromPoints(Cesium.Cartesian3.fromDegreesArray([\r\n     *      -72.0, 40.0,\r\n     *      -70.0, 35.0,\r\n     *      -75.0, 30.0,\r\n     *      -70.0, 30.0,\r\n     *      -68.0, 40.0\r\n     * ]));\r\n     * var box = Cesium.BoxOutlineGeometry.fromAxisAlignedBoundingBox(aabb);\r\n     *\r\n     *  @see BoxOutlineGeometry.createGeometry\r\n     */\r\n    BoxOutlineGeometry.fromAxisAlignedBoundingBox = function(boundingBox) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('boundindBox', boundingBox);\r\n        //>>includeEnd('debug');\r\n\r\n        return new BoxOutlineGeometry({\r\n            minimum : boundingBox.minimum,\r\n            maximum : boundingBox.maximum\r\n        });\r\n    };\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    BoxOutlineGeometry.packedLength = 2 * Cartesian3.packedLength + 1;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {BoxOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    BoxOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        Cartesian3.pack(value._min, array, startingIndex);\r\n        Cartesian3.pack(value._max, array, startingIndex + Cartesian3.packedLength);\r\n        array[startingIndex + (Cartesian3.packedLength * 2)] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchMin = new Cartesian3();\r\n    var scratchMax = new Cartesian3();\r\n    var scratchOptions = {\r\n        minimum : scratchMin,\r\n        maximum : scratchMax,\r\n        offsetAttribute : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {BoxOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {BoxOutlineGeometry} The modified result parameter or a new BoxOutlineGeometry instance if one was not provided.\r\n     */\r\n    BoxOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var min = Cartesian3.unpack(array, startingIndex, scratchMin);\r\n        var max = Cartesian3.unpack(array, startingIndex + Cartesian3.packedLength, scratchMax);\r\n        var offsetAttribute = array[startingIndex + Cartesian3.packedLength * 2];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n            return new BoxOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        result._min = Cartesian3.clone(min, result._min);\r\n        result._max = Cartesian3.clone(max, result._max);\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of an outline of a box, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {BoxOutlineGeometry} boxGeometry A description of the box outline.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    BoxOutlineGeometry.createGeometry = function(boxGeometry) {\r\n        var min = boxGeometry._min;\r\n        var max = boxGeometry._max;\r\n\r\n        if (Cartesian3.equals(min, max)) {\r\n            return;\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n        var indices = new Uint16Array(12 * 2);\r\n        var positions = new Float64Array(8 * 3);\r\n\r\n        positions[0] = min.x;\r\n        positions[1] = min.y;\r\n        positions[2] = min.z;\r\n        positions[3] = max.x;\r\n        positions[4] = min.y;\r\n        positions[5] = min.z;\r\n        positions[6] = max.x;\r\n        positions[7] = max.y;\r\n        positions[8] = min.z;\r\n        positions[9] = min.x;\r\n        positions[10] = max.y;\r\n        positions[11] = min.z;\r\n\r\n        positions[12] = min.x;\r\n        positions[13] = min.y;\r\n        positions[14] = max.z;\r\n        positions[15] = max.x;\r\n        positions[16] = min.y;\r\n        positions[17] = max.z;\r\n        positions[18] = max.x;\r\n        positions[19] = max.y;\r\n        positions[20] = max.z;\r\n        positions[21] = min.x;\r\n        positions[22] = max.y;\r\n        positions[23] = max.z;\r\n\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : positions\r\n        });\r\n\r\n        // top\r\n        indices[0] = 4;\r\n        indices[1] = 5;\r\n        indices[2] = 5;\r\n        indices[3] = 6;\r\n        indices[4] = 6;\r\n        indices[5] = 7;\r\n        indices[6] = 7;\r\n        indices[7] = 4;\r\n\r\n        // bottom\r\n        indices[8] = 0;\r\n        indices[9] = 1;\r\n        indices[10] = 1;\r\n        indices[11] = 2;\r\n        indices[12] = 2;\r\n        indices[13] = 3;\r\n        indices[14] = 3;\r\n        indices[15] = 0;\r\n\r\n        // left\r\n        indices[16] = 0;\r\n        indices[17] = 4;\r\n        indices[18] = 1;\r\n        indices[19] = 5;\r\n\r\n        //right\r\n        indices[20] = 2;\r\n        indices[21] = 6;\r\n        indices[22] = 3;\r\n        indices[23] = 7;\r\n\r\n        var diff = Cartesian3.subtract(max, min, diffScratch);\r\n        var radius = Cartesian3.magnitude(diff) * 0.5;\r\n\r\n        if (defined(boxGeometry._offsetAttribute)) {\r\n            var length = positions.length;\r\n            var applyOffset = new Uint8Array(length / 3);\r\n            var offsetValue = boxGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            arrayFill(applyOffset, offsetValue);\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.LINES,\r\n            boundingSphere : new BoundingSphere(Cartesian3.ZERO, radius),\r\n            offsetAttribute : boxGeometry._offsetAttribute\r\n        });\r\n    };\r\nexport default BoxOutlineGeometry;\r\n","import BoxOutlineGeometry from '../Core/BoxOutlineGeometry.js';\r\nimport defined from '../Core/defined.js';\r\n\r\n    function createBoxOutlineGeometry(boxGeometry, offset) {\r\n        if (defined(offset)) {\r\n            boxGeometry = BoxOutlineGeometry.unpack(boxGeometry, offset);\r\n        }\r\n        return BoxOutlineGeometry.createGeometry(boxGeometry);\r\n    }\r\nexport default createBoxOutlineGeometry;\r\n"],"names":["diffScratch","Cartesian3","BoxOutlineGeometry","options","min","defaultValue","EMPTY_OBJECT","minimum","max","maximum","Check","typeOf","object","defined","offsetAttribute","GeometryOffsetAttribute","TOP","DeveloperError","this","_min","clone","_max","_offsetAttribute","_workerName","fromDimensions","dimensions","number","greaterThanOrEquals","x","y","z","corner","multiplyByScalar","negate","fromAxisAlignedBoundingBox","boundingBox","packedLength","pack","value","array","startingIndex","scratchMin","scratchMax","scratchOptions","undefined","unpack","result","createGeometry","boxGeometry","equals","attributes","GeometryAttributes","indices","Uint16Array","positions","Float64Array","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","diff","subtract","radius","magnitude","length","applyOffset","Uint8Array","offsetValue","NONE","arrayFill","UNSIGNED_BYTE","Geometry","primitiveType","PrimitiveType","LINES","boundingSphere","BoundingSphere","ZERO","offset"],"mappings":"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"}