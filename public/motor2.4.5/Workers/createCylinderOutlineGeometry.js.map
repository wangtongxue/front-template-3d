{"version":3,"file":"createCylinderOutlineGeometry.js","sources":["../../../../Source/Core/CylinderOutlineGeometry.js","../../../../Source/WorkersES6/createCylinderOutlineGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport CylinderGeometryLibrary from './CylinderGeometryLibrary.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\n\r\n    var radiusScratch = new Cartesian2();\r\n\r\n    /**\r\n     * A description of the outline of a cylinder.\r\n     *\r\n     * @alias CylinderOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Number} options.length The length of the cylinder.\r\n     * @param {Number} options.topRadius The radius of the top of the cylinder.\r\n     * @param {Number} options.bottomRadius The radius of the bottom of the cylinder.\r\n     * @param {Number} [options.slices=128] The number of edges around the perimeter of the cylinder.\r\n     * @param {Number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom surfaces of the cylinder.\r\n     *\r\n     * @exception {DeveloperError} options.length must be greater than 0.\r\n     * @exception {DeveloperError} options.topRadius must be greater than 0.\r\n     * @exception {DeveloperError} options.bottomRadius must be greater than 0.\r\n     * @exception {DeveloperError} bottomRadius and topRadius cannot both equal 0.\r\n     * @exception {DeveloperError} options.slices must be greater than or equal to 3.\r\n     *\r\n     * @see CylinderOutlineGeometry.createGeometry\r\n     *\r\n     * @example\r\n     * // create cylinder geometry\r\n     * var cylinder = new Cesium.CylinderOutlineGeometry({\r\n     *     length: 200000,\r\n     *     topRadius: 80000,\r\n     *     bottomRadius: 200000,\r\n     * });\r\n     * var geometry = Cesium.CylinderOutlineGeometry.createGeometry(cylinder);\r\n     */\r\n    function CylinderOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var length = options.length;\r\n        var topRadius = options.topRadius;\r\n        var bottomRadius = options.bottomRadius;\r\n        var slices = defaultValue(options.slices, 128);\r\n        var numberOfVerticalLines = Math.max(defaultValue(options.numberOfVerticalLines, 16), 0);\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('options.positions', length);\r\n        Check.typeOf.number('options.topRadius', topRadius);\r\n        Check.typeOf.number('options.bottomRadius', bottomRadius);\r\n        Check.typeOf.number.greaterThanOrEquals('options.slices', slices, 3);\r\n        if (defined(options.offsetAttribute) && options.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n            throw new DeveloperError('GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        this._length = length;\r\n        this._topRadius = topRadius;\r\n        this._bottomRadius = bottomRadius;\r\n        this._slices = slices;\r\n        this._numberOfVerticalLines = numberOfVerticalLines;\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._workerName = 'createCylinderOutlineGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    CylinderOutlineGeometry.packedLength = 6;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {CylinderOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    CylinderOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        array[startingIndex++] = value._length;\r\n        array[startingIndex++] = value._topRadius;\r\n        array[startingIndex++] = value._bottomRadius;\r\n        array[startingIndex++] = value._slices;\r\n        array[startingIndex++] = value._numberOfVerticalLines;\r\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchOptions = {\r\n        length : undefined,\r\n        topRadius : undefined,\r\n        bottomRadius : undefined,\r\n        slices : undefined,\r\n        numberOfVerticalLines : undefined,\r\n        offsetAttribute : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {CylinderOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {CylinderOutlineGeometry} The modified result parameter or a new CylinderOutlineGeometry instance if one was not provided.\r\n     */\r\n    CylinderOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var length = array[startingIndex++];\r\n        var topRadius = array[startingIndex++];\r\n        var bottomRadius = array[startingIndex++];\r\n        var slices = array[startingIndex++];\r\n        var numberOfVerticalLines = array[startingIndex++];\r\n        var offsetAttribute = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.length = length;\r\n            scratchOptions.topRadius = topRadius;\r\n            scratchOptions.bottomRadius = bottomRadius;\r\n            scratchOptions.slices = slices;\r\n            scratchOptions.numberOfVerticalLines = numberOfVerticalLines;\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n            return new CylinderOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        result._length = length;\r\n        result._topRadius = topRadius;\r\n        result._bottomRadius = bottomRadius;\r\n        result._slices = slices;\r\n        result._numberOfVerticalLines = numberOfVerticalLines;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of an outline of a cylinder, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {CylinderOutlineGeometry} cylinderGeometry A description of the cylinder outline.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    CylinderOutlineGeometry.createGeometry = function(cylinderGeometry) {\r\n        var length = cylinderGeometry._length;\r\n        var topRadius = cylinderGeometry._topRadius;\r\n        var bottomRadius = cylinderGeometry._bottomRadius;\r\n        var slices = cylinderGeometry._slices;\r\n        var numberOfVerticalLines = cylinderGeometry._numberOfVerticalLines;\r\n\r\n        if ((length <= 0) || (topRadius < 0) || (bottomRadius < 0) || ((topRadius === 0) && (bottomRadius === 0))) {\r\n            return;\r\n        }\r\n\r\n        var numVertices = slices * 2;\r\n\r\n        var positions = CylinderGeometryLibrary.computePositions(length, topRadius, bottomRadius, slices, false);\r\n        var numIndices = slices * 2;\r\n        var numSide;\r\n        if (numberOfVerticalLines > 0) {\r\n            var numSideLines = Math.min(numberOfVerticalLines, slices);\r\n            numSide = Math.round(slices / numSideLines);\r\n            numIndices += numSideLines;\r\n        }\r\n\r\n        var indices = IndexDatatype.createTypedArray(numVertices, numIndices * 2);\r\n        var index = 0;\r\n        var i;\r\n        for (i = 0; i < slices - 1; i++) {\r\n            indices[index++] = i;\r\n            indices[index++] = i + 1;\r\n            indices[index++] = i + slices;\r\n            indices[index++] = i + 1 + slices;\r\n        }\r\n\r\n        indices[index++] = slices - 1;\r\n        indices[index++] = 0;\r\n        indices[index++] = slices + slices - 1;\r\n        indices[index++] = slices;\r\n\r\n        if (numberOfVerticalLines > 0) {\r\n            for (i = 0; i < slices; i += numSide) {\r\n                indices[index++] = i;\r\n                indices[index++] = i + slices;\r\n            }\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n        attributes.position = new GeometryAttribute({\r\n            componentDatatype : ComponentDatatype.DOUBLE,\r\n            componentsPerAttribute : 3,\r\n            values : positions\r\n        });\r\n\r\n        radiusScratch.x = length * 0.5;\r\n        radiusScratch.y = Math.max(bottomRadius, topRadius);\r\n\r\n        var boundingSphere = new BoundingSphere(Cartesian3.ZERO, Cartesian2.magnitude(radiusScratch));\r\n\r\n        if (defined(cylinderGeometry._offsetAttribute)) {\r\n            length = positions.length;\r\n            var applyOffset = new Uint8Array(length / 3);\r\n            var offsetValue = cylinderGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            arrayFill(applyOffset, offsetValue);\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values: applyOffset\r\n            });\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.LINES,\r\n            boundingSphere : boundingSphere,\r\n            offsetAttribute : cylinderGeometry._offsetAttribute\r\n        });\r\n    };\r\nexport default CylinderOutlineGeometry;\r\n","import CylinderOutlineGeometry from '../Core/CylinderOutlineGeometry.js';\r\nimport defined from '../Core/defined.js';\r\n\r\n    function createCylinderOutlineGeometry(cylinderGeometry, offset) {\r\n        if (defined(offset)) {\r\n            cylinderGeometry = CylinderOutlineGeometry.unpack(cylinderGeometry, offset);\r\n        }\r\n        return CylinderOutlineGeometry.createGeometry(cylinderGeometry);\r\n    }\r\nexport default createCylinderOutlineGeometry;\r\n"],"names":["radiusScratch","Cartesian2","CylinderOutlineGeometry","options","length","defaultValue","EMPTY_OBJECT","topRadius","bottomRadius","slices","numberOfVerticalLines","Math","max","Check","typeOf","number","greaterThanOrEquals","defined","offsetAttribute","GeometryOffsetAttribute","TOP","DeveloperError","this","_length","_topRadius","_bottomRadius","_slices","_numberOfVerticalLines","_offsetAttribute","_workerName","packedLength","pack","value","array","startingIndex","object","scratchOptions","undefined","unpack","result","createGeometry","cylinderGeometry","numSide","numVertices","positions","CylinderGeometryLibrary","computePositions","numIndices","numSideLines","min","round","i","indices","IndexDatatype","createTypedArray","index","attributes","GeometryAttributes","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","x","y","boundingSphere","BoundingSphere","Cartesian3","ZERO","magnitude","applyOffset","Uint8Array","offsetValue","NONE","arrayFill","UNSIGNED_BYTE","Geometry","primitiveType","PrimitiveType","LINES","offset"],"mappings":"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"}