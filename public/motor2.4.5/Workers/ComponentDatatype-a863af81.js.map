{"version":3,"file":"ComponentDatatype-a863af81.js","sources":["../../../../Source/Core/ComponentDatatype.js"],"sourcesContent":["import defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport WebGLConstants from './WebGLConstants.js';\r\n\r\n    /**\r\n     * WebGL component datatypes.  Components are intrinsics,\r\n     * which form attributes, which form vertices.\r\n     *\r\n     * @exports ComponentDatatype\r\n     */\r\n    var ComponentDatatype = {\r\n        /**\r\n         * 8-bit signed byte corresponding to <code>gl.BYTE</code> and the type\r\n         * of an element in <code>Int8Array</code>.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        BYTE : WebGLConstants.BYTE,\r\n\r\n        /**\r\n         * 8-bit unsigned byte corresponding to <code>UNSIGNED_BYTE</code> and the type\r\n         * of an element in <code>Uint8Array</code>.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        UNSIGNED_BYTE : WebGLConstants.UNSIGNED_BYTE,\r\n\r\n        /**\r\n         * 16-bit signed short corresponding to <code>SHORT</code> and the type\r\n         * of an element in <code>Int16Array</code>.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        SHORT : WebGLConstants.SHORT,\r\n\r\n        /**\r\n         * 16-bit unsigned short corresponding to <code>UNSIGNED_SHORT</code> and the type\r\n         * of an element in <code>Uint16Array</code>.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        UNSIGNED_SHORT : WebGLConstants.UNSIGNED_SHORT,\r\n\r\n        /**\r\n         * 32-bit signed int corresponding to <code>INT</code> and the type\r\n         * of an element in <code>Int32Array</code>.\r\n         *\r\n         * @memberOf ComponentDatatype\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        INT : WebGLConstants.INT,\r\n\r\n        /**\r\n         * 32-bit unsigned int corresponding to <code>UNSIGNED_INT</code> and the type\r\n         * of an element in <code>Uint32Array</code>.\r\n         *\r\n         * @memberOf ComponentDatatype\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        UNSIGNED_INT : WebGLConstants.UNSIGNED_INT,\r\n\r\n        /**\r\n         * 32-bit floating-point corresponding to <code>FLOAT</code> and the type\r\n         * of an element in <code>Float32Array</code>.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        FLOAT : WebGLConstants.FLOAT,\r\n\r\n        /**\r\n         * 64-bit floating-point corresponding to <code>gl.DOUBLE</code> (in Desktop OpenGL;\r\n         * this is not supported in WebGL, and is emulated in Cesium via {@link GeometryPipeline.encodeAttribute})\r\n         * and the type of an element in <code>Float64Array</code>.\r\n         *\r\n         * @memberOf ComponentDatatype\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         * @default 0x140A\r\n         */\r\n        DOUBLE : WebGLConstants.DOUBLE\r\n    };\r\n\r\n    /**\r\n     * Returns the size, in bytes, of the corresponding datatype.\r\n     *\r\n     * @param {ComponentDatatype} componentDatatype The component datatype to get the size of.\r\n     * @returns {Number} The size in bytes.\r\n     *\r\n     * @exception {DeveloperError} componentDatatype is not a valid value.\r\n     *\r\n     * @example\r\n     * // Returns Int8Array.BYTES_PER_ELEMENT\r\n     * var size = Cesium.ComponentDatatype.getSizeInBytes(Cesium.ComponentDatatype.BYTE);\r\n     */\r\n    ComponentDatatype.getSizeInBytes = function(componentDatatype){\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(componentDatatype)) {\r\n            throw new DeveloperError('value is required.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        switch (componentDatatype) {\r\n        case ComponentDatatype.BYTE:\r\n            return Int8Array.BYTES_PER_ELEMENT;\r\n        case ComponentDatatype.UNSIGNED_BYTE:\r\n            return Uint8Array.BYTES_PER_ELEMENT;\r\n        case ComponentDatatype.SHORT:\r\n            return Int16Array.BYTES_PER_ELEMENT;\r\n        case ComponentDatatype.UNSIGNED_SHORT:\r\n            return Uint16Array.BYTES_PER_ELEMENT;\r\n        case ComponentDatatype.INT:\r\n            return Int32Array.BYTES_PER_ELEMENT;\r\n        case ComponentDatatype.UNSIGNED_INT:\r\n            return Uint32Array.BYTES_PER_ELEMENT;\r\n        case ComponentDatatype.FLOAT:\r\n            return Float32Array.BYTES_PER_ELEMENT;\r\n        case ComponentDatatype.DOUBLE:\r\n            return Float64Array.BYTES_PER_ELEMENT;\r\n        //>>includeStart('debug', pragmas.debug);\r\n        default:\r\n            throw new DeveloperError('componentDatatype is not a valid value.');\r\n        //>>includeEnd('debug');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the {@link ComponentDatatype} for the provided TypedArray instance.\r\n     *\r\n     * @param {TypedArray} array The typed array.\r\n     * @returns {ComponentDatatype} The ComponentDatatype for the provided array, or undefined if the array is not a TypedArray.\r\n     */\r\n    ComponentDatatype.fromTypedArray = function(array) {\r\n        if (array instanceof Int8Array) {\r\n            return ComponentDatatype.BYTE;\r\n        }\r\n        if (array instanceof Uint8Array) {\r\n            return ComponentDatatype.UNSIGNED_BYTE;\r\n        }\r\n        if (array instanceof Int16Array) {\r\n            return ComponentDatatype.SHORT;\r\n        }\r\n        if (array instanceof Uint16Array) {\r\n            return ComponentDatatype.UNSIGNED_SHORT;\r\n        }\r\n        if (array instanceof Int32Array) {\r\n            return ComponentDatatype.INT;\r\n        }\r\n        if (array instanceof Uint32Array) {\r\n            return ComponentDatatype.UNSIGNED_INT;\r\n        }\r\n        if (array instanceof Float32Array) {\r\n            return ComponentDatatype.FLOAT;\r\n        }\r\n        if (array instanceof Float64Array) {\r\n            return ComponentDatatype.DOUBLE;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Validates that the provided component datatype is a valid {@link ComponentDatatype}\r\n     *\r\n     * @param {ComponentDatatype} componentDatatype The component datatype to validate.\r\n     * @returns {Boolean} <code>true</code> if the provided component datatype is a valid value; otherwise, <code>false</code>.\r\n     *\r\n     * @example\r\n     * if (!Cesium.ComponentDatatype.validate(componentDatatype)) {\r\n     *   throw new Cesium.DeveloperError('componentDatatype must be a valid value.');\r\n     * }\r\n     */\r\n    ComponentDatatype.validate = function(componentDatatype) {\r\n        return defined(componentDatatype) &&\r\n               (componentDatatype === ComponentDatatype.BYTE ||\r\n                componentDatatype === ComponentDatatype.UNSIGNED_BYTE ||\r\n                componentDatatype === ComponentDatatype.SHORT ||\r\n                componentDatatype === ComponentDatatype.UNSIGNED_SHORT ||\r\n                componentDatatype === ComponentDatatype.INT ||\r\n                componentDatatype === ComponentDatatype.UNSIGNED_INT ||\r\n                componentDatatype === ComponentDatatype.FLOAT ||\r\n                componentDatatype === ComponentDatatype.DOUBLE);\r\n    };\r\n\r\n    /**\r\n     * Creates a typed array corresponding to component data type.\r\n     *\r\n     * @param {ComponentDatatype} componentDatatype The component data type.\r\n     * @param {Number|Array} valuesOrLength The length of the array to create or an array.\r\n     * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} A typed array.\r\n     *\r\n     * @exception {DeveloperError} componentDatatype is not a valid value.\r\n     *\r\n     * @example\r\n     * // creates a Float32Array with length of 100\r\n     * var typedArray = Cesium.ComponentDatatype.createTypedArray(Cesium.ComponentDatatype.FLOAT, 100);\r\n     */\r\n    ComponentDatatype.createTypedArray = function(componentDatatype, valuesOrLength) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(componentDatatype)) {\r\n            throw new DeveloperError('componentDatatype is required.');\r\n        }\r\n        if (!defined(valuesOrLength)) {\r\n            throw new DeveloperError('valuesOrLength is required.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        switch (componentDatatype) {\r\n        case ComponentDatatype.BYTE:\r\n            return new Int8Array(valuesOrLength);\r\n        case ComponentDatatype.UNSIGNED_BYTE:\r\n            return new Uint8Array(valuesOrLength);\r\n        case ComponentDatatype.SHORT:\r\n            return new Int16Array(valuesOrLength);\r\n        case ComponentDatatype.UNSIGNED_SHORT:\r\n            return new Uint16Array(valuesOrLength);\r\n        case ComponentDatatype.INT:\r\n            return new Int32Array(valuesOrLength);\r\n        case ComponentDatatype.UNSIGNED_INT:\r\n            return new Uint32Array(valuesOrLength);\r\n        case ComponentDatatype.FLOAT:\r\n            return new Float32Array(valuesOrLength);\r\n        case ComponentDatatype.DOUBLE:\r\n            return new Float64Array(valuesOrLength);\r\n        //>>includeStart('debug', pragmas.debug);\r\n        default:\r\n            throw new DeveloperError('componentDatatype is not a valid value.');\r\n        //>>includeEnd('debug');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Creates a typed view of an array of bytes.\r\n     *\r\n     * @param {ComponentDatatype} componentDatatype The type of the view to create.\r\n     * @param {ArrayBuffer} buffer The buffer storage to use for the view.\r\n     * @param {Number} [byteOffset] The offset, in bytes, to the first element in the view.\r\n     * @param {Number} [length] The number of elements in the view.\r\n     * @returns {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} A typed array view of the buffer.\r\n     *\r\n     * @exception {DeveloperError} componentDatatype is not a valid value.\r\n     */\r\n    ComponentDatatype.createArrayBufferView = function(componentDatatype, buffer, byteOffset, length) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(componentDatatype)) {\r\n            throw new DeveloperError('componentDatatype is required.');\r\n        }\r\n        if (!defined(buffer)) {\r\n            throw new DeveloperError('buffer is required.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        byteOffset = defaultValue(byteOffset, 0);\r\n        length = defaultValue(length, (buffer.byteLength - byteOffset) / ComponentDatatype.getSizeInBytes(componentDatatype));\r\n\r\n        switch (componentDatatype) {\r\n        case ComponentDatatype.BYTE:\r\n            return new Int8Array(buffer, byteOffset, length);\r\n        case ComponentDatatype.UNSIGNED_BYTE:\r\n            return new Uint8Array(buffer, byteOffset, length);\r\n        case ComponentDatatype.SHORT:\r\n            return new Int16Array(buffer, byteOffset, length);\r\n        case ComponentDatatype.UNSIGNED_SHORT:\r\n            return new Uint16Array(buffer, byteOffset, length);\r\n        case ComponentDatatype.INT:\r\n            return new Int32Array(buffer, byteOffset, length);\r\n        case ComponentDatatype.UNSIGNED_INT:\r\n            return new Uint32Array(buffer, byteOffset, length);\r\n        case ComponentDatatype.FLOAT:\r\n            return new Float32Array(buffer, byteOffset, length);\r\n        case ComponentDatatype.DOUBLE:\r\n            return new Float64Array(buffer, byteOffset, length);\r\n        //>>includeStart('debug', pragmas.debug);\r\n        default:\r\n            throw new DeveloperError('componentDatatype is not a valid value.');\r\n        //>>includeEnd('debug');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the ComponentDatatype from its name.\r\n     *\r\n     * @param {String} name The name of the ComponentDatatype.\r\n     * @returns {ComponentDatatype} The ComponentDatatype.\r\n     *\r\n     * @exception {DeveloperError} name is not a valid value.\r\n     */\r\n    ComponentDatatype.fromName = function(name) {\r\n        switch (name) {\r\n            case 'BYTE':\r\n                return ComponentDatatype.BYTE;\r\n            case 'UNSIGNED_BYTE':\r\n                return ComponentDatatype.UNSIGNED_BYTE;\r\n            case 'SHORT':\r\n                return ComponentDatatype.SHORT;\r\n            case 'UNSIGNED_SHORT':\r\n                return ComponentDatatype.UNSIGNED_SHORT;\r\n            case 'INT':\r\n                return ComponentDatatype.INT;\r\n            case 'UNSIGNED_INT':\r\n                return ComponentDatatype.UNSIGNED_INT;\r\n            case 'FLOAT':\r\n                return ComponentDatatype.FLOAT;\r\n            case 'DOUBLE':\r\n                return ComponentDatatype.DOUBLE;\r\n            //>>includeStart('debug', pragmas.debug);\r\n            default:\r\n                throw new DeveloperError('name is not a valid value.');\r\n            //>>includeEnd('debug');\r\n        }\r\n    };\r\nexport default Object.freeze(ComponentDatatype);\r\n"],"names":["ComponentDatatype","BYTE","WebGLConstants","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","DOUBLE","getSizeInBytes","componentDatatype","defined","DeveloperError","Int8Array","BYTES_PER_ELEMENT","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","fromTypedArray","array","validate","createTypedArray","valuesOrLength","createArrayBufferView","buffer","byteOffset","length","defaultValue","byteLength","fromName","name","Object","freeze"],"mappings":"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"}