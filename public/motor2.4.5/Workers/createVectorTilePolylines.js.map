{"version":3,"file":"createVectorTilePolylines.js","sources":["../../../../Source/WorkersES6/createVectorTilePolylines.js"],"sourcesContent":["import AttributeCompression from '../Core/AttributeCompression.js';\r\nimport Cartesian3 from '../Core/Cartesian3.js';\r\nimport Cartographic from '../Core/Cartographic.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\nimport IndexDatatype from '../Core/IndexDatatype.js';\r\nimport CesiumMath from '../Core/Math.js';\r\nimport Rectangle from '../Core/Rectangle.js';\r\nimport createTaskProcessorWorker from './createTaskProcessorWorker.js';\r\n\r\n    var maxShort = 32767;\r\n\r\n    var scratchBVCartographic = new Cartographic();\r\n    var scratchEncodedPosition = new Cartesian3();\r\n\r\n    function decodePositions(positions, rectangle, minimumHeight, maximumHeight, ellipsoid) {\r\n        var positionsLength = positions.length / 3;\r\n        var uBuffer = positions.subarray(0, positionsLength);\r\n        var vBuffer = positions.subarray(positionsLength, 2 * positionsLength);\r\n        var heightBuffer = positions.subarray(2 * positionsLength, 3 * positionsLength);\r\n        AttributeCompression.zigZagDeltaDecode(uBuffer, vBuffer, heightBuffer);\r\n\r\n        var decoded = new Float64Array(positions.length);\r\n        for (var i = 0; i < positionsLength; ++i) {\r\n            var u = uBuffer[i];\r\n            var v = vBuffer[i];\r\n            var h = heightBuffer[i];\r\n\r\n            var lon = CesiumMath.lerp(rectangle.west, rectangle.east, u / maxShort);\r\n            var lat = CesiumMath.lerp(rectangle.south, rectangle.north, v / maxShort);\r\n            var alt = CesiumMath.lerp(minimumHeight, maximumHeight, h / maxShort);\r\n\r\n            var cartographic = Cartographic.fromRadians(lon, lat, alt, scratchBVCartographic);\r\n            var decodedPosition = ellipsoid.cartographicToCartesian(cartographic, scratchEncodedPosition);\r\n            Cartesian3.pack(decodedPosition, decoded, i * 3);\r\n        }\r\n        return decoded;\r\n    }\r\n\r\n    var scratchRectangle = new Rectangle();\r\n    var scratchEllipsoid = new Ellipsoid();\r\n    var scratchCenter = new Cartesian3();\r\n    var scratchMinMaxHeights = {\r\n        min : undefined,\r\n        max : undefined\r\n    };\r\n\r\n    function unpackBuffer(packedBuffer) {\r\n        packedBuffer = new Float64Array(packedBuffer);\r\n\r\n        var offset = 0;\r\n        scratchMinMaxHeights.min = packedBuffer[offset++];\r\n        scratchMinMaxHeights.max = packedBuffer[offset++];\r\n\r\n        Rectangle.unpack(packedBuffer, offset, scratchRectangle);\r\n        offset += Rectangle.packedLength;\r\n\r\n        Ellipsoid.unpack(packedBuffer, offset, scratchEllipsoid);\r\n        offset += Ellipsoid.packedLength;\r\n\r\n        Cartesian3.unpack(packedBuffer, offset, scratchCenter);\r\n    }\r\n\r\n    var scratchP0 = new Cartesian3();\r\n    var scratchP1 = new Cartesian3();\r\n    var scratchPrev = new Cartesian3();\r\n    var scratchCur = new Cartesian3();\r\n    var scratchNext = new Cartesian3();\r\n\r\n    function createVectorTilePolylines(parameters, transferableObjects) {\r\n        var encodedPositions = new Uint16Array(parameters.positions);\r\n        var widths = new Uint16Array(parameters.widths);\r\n        var counts = new Uint32Array(parameters.counts);\r\n        var batchIds = new Uint16Array(parameters.batchIds);\r\n\r\n        unpackBuffer(parameters.packedBuffer);\r\n        var rectangle = scratchRectangle;\r\n        var ellipsoid = scratchEllipsoid;\r\n        var center = scratchCenter;\r\n        var minimumHeight = scratchMinMaxHeights.min;\r\n        var maximumHeight = scratchMinMaxHeights.max;\r\n\r\n        var positions = decodePositions(encodedPositions, rectangle, minimumHeight, maximumHeight, ellipsoid);\r\n\r\n        var positionsLength = positions.length / 3;\r\n        var size = positionsLength * 4 - 4;\r\n\r\n        var curPositions = new Float32Array(size * 3);\r\n        var prevPositions = new Float32Array(size * 3);\r\n        var nextPositions = new Float32Array(size * 3);\r\n        var expandAndWidth = new Float32Array(size * 2);\r\n        var vertexBatchIds = new Uint16Array(size);\r\n\r\n        var positionIndex = 0;\r\n        var expandAndWidthIndex = 0;\r\n        var batchIdIndex = 0;\r\n\r\n        var i;\r\n        var offset = 0;\r\n        var length = counts.length;\r\n\r\n        for (i = 0; i < length; ++i) {\r\n            var count = counts [i];\r\n            var width = widths[i];\r\n            var batchId = batchIds[i];\r\n\r\n            for (var j = 0; j < count; ++j) {\r\n                var previous;\r\n                if (j === 0) {\r\n                    var p0 = Cartesian3.unpack(positions, offset * 3, scratchP0);\r\n                    var p1 = Cartesian3.unpack(positions, (offset + 1) * 3, scratchP1);\r\n\r\n                    previous = Cartesian3.subtract(p0, p1, scratchPrev);\r\n                    Cartesian3.add(p0, previous, previous);\r\n                } else {\r\n                    previous = Cartesian3.unpack(positions, (offset + j - 1) * 3, scratchPrev);\r\n                }\r\n\r\n                var current = Cartesian3.unpack(positions, (offset + j) * 3, scratchCur);\r\n\r\n                var next;\r\n                if (j === count - 1) {\r\n                    var p2 = Cartesian3.unpack(positions, (offset + count - 1) * 3, scratchP0);\r\n                    var p3 = Cartesian3.unpack(positions, (offset + count - 2) * 3, scratchP1);\r\n\r\n                    next = Cartesian3.subtract(p2, p3, scratchNext);\r\n                    Cartesian3.add(p2, next, next);\r\n                } else {\r\n                    next = Cartesian3.unpack(positions, (offset + j + 1) * 3, scratchNext);\r\n                }\r\n\r\n                Cartesian3.subtract(previous, center, previous);\r\n                Cartesian3.subtract(current, center, current);\r\n                Cartesian3.subtract(next, center, next);\r\n\r\n                var startK = j === 0 ? 2 : 0;\r\n                var endK = j === count - 1 ? 2 : 4;\r\n\r\n                for (var k = startK; k < endK; ++k) {\r\n                    Cartesian3.pack(current, curPositions, positionIndex);\r\n                    Cartesian3.pack(previous, prevPositions, positionIndex);\r\n                    Cartesian3.pack(next, nextPositions, positionIndex);\r\n                    positionIndex += 3;\r\n\r\n                    var direction = (k - 2 < 0) ? -1.0 : 1.0;\r\n                    expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1;\r\n                    expandAndWidth[expandAndWidthIndex++] = direction * width;\r\n\r\n                    vertexBatchIds[batchIdIndex++] = batchId;\r\n                }\r\n            }\r\n\r\n            offset += count;\r\n        }\r\n\r\n        var indices = IndexDatatype.createTypedArray(size, positionsLength * 6 - 6);\r\n        var index = 0;\r\n        var indicesIndex = 0;\r\n        length = positionsLength - 1;\r\n        for (i = 0; i < length; ++i) {\r\n            indices[indicesIndex++] = index;\r\n            indices[indicesIndex++] = index + 2;\r\n            indices[indicesIndex++] = index + 1;\r\n\r\n            indices[indicesIndex++] = index + 1;\r\n            indices[indicesIndex++] = index + 2;\r\n            indices[indicesIndex++] = index + 3;\r\n\r\n            index += 4;\r\n        }\r\n\r\n        transferableObjects.push(curPositions.buffer, prevPositions.buffer, nextPositions.buffer);\r\n        transferableObjects.push(expandAndWidth.buffer, vertexBatchIds.buffer, indices.buffer);\r\n\r\n        return {\r\n            indexDatatype : (indices.BYTES_PER_ELEMENT === 2) ? IndexDatatype.UNSIGNED_SHORT : IndexDatatype.UNSIGNED_INT,\r\n            currentPositions : curPositions.buffer,\r\n            previousPositions : prevPositions.buffer,\r\n            nextPositions : nextPositions.buffer,\r\n            expandAndWidth : expandAndWidth.buffer,\r\n            batchIds : vertexBatchIds.buffer,\r\n            indices : indices.buffer\r\n        };\r\n    }\r\nexport default createTaskProcessorWorker(createVectorTilePolylines);\r\n"],"names":["scratchBVCartographic","Cartographic","scratchEncodedPosition","Cartesian3","scratchRectangle","Rectangle","scratchEllipsoid","Ellipsoid","scratchCenter","scratchMinMaxHeights","min","undefined","max","scratchP0","scratchP1","scratchPrev","scratchCur","scratchNext","createTaskProcessorWorker","parameters","transferableObjects","encodedPositions","Uint16Array","positions","widths","counts","Uint32Array","batchIds","packedBuffer","Float64Array","offset","unpack","packedLength","unpackBuffer","i","ellipsoid","center","rectangle","minimumHeight","maximumHeight","positionsLength","length","uBuffer","subarray","vBuffer","heightBuffer","AttributeCompression","zigZagDeltaDecode","decoded","u","v","h","lon","CesiumMath","lerp","west","east","lat","south","north","alt","cartographic","fromRadians","decodedPosition","cartographicToCartesian","pack","decodePositions","size","curPositions","Float32Array","prevPositions","nextPositions","expandAndWidth","vertexBatchIds","positionIndex","expandAndWidthIndex","batchIdIndex","count","width","batchId","j","previous","p0","p1","subtract","add","next","current","p2","p3","endK","k","direction","indices","IndexDatatype","createTypedArray","index","indicesIndex","push","buffer","indexDatatype","BYTES_PER_ELEMENT","UNSIGNED_SHORT","UNSIGNED_INT","currentPositions","previousPositions"],"mappings":"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"}