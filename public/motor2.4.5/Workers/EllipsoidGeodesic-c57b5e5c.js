/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["exports","./when-4ca4e419","./Check-430b3551","./defineProperties-163ddb68","./Cartesian3-32451e63","./Ellipsoid-d2aa3b12"],(function(t,a,i,e,n,s){"use strict";function r(t,a,i,e,n,s,r){var h=function(t,a){return t*a*(4+t*(4-3*a))/16}(t,i);return(1-h)*t*a*(e+h*n*(r+h*s*(2*r*r-1)))}var h=new n.Cartesian3,d=new n.Cartesian3;function o(t,a,o,c){var u=n.Cartesian3.normalize(c.cartographicToCartesian(a,d),h),l=n.Cartesian3.normalize(c.cartographicToCartesian(o,d),d);i.Check.typeOf.number.greaterThanOrEquals("value",Math.abs(Math.abs(n.Cartesian3.angleBetween(u,l))-Math.PI),.0125),function(t,a,i,n,s,h,d){var o,c,u,l,M,g=(a-i)/a,_=h-n,p=Math.atan((1-g)*Math.tan(s)),f=Math.atan((1-g)*Math.tan(d)),v=Math.cos(p),C=Math.sin(p),m=Math.cos(f),H=Math.sin(f),O=v*m,b=v*H,q=C*H,S=C*m,k=_,w=e.CesiumMath.TWO_PI,U=Math.cos(k),A=Math.sin(k);do{U=Math.cos(k),A=Math.sin(k);var E,P=b-S*U;u=Math.sqrt(m*m*A*A+P*P),c=q+O*U,o=Math.atan2(u,c),0===u?(E=0,l=1):l=1-(E=O*A/u)*E,w=k,M=c-2*q/l,isNaN(M)&&(M=0),k=_+r(g,E,l,o,u,c,M)}while(Math.abs(k-w)>e.CesiumMath.EPSILON12);var R=l*(a*a-i*i)/(i*i),y=R*(256+R*(R*(74-47*R)-128))/1024,T=M*M,x=i*(1+R*(4096+R*(R*(320-175*R)-768))/16384)*(o-y*u*(M+y*(c*(2*T-1)-y*M*(4*u*u-3)*(4*T-3)/6)/4)),D=Math.atan2(m*A,b-S*U),I=Math.atan2(v*A,b*U-S);t._distance=x,t._startHeading=D,t._endHeading=I,t._uSquared=R}(t,c.maximumRadius,c.minimumRadius,a.longitude,a.latitude,o.longitude,o.latitude),t._start=s.Cartographic.clone(a,t._start),t._end=s.Cartographic.clone(o,t._end),t._start.height=0,t._end.height=0,function(t){var a=t._uSquared,i=t._ellipsoid.maximumRadius,e=t._ellipsoid.minimumRadius,n=(i-e)/i,s=Math.cos(t._startHeading),r=Math.sin(t._startHeading),h=(1-n)*Math.tan(t._start.latitude),d=1/Math.sqrt(1+h*h),o=d*h,c=Math.atan2(h,s),u=d*r,l=u*u,M=1-l,g=Math.sqrt(M),_=a/4,p=_*_,f=p*_,v=p*p,C=1+_-3*p/4+5*f/4-175*v/64,m=1-_+15*p/8-35*f/8,H=1-3*_+35*p/4,O=1-5*_,b=C*c-m*Math.sin(2*c)*_/2-H*Math.sin(4*c)*p/16-O*Math.sin(6*c)*f/48-5*Math.sin(8*c)*v/512,q=t._constants;q.a=i,q.b=e,q.f=n,q.cosineHeading=s,q.sineHeading=r,q.tanU=h,q.cosineU=d,q.sineU=o,q.sigma=c,q.sineAlpha=u,q.sineSquaredAlpha=l,q.cosineSquaredAlpha=M,q.cosineAlpha=g,q.u2Over4=_,q.u4Over16=p,q.u6Over64=f,q.u8Over256=v,q.a0=C,q.a1=m,q.a2=H,q.a3=O,q.distanceRatio=b}(t)}function c(t,i,e){var n=a.defaultValue(e,s.Ellipsoid.WGS84);this._ellipsoid=n,this._start=new s.Cartographic,this._end=new s.Cartographic,this._constants={},this._startHeading=void 0,this._endHeading=void 0,this._distance=void 0,this._uSquared=void 0,a.defined(t)&&a.defined(i)&&o(this,t,i,n)}e.defineProperties(c.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},surfaceDistance:{get:function(){return i.Check.defined("distance",this._distance),this._distance}},start:{get:function(){return this._start}},end:{get:function(){return this._end}},startHeading:{get:function(){return i.Check.defined("distance",this._distance),this._startHeading}},endHeading:{get:function(){return i.Check.defined("distance",this._distance),this._endHeading}}}),c.prototype.setEndPoints=function(t,a){i.Check.defined("start",t),i.Check.defined("end",a),o(this,t,a,this._ellipsoid)},c.prototype.interpolateUsingFraction=function(t,a){return this.interpolateUsingSurfaceDistance(this._distance*t,a)},c.prototype.interpolateUsingSurfaceDistance=function(t,e){i.Check.defined("distance",this._distance);var n=this._constants,h=n.distanceRatio+t/n.b,d=Math.cos(2*h),o=Math.cos(4*h),c=Math.cos(6*h),u=Math.sin(2*h),l=Math.sin(4*h),M=Math.sin(6*h),g=Math.sin(8*h),_=h*h,p=h*_,f=n.u8Over256,v=n.u2Over4,C=n.u6Over64,m=n.u4Over16,H=2*p*f*d/3+h*(1-v+7*m/4-15*C/4+579*f/64-(m-15*C/4+187*f/16)*d-(5*C/4-115*f/16)*o-29*f*c/16)+(v/2-m+71*C/32-85*f/16)*u+(5*m/16-5*C/4+383*f/96)*l-_*((C-11*f/2)*u+5*f*l/2)+(29*C/96-29*f/16)*M+539*f*g/1536,O=Math.asin(Math.sin(H)*n.cosineAlpha),b=Math.atan(n.a/n.b*Math.tan(O));H-=n.sigma;var q=Math.cos(2*n.sigma+H),S=Math.sin(H),k=Math.cos(H),w=n.cosineU*k,U=n.sineU*S,A=Math.atan2(S*n.sineHeading,w-U*n.cosineHeading)-r(n.f,n.sineAlpha,n.cosineSquaredAlpha,H,S,k,q);return a.defined(e)?(e.longitude=this._start.longitude+A,e.latitude=b,e.height=0,e):new s.Cartographic(this._start.longitude+A,b,0)},t.EllipsoidGeodesic=c}));
