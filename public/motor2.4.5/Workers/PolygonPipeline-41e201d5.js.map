{"version":3,"file":"PolygonPipeline-41e201d5.js","sources":["../../../../Source/ThirdParty/earcut-2.2.1.js","../../../../Source/Core/WindingOrder.js","../../../../Source/Core/PolygonPipeline.js"],"sourcesContent":["function earcut(data, holeIndices, dim) {\r\n\r\n    dim = dim || 2;\r\n\r\n    var hasHoles = holeIndices && holeIndices.length,\r\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\r\n        outerNode = linkedList(data, 0, outerLen, dim, true),\r\n        triangles = [];\r\n\r\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\r\n\r\n    var minX, minY, maxX, maxY, x, y, invSize;\r\n\r\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\r\n\r\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\r\n    if (data.length > 80 * dim) {\r\n        minX = maxX = data[0];\r\n        minY = maxY = data[1];\r\n\r\n        for (var i = dim; i < outerLen; i += dim) {\r\n            x = data[i];\r\n            y = data[i + 1];\r\n            if (x < minX) minX = x;\r\n            if (y < minY) minY = y;\r\n            if (x > maxX) maxX = x;\r\n            if (y > maxY) maxY = y;\r\n        }\r\n\r\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\r\n        invSize = Math.max(maxX - minX, maxY - minY);\r\n        invSize = invSize !== 0 ? 1 / invSize : 0;\r\n    }\r\n\r\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\r\n\r\n    return triangles;\r\n}\r\n\r\n// create a circular doubly linked list from polygon points in the specified winding order\r\nfunction linkedList(data, start, end, dim, clockwise) {\r\n    var i, last;\r\n\r\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\r\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\r\n    } else {\r\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\r\n    }\r\n\r\n    if (last && equals(last, last.next)) {\r\n        removeNode(last);\r\n        last = last.next;\r\n    }\r\n\r\n    return last;\r\n}\r\n\r\n// eliminate colinear or duplicate points\r\nfunction filterPoints(start, end) {\r\n    if (!start) return start;\r\n    if (!end) end = start;\r\n\r\n    var p = start,\r\n        again;\r\n    do {\r\n        again = false;\r\n\r\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\r\n            removeNode(p);\r\n            p = end = p.prev;\r\n            if (p === p.next) break;\r\n            again = true;\r\n\r\n        } else {\r\n            p = p.next;\r\n        }\r\n    } while (again || p !== end);\r\n\r\n    return end;\r\n}\r\n\r\n// main ear slicing loop which triangulates a polygon (given as a linked list)\r\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\r\n    if (!ear) return;\r\n\r\n    // interlink polygon nodes in z-order\r\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\r\n\r\n    var stop = ear,\r\n        prev, next;\r\n\r\n    // iterate through ears, slicing them one by one\r\n    while (ear.prev !== ear.next) {\r\n        prev = ear.prev;\r\n        next = ear.next;\r\n\r\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\r\n            // cut off the triangle\r\n            triangles.push(prev.i / dim);\r\n            triangles.push(ear.i / dim);\r\n            triangles.push(next.i / dim);\r\n\r\n            removeNode(ear);\r\n\r\n            // skipping the next vertex leads to less sliver triangles\r\n            ear = next.next;\r\n            stop = next.next;\r\n\r\n            continue;\r\n        }\r\n\r\n        ear = next;\r\n\r\n        // if we looped through the whole remaining polygon and can't find any more ears\r\n        if (ear === stop) {\r\n            // try filtering points and slicing again\r\n            if (!pass) {\r\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\r\n\r\n            // if this didn't work, try curing all small self-intersections locally\r\n            } else if (pass === 1) {\r\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\r\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\r\n\r\n            // as a last resort, try splitting the remaining polygon into two\r\n            } else if (pass === 2) {\r\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\r\n            }\r\n\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// check whether a polygon node forms a valid ear with adjacent nodes\r\nfunction isEar(ear) {\r\n    var a = ear.prev,\r\n        b = ear,\r\n        c = ear.next;\r\n\r\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\r\n\r\n    // now make sure we don't have other points inside the potential ear\r\n    var p = ear.next.next;\r\n\r\n    while (p !== ear.prev) {\r\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\r\n            area(p.prev, p, p.next) >= 0) return false;\r\n        p = p.next;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction isEarHashed(ear, minX, minY, invSize) {\r\n    var a = ear.prev,\r\n        b = ear,\r\n        c = ear.next;\r\n\r\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\r\n\r\n    // triangle bbox; min & max are calculated like this for speed\r\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\r\n        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\r\n        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\r\n        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\r\n\r\n    // z-order range for the current triangle bbox;\r\n    var minZ = zOrder(minTX, minTY, minX, minY, invSize),\r\n        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\r\n\r\n    var p = ear.prevZ,\r\n        n = ear.nextZ;\r\n\r\n    // look for points inside the triangle in both directions\r\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\r\n        if (p !== ear.prev && p !== ear.next &&\r\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\r\n            area(p.prev, p, p.next) >= 0) return false;\r\n        p = p.prevZ;\r\n\r\n        if (n !== ear.prev && n !== ear.next &&\r\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\r\n            area(n.prev, n, n.next) >= 0) return false;\r\n        n = n.nextZ;\r\n    }\r\n\r\n    // look for remaining points in decreasing z-order\r\n    while (p && p.z >= minZ) {\r\n        if (p !== ear.prev && p !== ear.next &&\r\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\r\n            area(p.prev, p, p.next) >= 0) return false;\r\n        p = p.prevZ;\r\n    }\r\n\r\n    // look for remaining points in increasing z-order\r\n    while (n && n.z <= maxZ) {\r\n        if (n !== ear.prev && n !== ear.next &&\r\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\r\n            area(n.prev, n, n.next) >= 0) return false;\r\n        n = n.nextZ;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// go through all polygon nodes and cure small local self-intersections\r\nfunction cureLocalIntersections(start, triangles, dim) {\r\n    var p = start;\r\n    do {\r\n        var a = p.prev,\r\n            b = p.next.next;\r\n\r\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\r\n\r\n            triangles.push(a.i / dim);\r\n            triangles.push(p.i / dim);\r\n            triangles.push(b.i / dim);\r\n\r\n            // remove two nodes involved\r\n            removeNode(p);\r\n            removeNode(p.next);\r\n\r\n            p = start = b;\r\n        }\r\n        p = p.next;\r\n    } while (p !== start);\r\n\r\n    return filterPoints(p);\r\n}\r\n\r\n// try splitting polygon into two and triangulate them independently\r\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\r\n    // look for a valid diagonal that divides the polygon into two\r\n    var a = start;\r\n    do {\r\n        var b = a.next.next;\r\n        while (b !== a.prev) {\r\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\r\n                // split the polygon in two by the diagonal\r\n                var c = splitPolygon(a, b);\r\n\r\n                // filter colinear points around the cuts\r\n                a = filterPoints(a, a.next);\r\n                c = filterPoints(c, c.next);\r\n\r\n                // run earcut on each half\r\n                earcutLinked(a, triangles, dim, minX, minY, invSize);\r\n                earcutLinked(c, triangles, dim, minX, minY, invSize);\r\n                return;\r\n            }\r\n            b = b.next;\r\n        }\r\n        a = a.next;\r\n    } while (a !== start);\r\n}\r\n\r\n// link every hole into the outer loop, producing a single-ring polygon without holes\r\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\r\n    var queue = [],\r\n        i, len, start, end, list;\r\n\r\n    for (i = 0, len = holeIndices.length; i < len; i++) {\r\n        start = holeIndices[i] * dim;\r\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\r\n        list = linkedList(data, start, end, dim, false);\r\n        if (list === list.next) list.steiner = true;\r\n        queue.push(getLeftmost(list));\r\n    }\r\n\r\n    queue.sort(compareX);\r\n\r\n    // process holes from left to right\r\n    for (i = 0; i < queue.length; i++) {\r\n        eliminateHole(queue[i], outerNode);\r\n        outerNode = filterPoints(outerNode, outerNode.next);\r\n    }\r\n\r\n    return outerNode;\r\n}\r\n\r\nfunction compareX(a, b) {\r\n    return a.x - b.x;\r\n}\r\n\r\n// find a bridge between vertices that connects hole with an outer ring and and link it\r\nfunction eliminateHole(hole, outerNode) {\r\n    outerNode = findHoleBridge(hole, outerNode);\r\n    if (outerNode) {\r\n        var b = splitPolygon(outerNode, hole);\r\n        filterPoints(b, b.next);\r\n    }\r\n}\r\n\r\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\r\nfunction findHoleBridge(hole, outerNode) {\r\n    var p = outerNode,\r\n        hx = hole.x,\r\n        hy = hole.y,\r\n        qx = -Infinity,\r\n        m;\r\n\r\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\r\n    // segment's endpoint with lesser x will be potential connection point\r\n    do {\r\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\r\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\r\n            if (x <= hx && x > qx) {\r\n                qx = x;\r\n                if (x === hx) {\r\n                    if (hy === p.y) return p;\r\n                    if (hy === p.next.y) return p.next;\r\n                }\r\n                m = p.x < p.next.x ? p : p.next;\r\n            }\r\n        }\r\n        p = p.next;\r\n    } while (p !== outerNode);\r\n\r\n    if (!m) return null;\r\n\r\n    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\r\n\r\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\r\n    // if there are no points found, we have a valid connection;\r\n    // otherwise choose the point of the minimum angle with the ray as connection point\r\n\r\n    var stop = m,\r\n        mx = m.x,\r\n        my = m.y,\r\n        tanMin = Infinity,\r\n        tan;\r\n\r\n    p = m;\r\n\r\n    do {\r\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\r\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\r\n\r\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\r\n\r\n            if (locallyInside(p, hole) &&\r\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\r\n                m = p;\r\n                tanMin = tan;\r\n            }\r\n        }\r\n\r\n        p = p.next;\r\n    } while (p !== stop);\r\n\r\n    return m;\r\n}\r\n\r\n// whether sector in vertex m contains sector in vertex p in the same coordinates\r\nfunction sectorContainsSector(m, p) {\r\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\r\n}\r\n\r\n// interlink polygon nodes in z-order\r\nfunction indexCurve(start, minX, minY, invSize) {\r\n    var p = start;\r\n    do {\r\n        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\r\n        p.prevZ = p.prev;\r\n        p.nextZ = p.next;\r\n        p = p.next;\r\n    } while (p !== start);\r\n\r\n    p.prevZ.nextZ = null;\r\n    p.prevZ = null;\r\n\r\n    sortLinked(p);\r\n}\r\n\r\n// Simon Tatham's linked list merge sort algorithm\r\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\r\nfunction sortLinked(list) {\r\n    var i, p, q, e, tail, numMerges, pSize, qSize,\r\n        inSize = 1;\r\n\r\n    do {\r\n        p = list;\r\n        list = null;\r\n        tail = null;\r\n        numMerges = 0;\r\n\r\n        while (p) {\r\n            numMerges++;\r\n            q = p;\r\n            pSize = 0;\r\n            for (i = 0; i < inSize; i++) {\r\n                pSize++;\r\n                q = q.nextZ;\r\n                if (!q) break;\r\n            }\r\n            qSize = inSize;\r\n\r\n            while (pSize > 0 || (qSize > 0 && q)) {\r\n\r\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\r\n                    e = p;\r\n                    p = p.nextZ;\r\n                    pSize--;\r\n                } else {\r\n                    e = q;\r\n                    q = q.nextZ;\r\n                    qSize--;\r\n                }\r\n\r\n                if (tail) tail.nextZ = e;\r\n                else list = e;\r\n\r\n                e.prevZ = tail;\r\n                tail = e;\r\n            }\r\n\r\n            p = q;\r\n        }\r\n\r\n        tail.nextZ = null;\r\n        inSize *= 2;\r\n\r\n    } while (numMerges > 1);\r\n\r\n    return list;\r\n}\r\n\r\n// z-order of a point given coords and inverse of the longer side of data bbox\r\nfunction zOrder(x, y, minX, minY, invSize) {\r\n    // coords are transformed into non-negative 15-bit integer range\r\n    x = 32767 * (x - minX) * invSize;\r\n    y = 32767 * (y - minY) * invSize;\r\n\r\n    x = (x | (x << 8)) & 0x00FF00FF;\r\n    x = (x | (x << 4)) & 0x0F0F0F0F;\r\n    x = (x | (x << 2)) & 0x33333333;\r\n    x = (x | (x << 1)) & 0x55555555;\r\n\r\n    y = (y | (y << 8)) & 0x00FF00FF;\r\n    y = (y | (y << 4)) & 0x0F0F0F0F;\r\n    y = (y | (y << 2)) & 0x33333333;\r\n    y = (y | (y << 1)) & 0x55555555;\r\n\r\n    return x | (y << 1);\r\n}\r\n\r\n// find the leftmost node of a polygon ring\r\nfunction getLeftmost(start) {\r\n    var p = start,\r\n        leftmost = start;\r\n    do {\r\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\r\n        p = p.next;\r\n    } while (p !== start);\r\n\r\n    return leftmost;\r\n}\r\n\r\n// check if a point lies within a convex triangle\r\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\r\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\r\n           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\r\n           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\r\n}\r\n\r\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\r\nfunction isValidDiagonal(a, b) {\r\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\r\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\r\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\r\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\r\n}\r\n\r\n// signed area of a triangle\r\nfunction area(p, q, r) {\r\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\r\n}\r\n\r\n// check if two points are equal\r\nfunction equals(p1, p2) {\r\n    return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n// check if two segments intersect\r\nfunction intersects(p1, q1, p2, q2) {\r\n    var o1 = sign(area(p1, q1, p2));\r\n    var o2 = sign(area(p1, q1, q2));\r\n    var o3 = sign(area(p2, q2, p1));\r\n    var o4 = sign(area(p2, q2, q1));\r\n\r\n    if (o1 !== o2 && o3 !== o4) return true; // general case\r\n\r\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\r\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\r\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\r\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\r\n\r\n    return false;\r\n}\r\n\r\n// for collinear points p, q, r, check if point q lies on segment pr\r\nfunction onSegment(p, q, r) {\r\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\r\n}\r\n\r\nfunction sign(num) {\r\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\r\n}\r\n\r\n// check if a polygon diagonal intersects any polygon segments\r\nfunction intersectsPolygon(a, b) {\r\n    var p = a;\r\n    do {\r\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\r\n                intersects(p, p.next, a, b)) return true;\r\n        p = p.next;\r\n    } while (p !== a);\r\n\r\n    return false;\r\n}\r\n\r\n// check if a polygon diagonal is locally inside the polygon\r\nfunction locallyInside(a, b) {\r\n    return area(a.prev, a, a.next) < 0 ?\r\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\r\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\r\n}\r\n\r\n// check if the middle point of a polygon diagonal is inside the polygon\r\nfunction middleInside(a, b) {\r\n    var p = a,\r\n        inside = false,\r\n        px = (a.x + b.x) / 2,\r\n        py = (a.y + b.y) / 2;\r\n    do {\r\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\r\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\r\n            inside = !inside;\r\n        p = p.next;\r\n    } while (p !== a);\r\n\r\n    return inside;\r\n}\r\n\r\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\r\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\r\nfunction splitPolygon(a, b) {\r\n    var a2 = new Node(a.i, a.x, a.y),\r\n        b2 = new Node(b.i, b.x, b.y),\r\n        an = a.next,\r\n        bp = b.prev;\r\n\r\n    a.next = b;\r\n    b.prev = a;\r\n\r\n    a2.next = an;\r\n    an.prev = a2;\r\n\r\n    b2.next = a2;\r\n    a2.prev = b2;\r\n\r\n    bp.next = b2;\r\n    b2.prev = bp;\r\n\r\n    return b2;\r\n}\r\n\r\n// create a node and optionally link it with previous one (in a circular doubly linked list)\r\nfunction insertNode(i, x, y, last) {\r\n    var p = new Node(i, x, y);\r\n\r\n    if (!last) {\r\n        p.prev = p;\r\n        p.next = p;\r\n\r\n    } else {\r\n        p.next = last.next;\r\n        p.prev = last;\r\n        last.next.prev = p;\r\n        last.next = p;\r\n    }\r\n    return p;\r\n}\r\n\r\nfunction removeNode(p) {\r\n    p.next.prev = p.prev;\r\n    p.prev.next = p.next;\r\n\r\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\r\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\r\n}\r\n\r\nfunction Node(i, x, y) {\r\n    // vertex index in coordinates array\r\n    this.i = i;\r\n\r\n    // vertex coordinates\r\n    this.x = x;\r\n    this.y = y;\r\n\r\n    // previous and next vertex nodes in a polygon ring\r\n    this.prev = null;\r\n    this.next = null;\r\n\r\n    // z-order curve value\r\n    this.z = null;\r\n\r\n    // previous and next nodes in z-order\r\n    this.prevZ = null;\r\n    this.nextZ = null;\r\n\r\n    // indicates whether this is a steiner point\r\n    this.steiner = false;\r\n}\r\n\r\n// return a percentage difference between the polygon area and its triangulation area;\r\n// used to verify correctness of triangulation\r\nearcut.deviation = function (data, holeIndices, dim, triangles) {\r\n    var hasHoles = holeIndices && holeIndices.length;\r\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\r\n\r\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\r\n    if (hasHoles) {\r\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\r\n            var start = holeIndices[i] * dim;\r\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\r\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\r\n        }\r\n    }\r\n\r\n    var trianglesArea = 0;\r\n    for (i = 0; i < triangles.length; i += 3) {\r\n        var a = triangles[i] * dim;\r\n        var b = triangles[i + 1] * dim;\r\n        var c = triangles[i + 2] * dim;\r\n        trianglesArea += Math.abs(\r\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\r\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\r\n    }\r\n\r\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\r\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\r\n};\r\n\r\nfunction signedArea(data, start, end, dim) {\r\n    var sum = 0;\r\n    for (var i = start, j = end - dim; i < end; i += dim) {\r\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\r\n        j = i;\r\n    }\r\n    return sum;\r\n}\r\n\r\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\r\nearcut.flatten = function (data) {\r\n    var dim = data[0][0].length,\r\n        result = {vertices: [], holes: [], dimensions: dim},\r\n        holeIndex = 0;\r\n\r\n    for (var i = 0; i < data.length; i++) {\r\n        for (var j = 0; j < data[i].length; j++) {\r\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\r\n        }\r\n        if (i > 0) {\r\n            holeIndex += data[i - 1].length;\r\n            result.holes.push(holeIndex);\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nexport default earcut;\r\n","import WebGLConstants from './WebGLConstants.js';\r\n\r\n    /**\r\n     * Winding order defines the order of vertices for a triangle to be considered front-facing.\r\n     *\r\n     * @exports WindingOrder\r\n     */\r\n    var WindingOrder = {\r\n        /**\r\n         * Vertices are in clockwise order.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        CLOCKWISE : WebGLConstants.CW,\r\n\r\n        /**\r\n         * Vertices are in counter-clockwise order.\r\n         *\r\n         * @type {Number}\r\n         * @constant\r\n         */\r\n        COUNTER_CLOCKWISE : WebGLConstants.CCW,\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        validate : function(windingOrder) {\r\n            return windingOrder === WindingOrder.CLOCKWISE ||\r\n                   windingOrder === WindingOrder.COUNTER_CLOCKWISE;\r\n        }\r\n    };\r\nexport default Object.freeze(WindingOrder);\r\n","import earcut from '../ThirdParty/earcut-2.2.1.js';\r\nimport Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport Check from './Check.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport EllipsoidRhumbLine from './EllipsoidRhumbLine.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport CesiumMath from './Math.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport WindingOrder from './WindingOrder.js';\r\n\r\n    var scaleToGeodeticHeightN = new Cartesian3();\r\n    var scaleToGeodeticHeightP = new Cartesian3();\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    var PolygonPipeline = {};\r\n\r\n    /**\r\n     * @exception {DeveloperError} At least three positions are required.\r\n     */\r\n    PolygonPipeline.computeArea2D = function(positions) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('positions', positions);\r\n        Check.typeOf.number.greaterThanOrEquals('positions.length', positions.length, 3);\r\n        //>>includeEnd('debug');\r\n\r\n        var length = positions.length;\r\n        var area = 0.0;\r\n\r\n        for ( var i0 = length - 1, i1 = 0; i1 < length; i0 = i1++) {\r\n            var v0 = positions[i0];\r\n            var v1 = positions[i1];\r\n\r\n            area += (v0.x * v1.y) - (v1.x * v0.y);\r\n        }\r\n\r\n        return area * 0.5;\r\n    };\r\n\r\n    /**\r\n     * @returns {WindingOrder} The winding order.\r\n     *\r\n     * @exception {DeveloperError} At least three positions are required.\r\n     */\r\n    PolygonPipeline.computeWindingOrder2D = function(positions) {\r\n        var area = PolygonPipeline.computeArea2D(positions);\r\n        return (area > 0.0) ? WindingOrder.COUNTER_CLOCKWISE : WindingOrder.CLOCKWISE;\r\n    };\r\n\r\n    /**\r\n     * Triangulate a polygon.\r\n     *\r\n     * @param {Cartesian2[]} positions Cartesian2 array containing the vertices of the polygon\r\n     * @param {Number[]} [holes] An array of the staring indices of the holes.\r\n     * @returns {Number[]} Index array representing triangles that fill the polygon\r\n     */\r\n    PolygonPipeline.triangulate = function(positions, holes) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('positions', positions);\r\n        //>>includeEnd('debug');\r\n\r\n        var flattenedPositions = Cartesian2.packArray(positions);\r\n        return earcut(flattenedPositions, holes, 2);\r\n    };\r\n\r\n    var subdivisionV0Scratch = new Cartesian3();\r\n    var subdivisionV1Scratch = new Cartesian3();\r\n    var subdivisionV2Scratch = new Cartesian3();\r\n    var subdivisionS0Scratch = new Cartesian3();\r\n    var subdivisionS1Scratch = new Cartesian3();\r\n    var subdivisionS2Scratch = new Cartesian3();\r\n    var subdivisionMidScratch = new Cartesian3();\r\n\r\n    /**\r\n     * Subdivides positions and raises points to the surface of the ellipsoid.\r\n     *\r\n     * @param {Ellipsoid} ellipsoid The ellipsoid the polygon in on.\r\n     * @param {Cartesian3[]} positions An array of {@link Cartesian3} positions of the polygon.\r\n     * @param {Number[]} indices An array of indices that determines the triangles in the polygon.\r\n     * @param {Number} [granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     *\r\n     * @exception {DeveloperError} At least three indices are required.\r\n     * @exception {DeveloperError} The number of indices must be divisable by three.\r\n     * @exception {DeveloperError} Granularity must be greater than zero.\r\n     */\r\n    PolygonPipeline.computeSubdivision = function(ellipsoid, positions, indices, granularity) {\r\n        granularity = defaultValue(granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('ellipsoid', ellipsoid);\r\n        Check.defined('positions', positions);\r\n        Check.defined('indices', indices);\r\n        Check.typeOf.number.greaterThanOrEquals('indices.length', indices.length, 3);\r\n        Check.typeOf.number.equals('indices.length % 3', '0', indices.length % 3, 0);\r\n        Check.typeOf.number.greaterThan('granularity', granularity, 0.0);\r\n        //>>includeEnd('debug');\r\n\r\n        // triangles that need (or might need) to be subdivided.\r\n        var triangles = indices.slice(0);\r\n\r\n        // New positions due to edge splits are appended to the positions list.\r\n        var i;\r\n        var length = positions.length;\r\n        var subdividedPositions = new Array(length * 3);\r\n        var q = 0;\r\n        for (i = 0; i < length; i++) {\r\n            var item = positions[i];\r\n            subdividedPositions[q++] = item.x;\r\n            subdividedPositions[q++] = item.y;\r\n            subdividedPositions[q++] = item.z;\r\n        }\r\n\r\n        var subdividedIndices = [];\r\n\r\n        // Used to make sure shared edges are not split more than once.\r\n        var edges = {};\r\n\r\n        var radius = ellipsoid.maximumRadius;\r\n        var minDistance = CesiumMath.chordLength(granularity, radius);\r\n        var minDistanceSqrd = minDistance * minDistance;\r\n\r\n        while (triangles.length > 0) {\r\n            var i2 = triangles.pop();\r\n            var i1 = triangles.pop();\r\n            var i0 = triangles.pop();\r\n\r\n            var v0 = Cartesian3.fromArray(subdividedPositions, i0 * 3, subdivisionV0Scratch);\r\n            var v1 = Cartesian3.fromArray(subdividedPositions, i1 * 3, subdivisionV1Scratch);\r\n            var v2 = Cartesian3.fromArray(subdividedPositions, i2 * 3, subdivisionV2Scratch);\r\n\r\n            var s0 = Cartesian3.multiplyByScalar(Cartesian3.normalize(v0, subdivisionS0Scratch), radius, subdivisionS0Scratch);\r\n            var s1 = Cartesian3.multiplyByScalar(Cartesian3.normalize(v1, subdivisionS1Scratch), radius, subdivisionS1Scratch);\r\n            var s2 = Cartesian3.multiplyByScalar(Cartesian3.normalize(v2, subdivisionS2Scratch), radius, subdivisionS2Scratch);\r\n\r\n            var g0 = Cartesian3.magnitudeSquared(Cartesian3.subtract(s0, s1, subdivisionMidScratch));\r\n            var g1 = Cartesian3.magnitudeSquared(Cartesian3.subtract(s1, s2, subdivisionMidScratch));\r\n            var g2 = Cartesian3.magnitudeSquared(Cartesian3.subtract(s2, s0, subdivisionMidScratch));\r\n\r\n            var max = Math.max(g0, g1, g2);\r\n            var edge;\r\n            var mid;\r\n\r\n            // if the max length squared of a triangle edge is greater than the chord length of squared\r\n            // of the granularity, subdivide the triangle\r\n            if (max > minDistanceSqrd) {\r\n                if (g0 === max) {\r\n                    edge = Math.min(i0, i1) + ' ' + Math.max(i0, i1);\r\n\r\n                    i = edges[edge];\r\n                    if (!defined(i)) {\r\n                        mid = Cartesian3.add(v0, v1, subdivisionMidScratch);\r\n                        Cartesian3.multiplyByScalar(mid, 0.5, mid);\r\n                        subdividedPositions.push(mid.x, mid.y, mid.z);\r\n                        i = subdividedPositions.length / 3 - 1;\r\n                        edges[edge] = i;\r\n                    }\r\n\r\n                    triangles.push(i0, i, i2);\r\n                    triangles.push(i, i1, i2);\r\n                } else if (g1 === max) {\r\n                    edge = Math.min(i1, i2) + ' ' + Math.max(i1, i2);\r\n\r\n                    i = edges[edge];\r\n                    if (!defined(i)) {\r\n                        mid = Cartesian3.add(v1, v2, subdivisionMidScratch);\r\n                        Cartesian3.multiplyByScalar(mid, 0.5, mid);\r\n                        subdividedPositions.push(mid.x, mid.y, mid.z);\r\n                        i = subdividedPositions.length / 3 - 1;\r\n                        edges[edge] = i;\r\n                    }\r\n\r\n                    triangles.push(i1, i, i0);\r\n                    triangles.push(i, i2, i0);\r\n                } else if (g2 === max) {\r\n                    edge = Math.min(i2, i0) + ' ' + Math.max(i2, i0);\r\n\r\n                    i = edges[edge];\r\n                    if (!defined(i)) {\r\n                        mid = Cartesian3.add(v2, v0, subdivisionMidScratch);\r\n                        Cartesian3.multiplyByScalar(mid, 0.5, mid);\r\n                        subdividedPositions.push(mid.x, mid.y, mid.z);\r\n                        i = subdividedPositions.length / 3 - 1;\r\n                        edges[edge] = i;\r\n                    }\r\n\r\n                    triangles.push(i2, i, i1);\r\n                    triangles.push(i, i0, i1);\r\n                }\r\n            } else {\r\n                subdividedIndices.push(i0);\r\n                subdividedIndices.push(i1);\r\n                subdividedIndices.push(i2);\r\n            }\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : {\r\n                position : new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.DOUBLE,\r\n                    componentsPerAttribute : 3,\r\n                    values : subdividedPositions\r\n                })\r\n            },\r\n            indices : subdividedIndices,\r\n            primitiveType : PrimitiveType.TRIANGLES\r\n        });\r\n    };\r\n\r\n    var subdivisionC0Scratch = new Cartographic();\r\n    var subdivisionC1Scratch = new Cartographic();\r\n    var subdivisionC2Scratch = new Cartographic();\r\n    var subdivisionCartographicScratch = new Cartographic();\r\n\r\n    /**\r\n     * Subdivides positions on rhumb lines and raises points to the surface of the ellipsoid.\r\n     *\r\n     * @param {Ellipsoid} ellipsoid The ellipsoid the polygon in on.\r\n     * @param {Cartesian3[]} positions An array of {@link Cartesian3} positions of the polygon.\r\n     * @param {Number[]} indices An array of indices that determines the triangles in the polygon.\r\n     * @param {Number} [granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n     *\r\n     * @exception {DeveloperError} At least three indices are required.\r\n     * @exception {DeveloperError} The number of indices must be divisable by three.\r\n     * @exception {DeveloperError} Granularity must be greater than zero.\r\n     */\r\n    PolygonPipeline.computeRhumbLineSubdivision = function(ellipsoid, positions, indices, granularity) {\r\n        granularity = defaultValue(granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('ellipsoid', ellipsoid);\r\n        Check.defined('positions', positions);\r\n        Check.defined('indices', indices);\r\n        Check.typeOf.number.greaterThanOrEquals('indices.length', indices.length, 3);\r\n        Check.typeOf.number.equals('indices.length % 3', '0', indices.length % 3, 0);\r\n        Check.typeOf.number.greaterThan('granularity', granularity, 0.0);\r\n        //>>includeEnd('debug');\r\n\r\n        // triangles that need (or might need) to be subdivided.\r\n        var triangles = indices.slice(0);\r\n\r\n        // New positions due to edge splits are appended to the positions list.\r\n        var i;\r\n        var length = positions.length;\r\n        var subdividedPositions = new Array(length * 3);\r\n        var q = 0;\r\n        for (i = 0; i < length; i++) {\r\n            var item = positions[i];\r\n            subdividedPositions[q++] = item.x;\r\n            subdividedPositions[q++] = item.y;\r\n            subdividedPositions[q++] = item.z;\r\n        }\r\n\r\n        var subdividedIndices = [];\r\n\r\n        // Used to make sure shared edges are not split more than once.\r\n        var edges = {};\r\n\r\n        var radius = ellipsoid.maximumRadius;\r\n        var minDistance = CesiumMath.chordLength(granularity, radius);\r\n\r\n        var rhumb0 = new EllipsoidRhumbLine(undefined, undefined, ellipsoid);\r\n        var rhumb1 = new EllipsoidRhumbLine(undefined, undefined, ellipsoid);\r\n        var rhumb2 = new EllipsoidRhumbLine(undefined, undefined, ellipsoid);\r\n\r\n        while (triangles.length > 0) {\r\n            var i2 = triangles.pop();\r\n            var i1 = triangles.pop();\r\n            var i0 = triangles.pop();\r\n\r\n            var v0 = Cartesian3.fromArray(subdividedPositions, i0 * 3, subdivisionV0Scratch);\r\n            var v1 = Cartesian3.fromArray(subdividedPositions, i1 * 3, subdivisionV1Scratch);\r\n            var v2 = Cartesian3.fromArray(subdividedPositions, i2 * 3, subdivisionV2Scratch);\r\n\r\n            var c0 = ellipsoid.cartesianToCartographic(v0, subdivisionC0Scratch);\r\n            var c1 = ellipsoid.cartesianToCartographic(v1, subdivisionC1Scratch);\r\n            var c2 = ellipsoid.cartesianToCartographic(v2, subdivisionC2Scratch);\r\n\r\n            rhumb0.setEndPoints(c0, c1);\r\n            var g0 = rhumb0.surfaceDistance;\r\n            rhumb1.setEndPoints(c1, c2);\r\n            var g1 = rhumb1.surfaceDistance;\r\n            rhumb2.setEndPoints(c2, c0);\r\n            var g2 = rhumb2.surfaceDistance;\r\n\r\n            var max = Math.max(g0, g1, g2);\r\n            var edge;\r\n            var mid;\r\n            var midHeight;\r\n            var midCartesian3;\r\n\r\n            // if the max length squared of a triangle edge is greater than granularity, subdivide the triangle\r\n            if (max > minDistance) {\r\n                if (g0 === max) {\r\n                    edge = Math.min(i0, i1) + ' ' + Math.max(i0, i1);\r\n\r\n                    i = edges[edge];\r\n                    if (!defined(i)) {\r\n                        mid = rhumb0.interpolateUsingFraction(0.5, subdivisionCartographicScratch);\r\n                        midHeight = (c0.height + c1.height) * 0.5;\r\n                        midCartesian3 = Cartesian3.fromRadians(mid.longitude, mid.latitude, midHeight, ellipsoid, subdivisionMidScratch);\r\n                        subdividedPositions.push(midCartesian3.x, midCartesian3.y, midCartesian3.z);\r\n                        i = subdividedPositions.length / 3 - 1;\r\n                        edges[edge] = i;\r\n                    }\r\n\r\n                    triangles.push(i0, i, i2);\r\n                    triangles.push(i, i1, i2);\r\n                } else if (g1 === max) {\r\n                    edge = Math.min(i1, i2) + ' ' + Math.max(i1, i2);\r\n\r\n                    i = edges[edge];\r\n                    if (!defined(i)) {\r\n                        mid = rhumb1.interpolateUsingFraction(0.5, subdivisionCartographicScratch);\r\n                        midHeight = (c1.height + c2.height) * 0.5;\r\n                        midCartesian3 = Cartesian3.fromRadians(mid.longitude, mid.latitude, midHeight, ellipsoid, subdivisionMidScratch);\r\n                        subdividedPositions.push(midCartesian3.x, midCartesian3.y, midCartesian3.z);\r\n                        i = subdividedPositions.length / 3 - 1;\r\n                        edges[edge] = i;\r\n                    }\r\n\r\n                    triangles.push(i1, i, i0);\r\n                    triangles.push(i, i2, i0);\r\n                } else if (g2 === max) {\r\n                    edge = Math.min(i2, i0) + ' ' + Math.max(i2, i0);\r\n\r\n                    i = edges[edge];\r\n                    if (!defined(i)) {\r\n                        mid = rhumb2.interpolateUsingFraction(0.5, subdivisionCartographicScratch);\r\n                        midHeight = (c2.height + c0.height) * 0.5;\r\n                        midCartesian3 = Cartesian3.fromRadians(mid.longitude, mid.latitude, midHeight, ellipsoid, subdivisionMidScratch);\r\n                        subdividedPositions.push(midCartesian3.x, midCartesian3.y, midCartesian3.z);\r\n                        i = subdividedPositions.length / 3 - 1;\r\n                        edges[edge] = i;\r\n                    }\r\n\r\n                    triangles.push(i2, i, i1);\r\n                    triangles.push(i, i0, i1);\r\n                }\r\n            } else {\r\n                subdividedIndices.push(i0);\r\n                subdividedIndices.push(i1);\r\n                subdividedIndices.push(i2);\r\n            }\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : {\r\n                position : new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.DOUBLE,\r\n                    componentsPerAttribute : 3,\r\n                    values : subdividedPositions\r\n                })\r\n            },\r\n            indices : subdividedIndices,\r\n            primitiveType : PrimitiveType.TRIANGLES\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Scales each position of a geometry's position attribute to a height, in place.\r\n     *\r\n     * @param {Number[]} positions The array of numbers representing the positions to be scaled\r\n     * @param {Number} [height=0.0] The desired height to add to the positions\r\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\r\n     * @param {Boolean} [scaleToSurface=true] <code>true</code> if the positions need to be scaled to the surface before the height is added.\r\n     * @returns {Number[]} The input array of positions, scaled to height\r\n     */\r\n    PolygonPipeline.scaleToGeodeticHeight = function(positions, height, ellipsoid, scaleToSurface) {\r\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n\r\n        var n = scaleToGeodeticHeightN;\r\n        var p = scaleToGeodeticHeightP;\r\n\r\n        height = defaultValue(height, 0.0);\r\n        scaleToSurface = defaultValue(scaleToSurface, true);\r\n\r\n        if (defined(positions)) {\r\n            var length = positions.length;\r\n\r\n            for ( var i = 0; i < length; i += 3) {\r\n                Cartesian3.fromArray(positions, i, p);\r\n\r\n                if (scaleToSurface) {\r\n                    p = ellipsoid.scaleToGeodeticSurface(p, p);\r\n                }\r\n\r\n                if (height !== 0) {\r\n                    n = ellipsoid.geodeticSurfaceNormal(p, n);\r\n\r\n                    Cartesian3.multiplyByScalar(n, height, n);\r\n                    Cartesian3.add(p, n, p);\r\n                }\r\n\r\n                positions[i] = p.x;\r\n                positions[i + 1] = p.y;\r\n                positions[i + 2] = p.z;\r\n            }\r\n        }\r\n\r\n        return positions;\r\n    };\r\nexport default PolygonPipeline;\r\n"],"names":["earcut","data","holeIndices","dim","minX","minY","maxX","maxY","x","y","invSize","hasHoles","length","outerLen","outerNode","linkedList","triangles","next","prev","i","len","start","end","list","queue","steiner","push","getLeftmost","sort","compareX","eliminateHole","filterPoints","eliminateHoles","Math","max","earcutLinked","clockwise","last","signedArea","insertNode","equals","removeNode","again","p","area","ear","pass","z","zOrder","prevZ","nextZ","q","e","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","stop","isEarHashed","isEar","cureLocalIntersections","splitEarcut","a","b","c","pointInTriangle","minTX","minTY","maxTX","maxTY","minZ","maxZ","n","intersects","locallyInside","isValidDiagonal","splitPolygon","hole","m","hx","hy","qx","Infinity","tan","mx","my","tanMin","abs","sectorContainsSector","findHoleBridge","leftmost","ax","ay","bx","by","cx","cy","px","py","intersectsPolygon","inside","middleInside","r","p1","p2","q1","q2","o1","sign","o2","o3","o4","onSegment","min","num","a2","Node","b2","an","bp","this","sum","j","deviation","polygonArea","trianglesArea","flatten","result","vertices","holes","dimensions","holeIndex","d","WindingOrder","CLOCKWISE","WebGLConstants","CW","COUNTER_CLOCKWISE","CCW","validate","windingOrder","Object","freeze","scaleToGeodeticHeightN","Cartesian3","scaleToGeodeticHeightP","PolygonPipeline","computeArea2D","positions","Check","defined","typeOf","number","greaterThanOrEquals","i0","i1","v0","v1","computeWindingOrder2D","triangulate","Cartesian2","packArray","subdivisionV0Scratch","subdivisionV1Scratch","subdivisionV2Scratch","subdivisionS0Scratch","subdivisionS1Scratch","subdivisionS2Scratch","subdivisionMidScratch","computeSubdivision","ellipsoid","indices","granularity","defaultValue","CesiumMath","RADIANS_PER_DEGREE","object","greaterThan","slice","subdividedPositions","Array","item","subdividedIndices","edges","radius","maximumRadius","minDistance","chordLength","minDistanceSqrd","edge","mid","i2","pop","fromArray","v2","s0","multiplyByScalar","normalize","s1","s2","g0","magnitudeSquared","subtract","g1","g2","add","Geometry","attributes","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","primitiveType","PrimitiveType","TRIANGLES","subdivisionC0Scratch","Cartographic","subdivisionC1Scratch","subdivisionC2Scratch","subdivisionCartographicScratch","computeRhumbLineSubdivision","rhumb0","EllipsoidRhumbLine","undefined","rhumb1","rhumb2","c0","cartesianToCartographic","c1","c2","setEndPoints","surfaceDistance","midHeight","midCartesian3","interpolateUsingFraction","height","fromRadians","longitude","latitude","scaleToGeodeticHeight","scaleToSurface","Ellipsoid","WGS84","scaleToGeodeticSurface","geodeticSurfaceNormal"],"mappings":"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"}