define(["./when-7ef6387a","./Check-ed6a1804","./Math-85667bf9","./Ellipsoid-1cbb4ac9","./Transforms-c20c38d0","./RuntimeError-5b606d78","./Cartesian2-73569d25","./WebGLConstants-30fc6f5c","./ComponentDatatype-a863af81","./GeometryAttribute-6b3c7112","./GeometryAttributes-cb18da36","./IndexDatatype-f12d39b5","./IntersectionTests-faaebeeb","./Plane-6ff6c057","./ArcType-2ee8dfbb","./EllipsoidRhumbLine-01425f3c","./EllipsoidGeodesic-2bb1f4ee","./PolylinePipeline-2458e977","./Color-5decb6de"],(function(e,o,r,t,a,i,l,n,s,d,p,f,c,y,u,h,C,g,T){"use strict";function v(e,o,r,t,a,i,l){var n,s=g.PolylinePipeline.numberOfPoints(e,o,a),d=r.red,p=r.green,f=r.blue,c=r.alpha,y=t.red,u=t.green,h=t.blue,C=t.alpha;if(T.Color.equals(r,t)){for(n=0;n<s;n++)i[l++]=T.Color.floatToByte(d),i[l++]=T.Color.floatToByte(p),i[l++]=T.Color.floatToByte(f),i[l++]=T.Color.floatToByte(c);return l}var v=(y-d)/s,m=(u-p)/s,b=(h-f)/s,E=(C-c)/s,P=l;for(n=0;n<s;n++)i[P++]=T.Color.floatToByte(d+n*v),i[P++]=T.Color.floatToByte(p+n*m),i[P++]=T.Color.floatToByte(f+n*b),i[P++]=T.Color.floatToByte(c+n*E);return P}function m(a){var i=(a=e.defaultValue(a,e.defaultValue.EMPTY_OBJECT)).positions,l=a.colors,n=e.defaultValue(a.colorsPerVertex,!1);if(!e.defined(i)||i.length<2)throw new o.DeveloperError("At least two positions are required.");if(e.defined(l)&&(n&&l.length<i.length||!n&&l.length<i.length-1))throw new o.DeveloperError("colors has an invalid length.");this._positions=i,this._colors=l,this._colorsPerVertex=n,this._arcType=e.defaultValue(a.arcType,u.ArcType.GEODESIC),this._granularity=e.defaultValue(a.granularity,r.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=e.defaultValue(a.ellipsoid,t.Ellipsoid.WGS84),this._workerName="createSimplePolylineGeometry";var s=1+i.length*t.Cartesian3.packedLength;s+=e.defined(l)?1+l.length*T.Color.packedLength:1,this.packedLength=s+t.Ellipsoid.packedLength+3}m.pack=function(r,a,i){if(!e.defined(r))throw new o.DeveloperError("value is required");if(!e.defined(a))throw new o.DeveloperError("array is required");var l;i=e.defaultValue(i,0);var n=r._positions,s=n.length;for(a[i++]=s,l=0;l<s;++l,i+=t.Cartesian3.packedLength)t.Cartesian3.pack(n[l],a,i);var d=r._colors;for(s=e.defined(d)?d.length:0,a[i++]=s,l=0;l<s;++l,i+=T.Color.packedLength)T.Color.pack(d[l],a,i);return t.Ellipsoid.pack(r._ellipsoid,a,i),i+=t.Ellipsoid.packedLength,a[i++]=r._colorsPerVertex?1:0,a[i++]=r._arcType,a[i]=r._granularity,a},m.unpack=function(r,a,i){if(!e.defined(r))throw new o.DeveloperError("array is required");var l;a=e.defaultValue(a,0);var n=r[a++],s=new Array(n);for(l=0;l<n;++l,a+=t.Cartesian3.packedLength)s[l]=t.Cartesian3.unpack(r,a);var d=(n=r[a++])>0?new Array(n):void 0;for(l=0;l<n;++l,a+=T.Color.packedLength)d[l]=T.Color.unpack(r,a);var p=t.Ellipsoid.unpack(r,a);a+=t.Ellipsoid.packedLength;var f=1===r[a++],c=r[a++],y=r[a];return e.defined(i)?(i._positions=s,i._colors=d,i._ellipsoid=p,i._colorsPerVertex=f,i._arcType=c,i._granularity=y,i):new m({positions:s,colors:d,ellipsoid:p,colorsPerVertex:f,arcType:c,granularity:y})};var b=new Array(2),E=new Array(2),P={positions:b,height:E,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return m.createGeometry=function(o){var i,l,n,c,y,h=o._positions,C=o._colors,m=o._colorsPerVertex,_=o._arcType,A=o._granularity,B=o._ellipsoid,w=r.CesiumMath.chordLength(A,B.maximumRadius),k=e.defined(C)&&!m,D=h.length,G=0;if(_===u.ArcType.GEODESIC||_===u.ArcType.RHUMB){var L,V,x;_===u.ArcType.GEODESIC?(L=r.CesiumMath.chordLength(A,B.maximumRadius),V=g.PolylinePipeline.numberOfPoints,x=g.PolylinePipeline.generateArc):(L=A,V=g.PolylinePipeline.numberOfPointsRhumbLine,x=g.PolylinePipeline.generateRhumbArc);var S=g.PolylinePipeline.extractHeights(h,B),I=P;if(_===u.ArcType.GEODESIC?I.minDistance=w:I.granularity=A,I.ellipsoid=B,k){var R=0;for(i=0;i<D-1;i++)R+=V(h[i],h[i+1],L)+1;l=new Float64Array(3*R),c=new Uint8Array(4*R),I.positions=b,I.height=E;var O=0;for(i=0;i<D-1;++i){b[0]=h[i],b[1]=h[i+1],E[0]=S[i],E[1]=S[i+1];var M=x(I);if(e.defined(C)){var U=M.length/3;y=C[i];for(var q=0;q<U;++q)c[O++]=T.Color.floatToByte(y.red),c[O++]=T.Color.floatToByte(y.green),c[O++]=T.Color.floatToByte(y.blue),c[O++]=T.Color.floatToByte(y.alpha)}l.set(M,G),G+=M.length}}else if(I.positions=h,I.height=S,l=new Float64Array(x(I)),e.defined(C)){for(c=new Uint8Array(l.length/3*4),i=0;i<D-1;++i){G=v(h[i],h[i+1],C[i],C[i+1],w,c,G)}var N=C[D-1];c[G++]=T.Color.floatToByte(N.red),c[G++]=T.Color.floatToByte(N.green),c[G++]=T.Color.floatToByte(N.blue),c[G++]=T.Color.floatToByte(N.alpha)}}else{n=k?2*D-2:D,l=new Float64Array(3*n),c=e.defined(C)?new Uint8Array(4*n):void 0;var F=0,H=0;for(i=0;i<D;++i){var W=h[i];if(k&&i>0&&(t.Cartesian3.pack(W,l,F),F+=3,y=C[i-1],c[H++]=T.Color.floatToByte(y.red),c[H++]=T.Color.floatToByte(y.green),c[H++]=T.Color.floatToByte(y.blue),c[H++]=T.Color.floatToByte(y.alpha)),k&&i===D-1)break;t.Cartesian3.pack(W,l,F),F+=3,e.defined(C)&&(y=C[i],c[H++]=T.Color.floatToByte(y.red),c[H++]=T.Color.floatToByte(y.green),c[H++]=T.Color.floatToByte(y.blue),c[H++]=T.Color.floatToByte(y.alpha))}}var Y=new p.GeometryAttributes;Y.position=new d.GeometryAttribute({componentDatatype:s.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:l}),e.defined(C)&&(Y.color=new d.GeometryAttribute({componentDatatype:s.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:c,normalize:!0}));var z=2*((n=l.length/3)-1),J=f.IndexDatatype.createTypedArray(n,z),j=0;for(i=0;i<n-1;++i)J[j++]=i,J[j++]=i+1;return new d.Geometry({attributes:Y,indices:J,primitiveType:d.PrimitiveType.LINES,boundingSphere:a.BoundingSphere.fromPoints(h)})},function(o,r){return e.defined(r)&&(o=m.unpack(o,r)),o._ellipsoid=t.Ellipsoid.clone(o._ellipsoid),m.createGeometry(o)}}));
//# sourceMappingURL=createSimplePolylineGeometry.js.map
