{"version":3,"file":"createPlaneGeometry.js","sources":["../../../../Source/Core/PlaneGeometry.js","../../../../Source/WorkersES6/createPlaneGeometry.js"],"sourcesContent":["import BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport VertexFormat from './VertexFormat.js';\r\n\r\n    /**\r\n     * Describes geometry representing a plane centered at the origin, with a unit width and length.\r\n     *\r\n     * @alias PlaneGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     *\r\n     * @example\r\n     * var planeGeometry = new Cesium.PlaneGeometry({\r\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\r\n     * });\r\n     */\r\n    function PlaneGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n\r\n        this._vertexFormat = vertexFormat;\r\n        this._workerName = 'createPlaneGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    PlaneGeometry.packedLength = VertexFormat.packedLength;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {PlaneGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    PlaneGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchVertexFormat = new VertexFormat();\r\n    var scratchOptions = {\r\n        vertexFormat: scratchVertexFormat\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {PlaneGeometry} [result] The object into which to store the result.\r\n     * @returns {PlaneGeometry} The modified result parameter or a new PlaneGeometry instance if one was not provided.\r\n     */\r\n    PlaneGeometry.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n\r\n        if (!defined(result)) {\r\n            return new PlaneGeometry(scratchOptions);\r\n        }\r\n\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n\r\n        return result;\r\n    };\r\n\r\n    var min = new Cartesian3(-0.5, -0.5, 0.0);\r\n    var max = new Cartesian3( 0.5,  0.5, 0.0);\r\n\r\n    /**\r\n     * Computes the geometric representation of a plane, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {PlaneGeometry} planeGeometry A description of the plane.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    PlaneGeometry.createGeometry = function(planeGeometry) {\r\n        var vertexFormat = planeGeometry._vertexFormat;\r\n\r\n        var attributes = new GeometryAttributes();\r\n        var indices;\r\n        var positions;\r\n\r\n        if (vertexFormat.position) {\r\n            // 4 corner points.  Duplicated 3 times each for each incident edge/face.\r\n            positions = new Float64Array(4 * 3);\r\n\r\n            // +z face\r\n            positions[0]  = min.x;\r\n            positions[1]  = min.y;\r\n            positions[2]  = 0.0;\r\n            positions[3]  = max.x;\r\n            positions[4]  = min.y;\r\n            positions[5]  = 0.0;\r\n            positions[6]  = max.x;\r\n            positions[7]  = max.y;\r\n            positions[8]  = 0.0;\r\n            positions[9]  = min.x;\r\n            positions[10] = max.y;\r\n            positions[11] = 0.0;\r\n\r\n            attributes.position = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : positions\r\n            });\r\n\r\n            if (vertexFormat.normal) {\r\n                var normals = new Float32Array(4 * 3);\r\n\r\n                // +z face\r\n                normals[0]  = 0.0;\r\n                normals[1]  = 0.0;\r\n                normals[2]  = 1.0;\r\n                normals[3]  = 0.0;\r\n                normals[4]  = 0.0;\r\n                normals[5]  = 1.0;\r\n                normals[6]  = 0.0;\r\n                normals[7]  = 0.0;\r\n                normals[8]  = 1.0;\r\n                normals[9]  = 0.0;\r\n                normals[10] = 0.0;\r\n                normals[11] = 1.0;\r\n\r\n                attributes.normal = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : normals\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.st) {\r\n                var texCoords = new Float32Array(4 * 2);\r\n\r\n                // +z face\r\n                texCoords[0]  = 0.0;\r\n                texCoords[1]  = 0.0;\r\n                texCoords[2]  = 1.0;\r\n                texCoords[3]  = 0.0;\r\n                texCoords[4]  = 1.0;\r\n                texCoords[5]  = 1.0;\r\n                texCoords[6]  = 0.0;\r\n                texCoords[7]  = 1.0;\r\n\r\n                attributes.st = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 2,\r\n                    values : texCoords\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.tangent) {\r\n                var tangents = new Float32Array(4 * 3);\r\n\r\n                // +z face\r\n                tangents[0]  = 1.0;\r\n                tangents[1]  = 0.0;\r\n                tangents[2]  = 0.0;\r\n                tangents[3]  = 1.0;\r\n                tangents[4]  = 0.0;\r\n                tangents[5]  = 0.0;\r\n                tangents[6]  = 1.0;\r\n                tangents[7]  = 0.0;\r\n                tangents[8]  = 0.0;\r\n                tangents[9]  = 1.0;\r\n                tangents[10] = 0.0;\r\n                tangents[11] = 0.0;\r\n\r\n                attributes.tangent = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : tangents\r\n                });\r\n            }\r\n\r\n            if (vertexFormat.bitangent) {\r\n                var bitangents = new Float32Array(4 * 3);\r\n\r\n                // +z face\r\n                bitangents[0] = 0.0;\r\n                bitangents[1] = 1.0;\r\n                bitangents[2] = 0.0;\r\n                bitangents[3] = 0.0;\r\n                bitangents[4] = 1.0;\r\n                bitangents[5] = 0.0;\r\n                bitangents[6] = 0.0;\r\n                bitangents[7] = 1.0;\r\n                bitangents[8] = 0.0;\r\n                bitangents[9] = 0.0;\r\n                bitangents[10] = 1.0;\r\n                bitangents[11] = 0.0;\r\n\r\n                attributes.bitangent = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.FLOAT,\r\n                    componentsPerAttribute : 3,\r\n                    values : bitangents\r\n                });\r\n            }\r\n\r\n            // 2 triangles\r\n            indices = new Uint16Array(2 * 3);\r\n\r\n            // +z face\r\n            indices[0] = 0;\r\n            indices[1] = 1;\r\n            indices[2] = 2;\r\n            indices[3] = 0;\r\n            indices[4] = 2;\r\n            indices[5] = 3;\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.TRIANGLES,\r\n            boundingSphere : new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0))\r\n        });\r\n    };\r\nexport default PlaneGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport PlaneGeometry from '../Core/PlaneGeometry.js';\r\n\r\n    function createPlaneGeometry(planeGeometry, offset) {\r\n        if (defined(offset)) {\r\n            planeGeometry = PlaneGeometry.unpack(planeGeometry, offset);\r\n        }\r\n        return PlaneGeometry.createGeometry(planeGeometry);\r\n    }\r\nexport default createPlaneGeometry;\r\n"],"names":["PlaneGeometry","options","defaultValue","EMPTY_OBJECT","vertexFormat","VertexFormat","DEFAULT","this","_vertexFormat","_workerName","packedLength","pack","value","array","startingIndex","Check","typeOf","object","defined","scratchVertexFormat","scratchOptions","unpack","result","clone","min","Cartesian3","max","createGeometry","planeGeometry","indices","positions","attributes","GeometryAttributes","position","Float64Array","x","y","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","normal","normals","Float32Array","FLOAT","st","texCoords","tangent","tangents","bitangent","bitangents","Uint16Array","Geometry","primitiveType","PrimitiveType","TRIANGLES","boundingSphere","BoundingSphere","ZERO","Math","sqrt","offset"],"mappings":"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"}