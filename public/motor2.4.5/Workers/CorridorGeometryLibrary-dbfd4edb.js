/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["exports","./when-4ca4e419","./defineProperties-163ddb68","./Cartesian3-32451e63","./Transforms-7b04d7e0","./Matrix4-33464f2b","./PolylineVolumeGeometryLibrary-06ac58f3","./PolylinePipeline-4ac94627"],(function(a,e,r,n,i,t,s,o){"use strict";var C={},l=new n.Cartesian3,y=new n.Cartesian3,u=new n.Cartesian3,c=new n.Cartesian3,d=[new n.Cartesian3,new n.Cartesian3],p=new n.Cartesian3,m=new n.Cartesian3,g=new n.Cartesian3,f=new n.Cartesian3,h=new n.Cartesian3,w=new n.Cartesian3,x=new n.Cartesian3,z=new n.Cartesian3,v=new n.Cartesian3,P=new n.Cartesian3,A=new i.Quaternion,B=new t.Matrix3;function E(a,e,o,C,u){var c,d=n.Cartesian3.angleBetween(n.Cartesian3.subtract(e,a,l),n.Cartesian3.subtract(o,a,y)),p=C===s.CornerType.BEVELED?1:Math.ceil(d/r.CesiumMath.toRadians(5))+1,m=3*p,g=new Array(m);g[m-3]=o.x,g[m-2]=o.y,g[m-1]=o.z,c=u?t.Matrix3.fromQuaternion(i.Quaternion.fromAxisAngle(n.Cartesian3.negate(a,l),d/p,A),B):t.Matrix3.fromQuaternion(i.Quaternion.fromAxisAngle(a,d/p,A),B);var f=0;e=n.Cartesian3.clone(e,l);for(var h=0;h<p;h++)e=t.Matrix3.multiplyByVector(c,e,e),g[f++]=e.x,g[f++]=e.y,g[f++]=e.z;return g}function S(a,e,r,i){var t=l;return i||(e=n.Cartesian3.negate(e,e)),[(t=n.Cartesian3.add(a,e,t)).x,t.y,t.z,r.x,r.y,r.z]}function b(a,e,r,i){for(var t=new Array(a.length),s=new Array(a.length),o=n.Cartesian3.multiplyByScalar(e,r,l),C=n.Cartesian3.negate(o,y),d=0,p=a.length-1,m=0;m<a.length;m+=3){var g=n.Cartesian3.fromArray(a,m,u),f=n.Cartesian3.add(g,C,c);t[d++]=f.x,t[d++]=f.y,t[d++]=f.z;var h=n.Cartesian3.add(g,o,c);s[p--]=h.z,s[p--]=h.y,s[p--]=h.x}return i.push(t,s),i}C.addAttribute=function(a,r,n,i){var t=r.x,s=r.y,o=r.z;e.defined(n)&&(a[n]=t,a[n+1]=s,a[n+2]=o),e.defined(i)&&(a[i]=o,a[i-1]=s,a[i-2]=t)};var D=new n.Cartesian3,M=new n.Cartesian3;C.computePositions=function(a){var e=a.granularity,i=a.positions,t=a.ellipsoid,C=a.width/2,y=a.cornerType,u=a.saveAttributes,c=p,A=m,B=g,T=f,N=h,L=w,O=x,R=z,V=v,Q=P,U=[],G=u?[]:void 0,I=u?[]:void 0,q=i[0],j=i[1];A=n.Cartesian3.normalize(n.Cartesian3.subtract(j,q,A),A),c=t.geodeticSurfaceNormal(q,c),T=n.Cartesian3.normalize(n.Cartesian3.cross(c,A,T),T),u&&(G.push(T.x,T.y,T.z),I.push(c.x,c.y,c.z)),O=n.Cartesian3.clone(q,O),q=j,B=n.Cartesian3.negate(A,B);var k,F,H=[],J=i.length;for(k=1;k<J-1;k++){c=t.geodeticSurfaceNormal(q,c),j=i[k+1],A=n.Cartesian3.normalize(n.Cartesian3.subtract(j,q,A),A),N=n.Cartesian3.normalize(n.Cartesian3.add(A,B,N),N);var K=n.Cartesian3.multiplyByScalar(c,n.Cartesian3.dot(A,c),D);n.Cartesian3.subtract(A,K,K),n.Cartesian3.normalize(K,K);var W=n.Cartesian3.multiplyByScalar(c,n.Cartesian3.dot(B,c),M);if(n.Cartesian3.subtract(B,W,W),n.Cartesian3.normalize(W,W),!r.CesiumMath.equalsEpsilon(Math.abs(n.Cartesian3.dot(K,W)),1,r.CesiumMath.EPSILON7)){N=n.Cartesian3.cross(N,c,N),N=n.Cartesian3.cross(c,N,N),N=n.Cartesian3.normalize(N,N);var X=C/Math.max(.25,n.Cartesian3.magnitude(n.Cartesian3.cross(N,B,l))),Y=s.PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(A,B,q,t);N=n.Cartesian3.multiplyByScalar(N,X,N),Y?(R=n.Cartesian3.add(q,N,R),Q=n.Cartesian3.add(R,n.Cartesian3.multiplyByScalar(T,C,Q),Q),V=n.Cartesian3.add(R,n.Cartesian3.multiplyByScalar(T,2*C,V),V),d[0]=n.Cartesian3.clone(O,d[0]),d[1]=n.Cartesian3.clone(Q,d[1]),U=b(o.PolylinePipeline.generateArc({positions:d,granularity:e,ellipsoid:t}),T,C,U),u&&(G.push(T.x,T.y,T.z),I.push(c.x,c.y,c.z)),L=n.Cartesian3.clone(V,L),T=n.Cartesian3.normalize(n.Cartesian3.cross(c,A,T),T),V=n.Cartesian3.add(R,n.Cartesian3.multiplyByScalar(T,2*C,V),V),O=n.Cartesian3.add(R,n.Cartesian3.multiplyByScalar(T,C,O),O),y===s.CornerType.ROUNDED||y===s.CornerType.BEVELED?H.push({leftPositions:E(R,L,V,y,Y)}):H.push({leftPositions:S(q,n.Cartesian3.negate(N,N),V,Y)})):(V=n.Cartesian3.add(q,N,V),Q=n.Cartesian3.add(V,n.Cartesian3.negate(n.Cartesian3.multiplyByScalar(T,C,Q),Q),Q),R=n.Cartesian3.add(V,n.Cartesian3.negate(n.Cartesian3.multiplyByScalar(T,2*C,R),R),R),d[0]=n.Cartesian3.clone(O,d[0]),d[1]=n.Cartesian3.clone(Q,d[1]),U=b(o.PolylinePipeline.generateArc({positions:d,granularity:e,ellipsoid:t}),T,C,U),u&&(G.push(T.x,T.y,T.z),I.push(c.x,c.y,c.z)),L=n.Cartesian3.clone(R,L),T=n.Cartesian3.normalize(n.Cartesian3.cross(c,A,T),T),R=n.Cartesian3.add(V,n.Cartesian3.negate(n.Cartesian3.multiplyByScalar(T,2*C,R),R),R),O=n.Cartesian3.add(V,n.Cartesian3.negate(n.Cartesian3.multiplyByScalar(T,C,O),O),O),y===s.CornerType.ROUNDED||y===s.CornerType.BEVELED?H.push({rightPositions:E(V,L,R,y,Y)}):H.push({rightPositions:S(q,N,R,Y)})),B=n.Cartesian3.negate(A,B)}q=j}return c=t.geodeticSurfaceNormal(q,c),d[0]=n.Cartesian3.clone(O,d[0]),d[1]=n.Cartesian3.clone(q,d[1]),U=b(o.PolylinePipeline.generateArc({positions:d,granularity:e,ellipsoid:t}),T,C,U),u&&(G.push(T.x,T.y,T.z),I.push(c.x,c.y,c.z)),y===s.CornerType.ROUNDED&&(F=function(a){var e=p,r=m,i=g,t=a[1];r=n.Cartesian3.fromArray(a[1],t.length-3,r),i=n.Cartesian3.fromArray(a[0],0,i);var o=E(e=n.Cartesian3.midpoint(r,i,e),r,i,s.CornerType.ROUNDED,!1),C=a.length-1,l=a[C-1];return t=a[C],r=n.Cartesian3.fromArray(l,l.length-3,r),i=n.Cartesian3.fromArray(t,0,i),[o,E(e=n.Cartesian3.midpoint(r,i,e),r,i,s.CornerType.ROUNDED,!1)]}(U)),{positions:U,corners:H,lefts:G,normals:I,endPositions:F}},a.CorridorGeometryLibrary=C}));
