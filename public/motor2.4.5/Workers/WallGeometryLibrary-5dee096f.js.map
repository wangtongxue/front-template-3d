{"version":3,"file":"WallGeometryLibrary-5dee096f.js","sources":["../../../../Source/Core/WallGeometryLibrary.js"],"sourcesContent":["import Cartographic from './Cartographic.js';\r\nimport defined from './defined.js';\r\nimport EllipsoidTangentPlane from './EllipsoidTangentPlane.js';\r\nimport CesiumMath from './Math.js';\r\nimport PolygonPipeline from './PolygonPipeline.js';\r\nimport PolylinePipeline from './PolylinePipeline.js';\r\nimport WindingOrder from './WindingOrder.js';\r\n\r\n    /**\r\n     * private\r\n     */\r\n    var WallGeometryLibrary = {};\r\n\r\n    function latLonEquals(c0, c1) {\r\n        return ((CesiumMath.equalsEpsilon(c0.latitude, c1.latitude, CesiumMath.EPSILON14)) && (CesiumMath.equalsEpsilon(c0.longitude, c1.longitude, CesiumMath.EPSILON14)));\r\n    }\r\n\r\n    var scratchCartographic1 = new Cartographic();\r\n    var scratchCartographic2 = new Cartographic();\r\n    function removeDuplicates(ellipsoid, positions, topHeights, bottomHeights) {\r\n        var length = positions.length;\r\n        if (length < 2) {\r\n            return;\r\n        }\r\n\r\n        var hasBottomHeights = defined(bottomHeights);\r\n        var hasTopHeights = defined(topHeights);\r\n        var hasAllZeroHeights = true;\r\n\r\n        var cleanedPositions = new Array(length);\r\n        var cleanedTopHeights = new Array(length);\r\n        var cleanedBottomHeights = new Array(length);\r\n\r\n        var v0 = positions[0];\r\n        cleanedPositions[0] = v0;\r\n\r\n        var c0 = ellipsoid.cartesianToCartographic(v0, scratchCartographic1);\r\n        if (hasTopHeights) {\r\n            c0.height = topHeights[0];\r\n        }\r\n\r\n        hasAllZeroHeights = hasAllZeroHeights && c0.height <= 0;\r\n\r\n        cleanedTopHeights[0] = c0.height;\r\n\r\n        if (hasBottomHeights) {\r\n            cleanedBottomHeights[0] = bottomHeights[0];\r\n        } else {\r\n            cleanedBottomHeights[0] = 0.0;\r\n        }\r\n\r\n        var index = 1;\r\n        for (var i = 1; i < length; ++i) {\r\n            var v1 = positions[i];\r\n            var c1 = ellipsoid.cartesianToCartographic(v1, scratchCartographic2);\r\n            if (hasTopHeights) {\r\n                c1.height = topHeights[i];\r\n            }\r\n            hasAllZeroHeights = hasAllZeroHeights && c1.height <= 0;\r\n\r\n            if (!latLonEquals(c0, c1)) {\r\n                cleanedPositions[index] = v1; // Shallow copy!\r\n                cleanedTopHeights[index] = c1.height;\r\n\r\n                if (hasBottomHeights) {\r\n                    cleanedBottomHeights[index] = bottomHeights[i];\r\n                } else {\r\n                    cleanedBottomHeights[index] = 0.0;\r\n                }\r\n\r\n                Cartographic.clone(c1, c0);\r\n                ++index;\r\n            } else if (c0.height < c1.height) {\r\n                cleanedTopHeights[index - 1] = c1.height;\r\n            }\r\n        }\r\n\r\n        if (hasAllZeroHeights || index < 2) {\r\n            return;\r\n        }\r\n\r\n        cleanedPositions.length = index;\r\n        cleanedTopHeights.length = index;\r\n        cleanedBottomHeights.length = index;\r\n\r\n        return {\r\n            positions: cleanedPositions,\r\n            topHeights: cleanedTopHeights,\r\n            bottomHeights: cleanedBottomHeights\r\n        };\r\n    }\r\n\r\n    var positionsArrayScratch = new Array(2);\r\n    var heightsArrayScratch = new Array(2);\r\n    var generateArcOptionsScratch = {\r\n        positions : undefined,\r\n        height : undefined,\r\n        granularity : undefined,\r\n        ellipsoid : undefined\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    WallGeometryLibrary.computePositions = function(ellipsoid, wallPositions, maximumHeights, minimumHeights, granularity, duplicateCorners) {\r\n        var o = removeDuplicates(ellipsoid, wallPositions, maximumHeights, minimumHeights);\r\n\r\n        if (!defined(o)) {\r\n            return;\r\n        }\r\n\r\n        wallPositions = o.positions;\r\n        maximumHeights = o.topHeights;\r\n        minimumHeights = o.bottomHeights;\r\n\r\n        if (wallPositions.length >= 3) {\r\n            // Order positions counter-clockwise\r\n            var tangentPlane = EllipsoidTangentPlane.fromPoints(wallPositions, ellipsoid);\r\n            var positions2D = tangentPlane.projectPointsOntoPlane(wallPositions);\r\n\r\n            if (PolygonPipeline.computeWindingOrder2D(positions2D) === WindingOrder.CLOCKWISE) {\r\n                wallPositions.reverse();\r\n                maximumHeights.reverse();\r\n                minimumHeights.reverse();\r\n            }\r\n        }\r\n\r\n        var length = wallPositions.length;\r\n        var numCorners = length - 2;\r\n        var topPositions;\r\n        var bottomPositions;\r\n\r\n        var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n\r\n        var generateArcOptions = generateArcOptionsScratch;\r\n        generateArcOptions.minDistance = minDistance;\r\n        generateArcOptions.ellipsoid = ellipsoid;\r\n\r\n        if (duplicateCorners) {\r\n            var count = 0;\r\n            var i;\r\n\r\n            for (i = 0; i < length - 1; i++) {\r\n                count += PolylinePipeline.numberOfPoints(wallPositions[i], wallPositions[i+1], minDistance) + 1;\r\n            }\r\n\r\n            topPositions = new Float64Array(count * 3);\r\n            bottomPositions = new Float64Array(count * 3);\r\n\r\n            var generateArcPositions = positionsArrayScratch;\r\n            var generateArcHeights = heightsArrayScratch;\r\n            generateArcOptions.positions = generateArcPositions;\r\n            generateArcOptions.height = generateArcHeights;\r\n\r\n            var offset = 0;\r\n            for (i = 0; i < length - 1; i++) {\r\n                generateArcPositions[0] = wallPositions[i];\r\n                generateArcPositions[1] = wallPositions[i + 1];\r\n\r\n                generateArcHeights[0] = maximumHeights[i];\r\n                generateArcHeights[1] = maximumHeights[i + 1];\r\n\r\n                var pos = PolylinePipeline.generateArc(generateArcOptions);\r\n                topPositions.set(pos, offset);\r\n\r\n                generateArcHeights[0] = minimumHeights[i];\r\n                generateArcHeights[1] = minimumHeights[i + 1];\r\n\r\n                bottomPositions.set(PolylinePipeline.generateArc(generateArcOptions), offset);\r\n\r\n                offset += pos.length;\r\n            }\r\n        } else {\r\n            generateArcOptions.positions = wallPositions;\r\n            generateArcOptions.height = maximumHeights;\r\n            topPositions = new Float64Array(PolylinePipeline.generateArc(generateArcOptions));\r\n\r\n            generateArcOptions.height = minimumHeights;\r\n            bottomPositions = new Float64Array(PolylinePipeline.generateArc(generateArcOptions));\r\n        }\r\n\r\n        return {\r\n            bottomPositions: bottomPositions,\r\n            topPositions: topPositions,\r\n            numCorners: numCorners\r\n        };\r\n    };\r\nexport default WallGeometryLibrary;\r\n"],"names":["WallGeometryLibrary","latLonEquals","c0","c1","CesiumMath","equalsEpsilon","latitude","EPSILON14","longitude","scratchCartographic1","Cartographic","scratchCartographic2","positionsArrayScratch","Array","heightsArrayScratch","generateArcOptionsScratch","positions","undefined","height","granularity","ellipsoid","computePositions","wallPositions","maximumHeights","minimumHeights","duplicateCorners","o","topHeights","bottomHeights","length","hasBottomHeights","defined","hasTopHeights","hasAllZeroHeights","cleanedPositions","cleanedTopHeights","cleanedBottomHeights","v0","cartesianToCartographic","index","i","v1","clone","removeDuplicates","positions2D","EllipsoidTangentPlane","fromPoints","projectPointsOntoPlane","PolygonPipeline","computeWindingOrder2D","WindingOrder","CLOCKWISE","reverse","topPositions","bottomPositions","numCorners","minDistance","chordLength","maximumRadius","generateArcOptions","count","PolylinePipeline","numberOfPoints","Float64Array","generateArcPositions","generateArcHeights","offset","pos","generateArc","set"],"mappings":"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"}