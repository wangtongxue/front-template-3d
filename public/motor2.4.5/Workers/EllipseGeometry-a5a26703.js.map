{"version":3,"file":"EllipseGeometry-a5a26703.js","sources":["../../../../Source/Core/EllipseGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian2 from './Cartesian2.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Cartographic from './Cartographic.js';\r\nimport Check from './Check.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport EllipseGeometryLibrary from './EllipseGeometryLibrary.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport GeographicProjection from './GeographicProjection.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryInstance from './GeometryInstance.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport GeometryPipeline from './GeometryPipeline.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport Matrix3 from './Matrix3.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\nimport Quaternion from './Quaternion.js';\r\nimport Rectangle from './Rectangle.js';\r\nimport VertexFormat from './VertexFormat.js';\r\n\r\n    var scratchCartesian1 = new Cartesian3();\r\n    var scratchCartesian2 = new Cartesian3();\r\n    var scratchCartesian3 = new Cartesian3();\r\n    var scratchCartesian4 = new Cartesian3();\r\n    var texCoordScratch = new Cartesian2();\r\n    var textureMatrixScratch = new Matrix3();\r\n    var tangentMatrixScratch = new Matrix3();\r\n    var quaternionScratch = new Quaternion();\r\n\r\n    var scratchNormal = new Cartesian3();\r\n    var scratchTangent = new Cartesian3();\r\n    var scratchBitangent = new Cartesian3();\r\n\r\n    var scratchCartographic = new Cartographic();\r\n    var projectedCenterScratch = new Cartesian3();\r\n\r\n    var scratchMinTexCoord = new Cartesian2();\r\n    var scratchMaxTexCoord = new Cartesian2();\r\n\r\n    function computeTopBottomAttributes(positions, options, extrude) {\r\n        var vertexFormat = options.vertexFormat;\r\n        var center = options.center;\r\n        var semiMajorAxis = options.semiMajorAxis;\r\n        var semiMinorAxis = options.semiMinorAxis;\r\n        var ellipsoid = options.ellipsoid;\r\n        var stRotation = options.stRotation;\r\n        var size = (extrude) ? positions.length / 3 * 2 : positions.length / 3;\r\n        var shadowVolume = options.shadowVolume;\r\n\r\n        var textureCoordinates = (vertexFormat.st) ? new Float32Array(size * 2) : undefined;\r\n        var normals = (vertexFormat.normal) ? new Float32Array(size * 3) : undefined;\r\n        var tangents = (vertexFormat.tangent) ? new Float32Array(size * 3) : undefined;\r\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(size * 3) : undefined;\r\n\r\n        var extrudeNormals = (shadowVolume) ? new Float32Array(size * 3) : undefined;\r\n\r\n        var textureCoordIndex = 0;\r\n\r\n        // Raise positions to a height above the ellipsoid and compute the\r\n        // texture coordinates, normals, tangents, and bitangents.\r\n        var normal = scratchNormal;\r\n        var tangent = scratchTangent;\r\n        var bitangent = scratchBitangent;\r\n\r\n        var projection = new GeographicProjection(ellipsoid);\r\n        var projectedCenter = projection.project(ellipsoid.cartesianToCartographic(center, scratchCartographic), projectedCenterScratch);\r\n\r\n        var geodeticNormal = ellipsoid.scaleToGeodeticSurface(center, scratchCartesian1);\r\n        ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);\r\n\r\n        var textureMatrix = textureMatrixScratch;\r\n        var tangentMatrix = tangentMatrixScratch;\r\n        if (stRotation !== 0) {\r\n            var rotation = Quaternion.fromAxisAngle(geodeticNormal, stRotation, quaternionScratch);\r\n            textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\r\n\r\n            rotation = Quaternion.fromAxisAngle(geodeticNormal, -stRotation, quaternionScratch);\r\n            tangentMatrix = Matrix3.fromQuaternion(rotation, tangentMatrix);\r\n        } else {\r\n            textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\r\n            tangentMatrix = Matrix3.clone(Matrix3.IDENTITY, tangentMatrix);\r\n        }\r\n\r\n        var minTexCoord = Cartesian2.fromElements(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, scratchMinTexCoord);\r\n        var maxTexCoord = Cartesian2.fromElements(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, scratchMaxTexCoord);\r\n\r\n        var length = positions.length;\r\n        var bottomOffset = (extrude) ? length : 0;\r\n        var stOffset = bottomOffset / 3 * 2;\r\n        for (var i = 0; i < length; i += 3) {\r\n            var i1 = i + 1;\r\n            var i2 = i + 2;\r\n            var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\r\n\r\n            if (vertexFormat.st) {\r\n                var rotatedPoint = Matrix3.multiplyByVector(textureMatrix, position, scratchCartesian2);\r\n                var projectedPoint = projection.project(ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic), scratchCartesian3);\r\n                Cartesian3.subtract(projectedPoint, projectedCenter, projectedPoint);\r\n\r\n                texCoordScratch.x = (projectedPoint.x + semiMajorAxis) / (2.0 * semiMajorAxis);\r\n                texCoordScratch.y = (projectedPoint.y + semiMinorAxis) / (2.0 * semiMinorAxis);\r\n\r\n                minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);\r\n                minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);\r\n                maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);\r\n                maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);\r\n\r\n                if (extrude) {\r\n                    textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;\r\n                    textureCoordinates[textureCoordIndex + 1 + stOffset] = texCoordScratch.y;\r\n                }\r\n\r\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.x;\r\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.y;\r\n            }\r\n\r\n            if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent || shadowVolume) {\r\n                normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n\r\n                if (shadowVolume) {\r\n                    extrudeNormals[i + bottomOffset] = -normal.x;\r\n                    extrudeNormals[i1 + bottomOffset] = -normal.y;\r\n                    extrudeNormals[i2 + bottomOffset] = -normal.z;\r\n                }\r\n\r\n                if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\r\n                    if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n                        tangent = Cartesian3.normalize(Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent), tangent);\r\n                        Matrix3.multiplyByVector(tangentMatrix, tangent, tangent);\r\n                    }\r\n                    if (vertexFormat.normal) {\r\n                        normals[i] = normal.x;\r\n                        normals[i1] = normal.y;\r\n                        normals[i2] = normal.z;\r\n                        if (extrude) {\r\n                            normals[i + bottomOffset] = -normal.x;\r\n                            normals[i1 + bottomOffset] = -normal.y;\r\n                            normals[i2 + bottomOffset] = -normal.z;\r\n                        }\r\n                    }\r\n\r\n                    if (vertexFormat.tangent) {\r\n                        tangents[i] = tangent.x;\r\n                        tangents[i1] = tangent.y;\r\n                        tangents[i2] = tangent.z;\r\n                        if (extrude) {\r\n                            tangents[i + bottomOffset] = -tangent.x;\r\n                            tangents[i1 + bottomOffset] = -tangent.y;\r\n                            tangents[i2 + bottomOffset] = -tangent.z;\r\n                        }\r\n                    }\r\n\r\n                    if (vertexFormat.bitangent) {\r\n                        bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\r\n                        bitangents[i ] = bitangent.x;\r\n                        bitangents[i1] = bitangent.y;\r\n                        bitangents[i2] = bitangent.z;\r\n                        if (extrude) {\r\n                            bitangents[i + bottomOffset] = bitangent.x;\r\n                            bitangents[i1 + bottomOffset] = bitangent.y;\r\n                            bitangents[i2 + bottomOffset] = bitangent.z;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (vertexFormat.st) {\r\n            length = textureCoordinates.length;\r\n            for (var k = 0; k < length; k += 2) {\r\n                textureCoordinates[k] = (textureCoordinates[k] - minTexCoord.x) / (maxTexCoord.x - minTexCoord.x);\r\n                textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minTexCoord.y) / (maxTexCoord.y - minTexCoord.y);\r\n            }\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n\r\n        if (vertexFormat.position) {\r\n            var finalPositions = EllipseGeometryLibrary.raisePositionsToHeight(positions, options, extrude);\r\n            attributes.position = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : finalPositions\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.st) {\r\n            attributes.st = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                values : textureCoordinates\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.normal) {\r\n            attributes.normal = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : normals\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.tangent) {\r\n            attributes.tangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : tangents\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.bitangent) {\r\n            attributes.bitangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : bitangents\r\n            });\r\n        }\r\n\r\n        if (shadowVolume) {\r\n            attributes.extrudeDirection = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : extrudeNormals\r\n            });\r\n        }\r\n\r\n        if (extrude && defined(options.offsetAttribute)) {\r\n            var offsetAttribute = new Uint8Array(size);\r\n            if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n                offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n            } else {\r\n                var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n            }\r\n\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values : offsetAttribute\r\n            });\r\n        }\r\n\r\n        return attributes;\r\n    }\r\n\r\n    function topIndices(numPts) {\r\n        // numTriangles in half = 3 + 8 + 12 + ... = -1 + 4 + (4 + 4) + (4 + 4 + 4) + ... = -1 + 4 * (1 + 2 + 3 + ...)\r\n        //              = -1 + 4 * ((n * ( n + 1)) / 2)\r\n        // total triangles = 2 * numTrangles in half\r\n        // indices = total triangles * 3;\r\n        // Substitute numPts for n above\r\n\r\n        var indices = new Array(12 * (numPts * ( numPts + 1)) - 6);\r\n        var indicesIndex = 0;\r\n        var prevIndex;\r\n        var numInterior;\r\n        var positionIndex;\r\n        var i;\r\n        var j;\r\n        // Indices triangles to the 'right' of the north vector\r\n\r\n        prevIndex = 0;\r\n        positionIndex = 1;\r\n        for (i = 0; i < 3; i++) {\r\n            indices[indicesIndex++] = positionIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n            indices[indicesIndex++] = positionIndex;\r\n        }\r\n\r\n        for (i = 2; i < numPts + 1; ++i) {\r\n            positionIndex = i * (i + 1) - 1;\r\n            prevIndex = (i - 1) * i - 1;\r\n\r\n            indices[indicesIndex++] = positionIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n            indices[indicesIndex++] = positionIndex;\r\n\r\n            numInterior = 2 * i;\r\n            for (j = 0; j < numInterior - 1; ++j) {\r\n\r\n                indices[indicesIndex++] = positionIndex;\r\n                indices[indicesIndex++] = prevIndex++;\r\n                indices[indicesIndex++] = prevIndex;\r\n\r\n                indices[indicesIndex++] = positionIndex++;\r\n                indices[indicesIndex++] = prevIndex;\r\n                indices[indicesIndex++] = positionIndex;\r\n            }\r\n\r\n            indices[indicesIndex++] = positionIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n            indices[indicesIndex++] = positionIndex;\r\n        }\r\n\r\n        // Indices for center column of triangles\r\n        numInterior = numPts * 2;\r\n        ++positionIndex;\r\n        ++prevIndex;\r\n        for (i = 0; i < numInterior - 1; ++i) {\r\n            indices[indicesIndex++] = positionIndex;\r\n            indices[indicesIndex++] = prevIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n\r\n            indices[indicesIndex++] = positionIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n            indices[indicesIndex++] = positionIndex;\r\n        }\r\n\r\n        indices[indicesIndex++] = positionIndex;\r\n        indices[indicesIndex++] = prevIndex++;\r\n        indices[indicesIndex++] = prevIndex;\r\n\r\n        indices[indicesIndex++] = positionIndex++;\r\n        indices[indicesIndex++] = prevIndex++;\r\n        indices[indicesIndex++] = prevIndex;\r\n\r\n        // Reverse the process creating indices to the 'left' of the north vector\r\n        ++prevIndex;\r\n        for (i = numPts - 1; i > 1; --i) {\r\n            indices[indicesIndex++] = prevIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n            indices[indicesIndex++] = positionIndex;\r\n\r\n            numInterior = 2 * i;\r\n            for (j = 0; j < numInterior - 1; ++j) {\r\n                indices[indicesIndex++] = positionIndex;\r\n                indices[indicesIndex++] = prevIndex++;\r\n                indices[indicesIndex++] = prevIndex;\r\n\r\n                indices[indicesIndex++] = positionIndex++;\r\n                indices[indicesIndex++] = prevIndex;\r\n                indices[indicesIndex++] = positionIndex;\r\n            }\r\n\r\n            indices[indicesIndex++] = prevIndex++;\r\n            indices[indicesIndex++] = prevIndex++;\r\n            indices[indicesIndex++] = positionIndex++;\r\n        }\r\n\r\n        for (i = 0; i < 3; i++) {\r\n            indices[indicesIndex++] = prevIndex++;\r\n            indices[indicesIndex++] = prevIndex;\r\n            indices[indicesIndex++] = positionIndex;\r\n        }\r\n        return indices;\r\n    }\r\n\r\n    var boundingSphereCenter = new Cartesian3();\r\n\r\n    function computeEllipse(options) {\r\n        var center = options.center;\r\n        boundingSphereCenter = Cartesian3.multiplyByScalar(options.ellipsoid.geodeticSurfaceNormal(center, boundingSphereCenter), options.height, boundingSphereCenter);\r\n        boundingSphereCenter = Cartesian3.add(center, boundingSphereCenter, boundingSphereCenter);\r\n        var boundingSphere = new BoundingSphere(boundingSphereCenter, options.semiMajorAxis);\r\n        var cep = EllipseGeometryLibrary.computeEllipsePositions(options, true, false);\r\n        var positions = cep.positions;\r\n        var numPts = cep.numPts;\r\n        var attributes = computeTopBottomAttributes(positions, options, false);\r\n        var indices = topIndices(numPts);\r\n        indices = IndexDatatype.createTypedArray(positions.length / 3, indices);\r\n        return {\r\n            boundingSphere : boundingSphere,\r\n            attributes : attributes,\r\n            indices : indices\r\n        };\r\n    }\r\n\r\n    function computeWallAttributes(positions, options) {\r\n        var vertexFormat = options.vertexFormat;\r\n        var center = options.center;\r\n        var semiMajorAxis = options.semiMajorAxis;\r\n        var semiMinorAxis = options.semiMinorAxis;\r\n        var ellipsoid = options.ellipsoid;\r\n        var height = options.height;\r\n        var extrudedHeight = options.extrudedHeight;\r\n        var stRotation = options.stRotation;\r\n        var size = positions.length / 3 * 2;\r\n\r\n        var finalPositions = new Float64Array(size * 3);\r\n        var textureCoordinates = (vertexFormat.st) ? new Float32Array(size * 2) : undefined;\r\n        var normals = (vertexFormat.normal) ? new Float32Array(size * 3) : undefined;\r\n        var tangents = (vertexFormat.tangent) ? new Float32Array(size * 3) : undefined;\r\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(size * 3) : undefined;\r\n\r\n        var shadowVolume = options.shadowVolume;\r\n        var extrudeNormals = (shadowVolume) ? new Float32Array(size * 3) : undefined;\r\n\r\n        var textureCoordIndex = 0;\r\n\r\n        // Raise positions to a height above the ellipsoid and compute the\r\n        // texture coordinates, normals, tangents, and bitangents.\r\n        var normal = scratchNormal;\r\n        var tangent = scratchTangent;\r\n        var bitangent = scratchBitangent;\r\n\r\n        var projection = new GeographicProjection(ellipsoid);\r\n        var projectedCenter = projection.project(ellipsoid.cartesianToCartographic(center, scratchCartographic), projectedCenterScratch);\r\n\r\n        var geodeticNormal = ellipsoid.scaleToGeodeticSurface(center, scratchCartesian1);\r\n        ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);\r\n        var rotation = Quaternion.fromAxisAngle(geodeticNormal, stRotation, quaternionScratch);\r\n        var textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrixScratch);\r\n\r\n        var minTexCoord = Cartesian2.fromElements(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, scratchMinTexCoord);\r\n        var maxTexCoord = Cartesian2.fromElements(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, scratchMaxTexCoord);\r\n\r\n        var length = positions.length;\r\n        var stOffset = length / 3 * 2;\r\n        for (var i = 0; i < length; i += 3) {\r\n            var i1 = i + 1;\r\n            var i2 = i + 2;\r\n            var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\r\n            var extrudedPosition;\r\n\r\n            if (vertexFormat.st) {\r\n                var rotatedPoint = Matrix3.multiplyByVector(textureMatrix, position, scratchCartesian2);\r\n                var projectedPoint = projection.project(ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic), scratchCartesian3);\r\n                Cartesian3.subtract(projectedPoint, projectedCenter, projectedPoint);\r\n\r\n                texCoordScratch.x = (projectedPoint.x + semiMajorAxis) / (2.0 * semiMajorAxis);\r\n                texCoordScratch.y = (projectedPoint.y + semiMinorAxis) / (2.0 * semiMinorAxis);\r\n\r\n                minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);\r\n                minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);\r\n                maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);\r\n                maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);\r\n\r\n                textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;\r\n                textureCoordinates[textureCoordIndex + 1 + stOffset] = texCoordScratch.y;\r\n\r\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.x;\r\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.y;\r\n            }\r\n\r\n            position = ellipsoid.scaleToGeodeticSurface(position, position);\r\n            extrudedPosition = Cartesian3.clone(position, scratchCartesian2);\r\n            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n\r\n            if (shadowVolume) {\r\n                extrudeNormals[i + length] = -normal.x;\r\n                extrudeNormals[i1 + length] = -normal.y;\r\n                extrudeNormals[i2 + length] = -normal.z;\r\n            }\r\n\r\n            var scaledNormal = Cartesian3.multiplyByScalar(normal, height, scratchCartesian4);\r\n            position = Cartesian3.add(position, scaledNormal, position);\r\n            scaledNormal = Cartesian3.multiplyByScalar(normal, extrudedHeight, scaledNormal);\r\n            extrudedPosition = Cartesian3.add(extrudedPosition, scaledNormal, extrudedPosition);\r\n\r\n            if (vertexFormat.position) {\r\n                finalPositions[i + length] = extrudedPosition.x;\r\n                finalPositions[i1 + length] = extrudedPosition.y;\r\n                finalPositions[i2 + length] = extrudedPosition.z;\r\n\r\n                finalPositions[i] = position.x;\r\n                finalPositions[i1] = position.y;\r\n                finalPositions[i2] = position.z;\r\n            }\r\n\r\n            if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\r\n\r\n                bitangent = Cartesian3.clone(normal, bitangent);\r\n                var next = Cartesian3.fromArray(positions, (i + 3) % length, scratchCartesian4);\r\n                Cartesian3.subtract(next, position, next);\r\n                var bottom = Cartesian3.subtract(extrudedPosition, position, scratchCartesian3);\r\n\r\n                normal = Cartesian3.normalize(Cartesian3.cross(bottom, next, normal), normal);\r\n\r\n                if (vertexFormat.normal) {\r\n                    normals[i] = normal.x;\r\n                    normals[i1] = normal.y;\r\n                    normals[i2] = normal.z;\r\n\r\n                    normals[i + length] = normal.x;\r\n                    normals[i1 + length] = normal.y;\r\n                    normals[i2 + length] = normal.z;\r\n                }\r\n\r\n                if (vertexFormat.tangent) {\r\n                    tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\r\n                    tangents[i] = tangent.x;\r\n                    tangents[i1] = tangent.y;\r\n                    tangents[i2] = tangent.z;\r\n\r\n                    tangents[i + length] = tangent.x;\r\n                    tangents[i + 1 + length] = tangent.y;\r\n                    tangents[i + 2 + length] = tangent.z;\r\n                }\r\n\r\n                if (vertexFormat.bitangent) {\r\n                    bitangents[i ] = bitangent.x;\r\n                    bitangents[i1] = bitangent.y;\r\n                    bitangents[i2] = bitangent.z;\r\n\r\n                    bitangents[i + length] = bitangent.x;\r\n                    bitangents[i1 + length] = bitangent.y;\r\n                    bitangents[i2 + length] = bitangent.z;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (vertexFormat.st) {\r\n            length = textureCoordinates.length;\r\n            for (var k = 0; k < length; k += 2) {\r\n                textureCoordinates[k] = (textureCoordinates[k] - minTexCoord.x) / (maxTexCoord.x - minTexCoord.x);\r\n                textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minTexCoord.y) / (maxTexCoord.y - minTexCoord.y);\r\n            }\r\n        }\r\n\r\n        var attributes = new GeometryAttributes();\r\n\r\n        if (vertexFormat.position) {\r\n            attributes.position = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : finalPositions\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.st) {\r\n            attributes.st = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 2,\r\n                values : textureCoordinates\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.normal) {\r\n            attributes.normal = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : normals\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.tangent) {\r\n            attributes.tangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : tangents\r\n            });\r\n        }\r\n\r\n        if (vertexFormat.bitangent) {\r\n            attributes.bitangent = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : bitangents\r\n            });\r\n        }\r\n\r\n        if (shadowVolume) {\r\n            attributes.extrudeDirection = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.FLOAT,\r\n                componentsPerAttribute : 3,\r\n                values : extrudeNormals\r\n            });\r\n        }\r\n\r\n        if (defined(options.offsetAttribute)) {\r\n            var offsetAttribute = new Uint8Array(size);\r\n            if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n                offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n            } else {\r\n                var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n            }\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values : offsetAttribute\r\n            });\r\n        }\r\n\r\n        return attributes;\r\n    }\r\n\r\n    function computeWallIndices(positions) {\r\n        var length = positions.length / 3;\r\n        var indices = IndexDatatype.createTypedArray(length, length * 6);\r\n        var index = 0;\r\n        for (var i = 0; i < length; i++) {\r\n            var UL = i;\r\n            var LL = i + length;\r\n            var UR = (UL + 1) % length;\r\n            var LR = UR + length;\r\n            indices[index++] = UL;\r\n            indices[index++] = LL;\r\n            indices[index++] = UR;\r\n            indices[index++] = UR;\r\n            indices[index++] = LL;\r\n            indices[index++] = LR;\r\n        }\r\n\r\n        return indices;\r\n    }\r\n\r\n    var topBoundingSphere = new BoundingSphere();\r\n    var bottomBoundingSphere = new BoundingSphere();\r\n\r\n    function computeExtrudedEllipse(options) {\r\n        var center = options.center;\r\n        var ellipsoid = options.ellipsoid;\r\n        var semiMajorAxis = options.semiMajorAxis;\r\n        var scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scratchCartesian1), options.height, scratchCartesian1);\r\n        topBoundingSphere.center = Cartesian3.add(center, scaledNormal, topBoundingSphere.center);\r\n        topBoundingSphere.radius = semiMajorAxis;\r\n\r\n        scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scaledNormal), options.extrudedHeight, scaledNormal);\r\n        bottomBoundingSphere.center = Cartesian3.add(center, scaledNormal, bottomBoundingSphere.center);\r\n        bottomBoundingSphere.radius = semiMajorAxis;\r\n\r\n        var cep = EllipseGeometryLibrary.computeEllipsePositions(options, true, true);\r\n        var positions = cep.positions;\r\n        var numPts = cep.numPts;\r\n        var outerPositions = cep.outerPositions;\r\n        var boundingSphere = BoundingSphere.union(topBoundingSphere, bottomBoundingSphere);\r\n        var topBottomAttributes = computeTopBottomAttributes(positions, options, true);\r\n        var indices = topIndices(numPts);\r\n        var length = indices.length;\r\n        indices.length = length * 2;\r\n        var posLength = positions.length / 3;\r\n        for (var i = 0; i < length; i += 3) {\r\n            indices[i + length] = indices[i + 2] + posLength;\r\n            indices[i + 1 + length] = indices[i + 1] + posLength;\r\n            indices[i + 2 + length] = indices[i] + posLength;\r\n        }\r\n\r\n        var topBottomIndices = IndexDatatype.createTypedArray(posLength * 2 / 3, indices);\r\n\r\n        var topBottomGeo = new Geometry({\r\n            attributes : topBottomAttributes,\r\n            indices : topBottomIndices,\r\n            primitiveType : PrimitiveType.TRIANGLES\r\n        });\r\n\r\n        var wallAttributes = computeWallAttributes(outerPositions, options);\r\n        indices = computeWallIndices(outerPositions);\r\n        var wallIndices = IndexDatatype.createTypedArray(outerPositions.length * 2 / 3, indices);\r\n\r\n        var wallGeo = new Geometry({\r\n            attributes : wallAttributes,\r\n            indices : wallIndices,\r\n            primitiveType : PrimitiveType.TRIANGLES\r\n        });\r\n\r\n        var geo = GeometryPipeline.combineInstances([\r\n            new GeometryInstance({\r\n                geometry : topBottomGeo\r\n            }),\r\n            new GeometryInstance({\r\n                geometry : wallGeo\r\n            })\r\n        ]);\r\n\r\n        return {\r\n            boundingSphere : boundingSphere,\r\n            attributes : geo[0].attributes,\r\n            indices : geo[0].indices\r\n        };\r\n    }\r\n\r\n    function computeRectangle(center, semiMajorAxis, semiMinorAxis, rotation, granularity, ellipsoid, result) {\r\n        var cep = EllipseGeometryLibrary.computeEllipsePositions({\r\n            center : center,\r\n            semiMajorAxis : semiMajorAxis,\r\n            semiMinorAxis : semiMinorAxis,\r\n            rotation : rotation,\r\n            granularity : granularity\r\n        }, false, true);\r\n        var positionsFlat = cep.outerPositions;\r\n        var positionsCount = positionsFlat.length / 3;\r\n        var positions = new Array(positionsCount);\r\n        for (var i = 0; i < positionsCount; ++i) {\r\n            positions[i] = Cartesian3.fromArray(positionsFlat, i * 3);\r\n        }\r\n        var rectangle = Rectangle.fromCartesianArray(positions, ellipsoid, result);\r\n        // Rectangle width goes beyond 180 degrees when the ellipse crosses a pole.\r\n        // When this happens, make the rectangle into a \"circle\" around the pole\r\n        if (rectangle.width > CesiumMath.PI) {\r\n            rectangle.north = rectangle.north > 0.0 ? CesiumMath.PI_OVER_TWO - CesiumMath.EPSILON7 : rectangle.north;\r\n            rectangle.south = rectangle.south < 0.0 ? CesiumMath.EPSILON7 - CesiumMath.PI_OVER_TWO : rectangle.south;\r\n            rectangle.east = CesiumMath.PI;\r\n            rectangle.west = -CesiumMath.PI;\r\n        }\r\n        return rectangle;\r\n    }\r\n\r\n    /**\r\n     * A description of an ellipse on an ellipsoid. Ellipse geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n     *\r\n     * @alias EllipseGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\r\n     * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\r\n     * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\r\n     * @param {Number} [options.height=0.0] The distance in meters between the ellipse and the ellipsoid surface.\r\n     * @param {Number} [options.extrudedHeight] The distance in meters between the ellipse's extruded face and the ellipsoid surface.\r\n     * @param {Number} [options.rotation=0.0] The angle of rotation counter-clockwise from north.\r\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates counter-clockwise from north.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The angular distance between points on the ellipse in radians.\r\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n     *\r\n     * @exception {DeveloperError} semiMajorAxis and semiMinorAxis must be greater than zero.\r\n     * @exception {DeveloperError} semiMajorAxis must be greater than or equal to the semiMinorAxis.\r\n     * @exception {DeveloperError} granularity must be greater than zero.\r\n     *\r\n     *\r\n     * @example\r\n     * // Create an ellipse.\r\n     * var ellipse = new Cesium.EllipseGeometry({\r\n     *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\r\n     *   semiMajorAxis : 500000.0,\r\n     *   semiMinorAxis : 300000.0,\r\n     *   rotation : Cesium.Math.toRadians(60.0)\r\n     * });\r\n     * var geometry = Cesium.EllipseGeometry.createGeometry(ellipse);\r\n     *\r\n     * @see EllipseGeometry.createGeometry\r\n     */\r\n    function EllipseGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var center = options.center;\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        var semiMajorAxis = options.semiMajorAxis;\r\n        var semiMinorAxis = options.semiMinorAxis;\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('options.center', center);\r\n        Check.typeOf.number('options.semiMajorAxis', semiMajorAxis);\r\n        Check.typeOf.number('options.semiMinorAxis', semiMinorAxis);\r\n        if (semiMajorAxis < semiMinorAxis) {\r\n            throw new DeveloperError('semiMajorAxis must be greater than or equal to the semiMinorAxis.');\r\n        }\r\n        if (granularity <= 0.0) {\r\n            throw new DeveloperError('granularity must be greater than zero.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        var height = defaultValue(options.height, 0.0);\r\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n        this._center = Cartesian3.clone(center);\r\n        this._semiMajorAxis = semiMajorAxis;\r\n        this._semiMinorAxis = semiMinorAxis;\r\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\r\n        this._rotation = defaultValue(options.rotation, 0.0);\r\n        this._stRotation = defaultValue(options.stRotation, 0.0);\r\n        this._height = Math.max(extrudedHeight, height);\r\n        this._granularity = granularity;\r\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n        this._extrudedHeight = Math.min(extrudedHeight, height);\r\n        this._shadowVolume = defaultValue(options.shadowVolume, false);\r\n        this._workerName = 'createEllipseGeometry';\r\n        this._offsetAttribute = options.offsetAttribute;\r\n\r\n        this._rectangle = undefined;\r\n        this._textureCoordinateRotationPoints = undefined;\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    EllipseGeometry.packedLength = Cartesian3.packedLength + Ellipsoid.packedLength + VertexFormat.packedLength + 9;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {EllipseGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    EllipseGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        Cartesian3.pack(value._center, array, startingIndex);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        array[startingIndex++] = value._semiMajorAxis;\r\n        array[startingIndex++] = value._semiMinorAxis;\r\n        array[startingIndex++] = value._rotation;\r\n        array[startingIndex++] = value._stRotation;\r\n        array[startingIndex++] = value._height;\r\n        array[startingIndex++] = value._granularity;\r\n        array[startingIndex++] = value._extrudedHeight;\r\n        array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\r\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchCenter = new Cartesian3();\r\n    var scratchEllipsoid = new Ellipsoid();\r\n    var scratchVertexFormat = new VertexFormat();\r\n    var scratchOptions = {\r\n        center : scratchCenter,\r\n        ellipsoid : scratchEllipsoid,\r\n        vertexFormat : scratchVertexFormat,\r\n        semiMajorAxis : undefined,\r\n        semiMinorAxis : undefined,\r\n        rotation : undefined,\r\n        stRotation : undefined,\r\n        height : undefined,\r\n        granularity : undefined,\r\n        extrudedHeight : undefined,\r\n        shadowVolume: undefined,\r\n        offsetAttribute: undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {EllipseGeometry} [result] The object into which to store the result.\r\n     * @returns {EllipseGeometry} The modified result parameter or a new EllipseGeometry instance if one was not provided.\r\n     */\r\n    EllipseGeometry.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var center = Cartesian3.unpack(array, startingIndex, scratchCenter);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n        startingIndex += Ellipsoid.packedLength;\r\n\r\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\r\n        startingIndex += VertexFormat.packedLength;\r\n\r\n        var semiMajorAxis = array[startingIndex++];\r\n        var semiMinorAxis = array[startingIndex++];\r\n        var rotation = array[startingIndex++];\r\n        var stRotation = array[startingIndex++];\r\n        var height = array[startingIndex++];\r\n        var granularity = array[startingIndex++];\r\n        var extrudedHeight = array[startingIndex++];\r\n        var shadowVolume = array[startingIndex++] === 1.0;\r\n        var offsetAttribute = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.height = height;\r\n            scratchOptions.extrudedHeight = extrudedHeight;\r\n            scratchOptions.granularity = granularity;\r\n            scratchOptions.stRotation = stRotation;\r\n            scratchOptions.rotation = rotation;\r\n            scratchOptions.semiMajorAxis = semiMajorAxis;\r\n            scratchOptions.semiMinorAxis = semiMinorAxis;\r\n            scratchOptions.shadowVolume = shadowVolume;\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n            return new EllipseGeometry(scratchOptions);\r\n        }\r\n\r\n        result._center = Cartesian3.clone(center, result._center);\r\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n        result._semiMajorAxis = semiMajorAxis;\r\n        result._semiMinorAxis = semiMinorAxis;\r\n        result._rotation = rotation;\r\n        result._stRotation = stRotation;\r\n        result._height = height;\r\n        result._granularity = granularity;\r\n        result._extrudedHeight = extrudedHeight;\r\n        result._shadowVolume = shadowVolume;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the bounding rectangle based on the provided options\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\r\n     * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\r\n     * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\r\n     * @param {Number} [options.rotation=0.0] The angle of rotation counter-clockwise from north.\r\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The angular distance between points on the ellipse in radians.\r\n     * @param {Rectangle} [result] An object in which to store the result\r\n     *\r\n     * @returns {Rectangle} The result rectangle\r\n     */\r\n    EllipseGeometry.computeRectangle = function(options, result) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var center = options.center;\r\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n        var semiMajorAxis = options.semiMajorAxis;\r\n        var semiMinorAxis = options.semiMinorAxis;\r\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n        var rotation = defaultValue(options.rotation, 0.0);\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('options.center', center);\r\n        Check.typeOf.number('options.semiMajorAxis', semiMajorAxis);\r\n        Check.typeOf.number('options.semiMinorAxis', semiMinorAxis);\r\n        if (semiMajorAxis < semiMinorAxis) {\r\n            throw new DeveloperError('semiMajorAxis must be greater than or equal to the semiMinorAxis.');\r\n        }\r\n        if (granularity <= 0.0) {\r\n            throw new DeveloperError('granularity must be greater than zero.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        return computeRectangle(center, semiMajorAxis, semiMinorAxis, rotation, granularity, ellipsoid, result);\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of a ellipse on an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {EllipseGeometry} ellipseGeometry A description of the ellipse.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    EllipseGeometry.createGeometry = function(ellipseGeometry) {\r\n        if ((ellipseGeometry._semiMajorAxis <= 0.0) || (ellipseGeometry._semiMinorAxis <= 0.0)) {\r\n            return;\r\n        }\r\n\r\n        var height = ellipseGeometry._height;\r\n        var extrudedHeight = ellipseGeometry._extrudedHeight;\r\n        var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n\r\n        ellipseGeometry._center = ellipseGeometry._ellipsoid.scaleToGeodeticSurface(ellipseGeometry._center, ellipseGeometry._center);\r\n        var options = {\r\n            center : ellipseGeometry._center,\r\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\r\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\r\n            ellipsoid : ellipseGeometry._ellipsoid,\r\n            rotation : ellipseGeometry._rotation,\r\n            height : height,\r\n            granularity : ellipseGeometry._granularity,\r\n            vertexFormat : ellipseGeometry._vertexFormat,\r\n            stRotation : ellipseGeometry._stRotation\r\n        };\r\n        var geometry;\r\n        if (extrude) {\r\n            options.extrudedHeight = extrudedHeight;\r\n            options.shadowVolume = ellipseGeometry._shadowVolume;\r\n            options.offsetAttribute = ellipseGeometry._offsetAttribute;\r\n            geometry = computeExtrudedEllipse(options);\r\n        } else {\r\n            geometry = computeEllipse(options);\r\n\r\n            if (defined(ellipseGeometry._offsetAttribute)) {\r\n                var length = geometry.attributes.position.values.length;\r\n                var applyOffset = new Uint8Array(length / 3);\r\n                var offsetValue = ellipseGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n                arrayFill(applyOffset, offsetValue);\r\n                geometry.attributes.applyOffset = new GeometryAttribute({\r\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                    componentsPerAttribute : 1,\r\n                    values: applyOffset\r\n                });\r\n            }\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : geometry.attributes,\r\n            indices : geometry.indices,\r\n            primitiveType : PrimitiveType.TRIANGLES,\r\n            boundingSphere : geometry.boundingSphere,\r\n            offsetAttribute : ellipseGeometry._offsetAttribute\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    EllipseGeometry.createShadowVolume = function(ellipseGeometry, minHeightFunc, maxHeightFunc) {\r\n        var granularity = ellipseGeometry._granularity;\r\n        var ellipsoid = ellipseGeometry._ellipsoid;\r\n\r\n        var minHeight = minHeightFunc(granularity, ellipsoid);\r\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\r\n\r\n        return new EllipseGeometry({\r\n            center : ellipseGeometry._center,\r\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\r\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\r\n            ellipsoid : ellipsoid,\r\n            rotation : ellipseGeometry._rotation,\r\n            stRotation : ellipseGeometry._stRotation,\r\n            granularity : granularity,\r\n            extrudedHeight : minHeight,\r\n            height : maxHeight,\r\n            vertexFormat : VertexFormat.POSITION_ONLY,\r\n            shadowVolume: true\r\n        });\r\n    };\r\n\r\n    function textureCoordinateRotationPoints(ellipseGeometry) {\r\n        var stRotation = -ellipseGeometry._stRotation;\r\n        if (stRotation === 0.0) {\r\n            return [0, 0, 0, 1, 1, 0];\r\n        }\r\n\r\n        var cep = EllipseGeometryLibrary.computeEllipsePositions({\r\n            center : ellipseGeometry._center,\r\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\r\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\r\n            rotation : ellipseGeometry._rotation,\r\n            granularity : ellipseGeometry._granularity\r\n        }, false, true);\r\n        var positionsFlat = cep.outerPositions;\r\n        var positionsCount = positionsFlat.length / 3;\r\n        var positions = new Array(positionsCount);\r\n        for (var i = 0; i < positionsCount; ++i) {\r\n            positions[i] = Cartesian3.fromArray(positionsFlat, i * 3);\r\n        }\r\n\r\n        var ellipsoid = ellipseGeometry._ellipsoid;\r\n        var boundingRectangle = ellipseGeometry.rectangle;\r\n        return Geometry._textureCoordinateRotationPoints(positions, stRotation, ellipsoid, boundingRectangle);\r\n    }\r\n\r\n    Object.defineProperties(EllipseGeometry.prototype, {\r\n        /**\r\n         * @private\r\n         */\r\n        rectangle : {\r\n            get : function() {\r\n                if (!defined(this._rectangle)) {\r\n                    this._rectangle = computeRectangle(this._center, this._semiMajorAxis, this._semiMinorAxis, this._rotation, this._granularity, this._ellipsoid);\r\n                }\r\n                return this._rectangle;\r\n            }\r\n        },\r\n        /**\r\n         * For remapping texture coordinates when rendering EllipseGeometries as GroundPrimitives.\r\n         * @private\r\n         */\r\n        textureCoordinateRotationPoints : {\r\n            get : function() {\r\n                if (!defined(this._textureCoordinateRotationPoints)) {\r\n                    this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(this);\r\n                }\r\n                return this._textureCoordinateRotationPoints;\r\n            }\r\n        }\r\n    });\r\nexport default EllipseGeometry;\r\n"],"names":["scratchCartesian1","Cartesian3","scratchCartesian2","scratchCartesian3","scratchCartesian4","texCoordScratch","Cartesian2","textureMatrixScratch","Matrix3","tangentMatrixScratch","quaternionScratch","Quaternion","scratchNormal","scratchTangent","scratchBitangent","scratchCartographic","Cartographic","projectedCenterScratch","scratchMinTexCoord","scratchMaxTexCoord","computeTopBottomAttributes","positions","options","extrude","vertexFormat","center","semiMajorAxis","semiMinorAxis","ellipsoid","stRotation","size","length","shadowVolume","textureCoordinates","Float32Array","undefined","normals","tangents","bitangents","extrudeNormals","textureCoordIndex","normal","tangent","bitangent","projection","GeographicProjection","projectedCenter","project","cartesianToCartographic","geodeticNormal","scaleToGeodeticSurface","geodeticSurfaceNormal","textureMatrix","tangentMatrix","rotation","fromAxisAngle","fromQuaternion","clone","IDENTITY","minTexCoord","fromElements","Number","POSITIVE_INFINITY","maxTexCoord","NEGATIVE_INFINITY","bottomOffset","stOffset","i","i1","i2","position","fromArray","st","rotatedPoint","multiplyByVector","projectedPoint","subtract","x","y","Math","min","max","z","normalize","cross","UNIT_Z","k","attributes","GeometryAttributes","finalPositions","EllipseGeometryLibrary","raisePositionsToHeight","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","FLOAT","extrudeDirection","defined","offsetAttribute","Uint8Array","GeometryOffsetAttribute","TOP","arrayFill","offsetValue","NONE","applyOffset","UNSIGNED_BYTE","topIndices","numPts","prevIndex","numInterior","positionIndex","j","indices","Array","indicesIndex","boundingSphereCenter","topBoundingSphere","BoundingSphere","bottomBoundingSphere","computeExtrudedEllipse","scaledNormal","multiplyByScalar","height","add","radius","extrudedHeight","cep","computeEllipsePositions","outerPositions","boundingSphere","union","topBottomAttributes","posLength","topBottomIndices","IndexDatatype","createTypedArray","topBottomGeo","Geometry","primitiveType","PrimitiveType","TRIANGLES","wallAttributes","Float64Array","extrudedPosition","next","bottom","computeWallAttributes","index","UL","LL","UR","LR","computeWallIndices","wallIndices","wallGeo","geo","GeometryPipeline","combineInstances","GeometryInstance","geometry","computeRectangle","granularity","result","positionsFlat","positionsCount","rectangle","Rectangle","fromCartesianArray","width","CesiumMath","PI","north","PI_OVER_TWO","EPSILON7","south","east","west","EllipseGeometry","defaultValue","EMPTY_OBJECT","Ellipsoid","WGS84","RADIANS_PER_DEGREE","VertexFormat","DEFAULT","Check","typeOf","number","DeveloperError","this","_center","_semiMajorAxis","_semiMinorAxis","_ellipsoid","_rotation","_stRotation","_height","_granularity","_vertexFormat","_extrudedHeight","_shadowVolume","_workerName","_offsetAttribute","_rectangle","_textureCoordinateRotationPoints","packedLength","pack","value","array","startingIndex","scratchCenter","scratchEllipsoid","scratchVertexFormat","scratchOptions","unpack","createGeometry","ellipseGeometry","equalsEpsilon","EPSILON2","computeEllipse","createShadowVolume","minHeightFunc","maxHeightFunc","minHeight","maxHeight","POSITION_ONLY","Object","defineProperties","prototype","get","textureCoordinateRotationPoints","boundingRectangle"],"mappings":"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"}