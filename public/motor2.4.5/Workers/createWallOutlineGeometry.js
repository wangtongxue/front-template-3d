define(["./when-7ef6387a","./Check-ed6a1804","./Math-85667bf9","./Ellipsoid-1cbb4ac9","./Transforms-c20c38d0","./RuntimeError-5b606d78","./Cartesian2-73569d25","./WebGLConstants-30fc6f5c","./ComponentDatatype-a863af81","./GeometryAttribute-6b3c7112","./GeometryAttributes-cb18da36","./IndexDatatype-f12d39b5","./IntersectionTests-faaebeeb","./Plane-6ff6c057","./EllipsoidTangentPlane-13a4f7fd","./EllipsoidRhumbLine-01425f3c","./PolygonPipeline-5110db34","./EllipsoidGeodesic-2bb1f4ee","./PolylinePipeline-2458e977","./WallGeometryLibrary-2768c19e"],(function(e,i,t,r,n,a,o,s,l,d,m,p,u,f,h,g,c,y,v,E){"use strict";var w=new r.Cartesian3,_=new r.Cartesian3;function b(n){var a=(n=e.defaultValue(n,e.defaultValue.EMPTY_OBJECT)).positions,o=n.maximumHeights,s=n.minimumHeights;if(!e.defined(a))throw new i.DeveloperError("options.positions is required.");if(e.defined(o)&&o.length!==a.length)throw new i.DeveloperError("options.positions and options.maximumHeights must have the same length.");if(e.defined(s)&&s.length!==a.length)throw new i.DeveloperError("options.positions and options.minimumHeights must have the same length.");var l=e.defaultValue(n.granularity,t.CesiumMath.RADIANS_PER_DEGREE),d=e.defaultValue(n.ellipsoid,r.Ellipsoid.WGS84);this._positions=a,this._minimumHeights=s,this._maximumHeights=o,this._granularity=l,this._ellipsoid=r.Ellipsoid.clone(d),this._workerName="createWallOutlineGeometry";var m=1+a.length*r.Cartesian3.packedLength+2;e.defined(s)&&(m+=s.length),e.defined(o)&&(m+=o.length),this.packedLength=m+r.Ellipsoid.packedLength+1}b.pack=function(t,n,a){if(!e.defined(t))throw new i.DeveloperError("value is required");if(!e.defined(n))throw new i.DeveloperError("array is required");var o;a=e.defaultValue(a,0);var s=t._positions,l=s.length;for(n[a++]=l,o=0;o<l;++o,a+=r.Cartesian3.packedLength)r.Cartesian3.pack(s[o],n,a);var d=t._minimumHeights;if(l=e.defined(d)?d.length:0,n[a++]=l,e.defined(d))for(o=0;o<l;++o)n[a++]=d[o];var m=t._maximumHeights;if(l=e.defined(m)?m.length:0,n[a++]=l,e.defined(m))for(o=0;o<l;++o)n[a++]=m[o];return r.Ellipsoid.pack(t._ellipsoid,n,a),n[a+=r.Ellipsoid.packedLength]=t._granularity,n};var C=r.Ellipsoid.clone(r.Ellipsoid.UNIT_SPHERE),H={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:C,granularity:void 0};return b.unpack=function(t,n,a){if(!e.defined(t))throw new i.DeveloperError("array is required");var o;n=e.defaultValue(n,0);var s,l,d=t[n++],m=new Array(d);for(o=0;o<d;++o,n+=r.Cartesian3.packedLength)m[o]=r.Cartesian3.unpack(t,n);if((d=t[n++])>0)for(s=new Array(d),o=0;o<d;++o)s[o]=t[n++];if((d=t[n++])>0)for(l=new Array(d),o=0;o<d;++o)l[o]=t[n++];var p=r.Ellipsoid.unpack(t,n,C),u=t[n+=r.Ellipsoid.packedLength];return e.defined(a)?(a._positions=m,a._minimumHeights=s,a._maximumHeights=l,a._ellipsoid=r.Ellipsoid.clone(p,a._ellipsoid),a._granularity=u,a):(H.positions=m,H.minimumHeights=s,H.maximumHeights=l,H.granularity=u,new b(H))},b.fromConstantHeights=function(t){var r,n,a=(t=e.defaultValue(t,e.defaultValue.EMPTY_OBJECT)).positions;if(!e.defined(a))throw new i.DeveloperError("options.positions is required.");var o=t.minimumHeight,s=t.maximumHeight,l=e.defined(o),d=e.defined(s);if(l||d){var m=a.length;r=l?new Array(m):void 0,n=d?new Array(m):void 0;for(var p=0;p<m;++p)l&&(r[p]=o),d&&(n[p]=s)}return new b({positions:a,maximumHeights:n,minimumHeights:r,ellipsoid:t.ellipsoid})},b.createGeometry=function(i){var a=i._positions,o=i._minimumHeights,s=i._maximumHeights,u=i._granularity,f=i._ellipsoid,h=E.WallGeometryLibrary.computePositions(f,a,s,o,u,!1);if(e.defined(h)){var g,c=h.bottomPositions,y=h.topPositions,v=y.length,b=2*v,C=new Float64Array(b),H=0;for(v/=3,g=0;g<v;++g){var A=3*g,k=r.Cartesian3.fromArray(y,A,w),P=r.Cartesian3.fromArray(c,A,_);C[H++]=P.x,C[H++]=P.y,C[H++]=P.z,C[H++]=k.x,C[H++]=k.y,C[H++]=k.z}var D=new m.GeometryAttributes({position:new d.GeometryAttribute({componentDatatype:l.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:C})}),x=b/3;b=2*x-4+x;var G=p.IndexDatatype.createTypedArray(x,b),L=0;for(g=0;g<x-2;g+=2){var T=g,V=g+2,I=r.Cartesian3.fromArray(C,3*T,w),S=r.Cartesian3.fromArray(C,3*V,_);if(!r.Cartesian3.equalsEpsilon(I,S,t.CesiumMath.EPSILON10)){var q=g+1,R=g+3;G[L++]=q,G[L++]=T,G[L++]=q,G[L++]=R,G[L++]=T,G[L++]=V}}return G[L++]=x-2,G[L++]=x-1,new d.Geometry({attributes:D,indices:G,primitiveType:d.PrimitiveType.LINES,boundingSphere:new n.BoundingSphere.fromVertices(C)})}},function(i,t){return e.defined(t)&&(i=b.unpack(i,t)),i._ellipsoid=r.Ellipsoid.clone(i._ellipsoid),b.createGeometry(i)}}));
//# sourceMappingURL=createWallOutlineGeometry.js.map
