{"version":3,"file":"createCoplanarPolygonOutlineGeometry.js","sources":["../../../../Source/Core/CoplanarPolygonOutlineGeometry.js","../../../../Source/WorkersES6/createCoplanarPolygonOutlineGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport CoplanarPolygonGeometryLibrary from './CoplanarPolygonGeometryLibrary.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryInstance from './GeometryInstance.js';\r\nimport GeometryPipeline from './GeometryPipeline.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport PolygonGeometryLibrary from './PolygonGeometryLibrary.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\n\r\n    function createGeometryFromPositions(positions){\r\n        var length = positions.length;\r\n        var flatPositions = new Float64Array(length * 3);\r\n        var indices = IndexDatatype.createTypedArray(length, length * 2);\r\n\r\n        var positionIndex = 0;\r\n        var index = 0;\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            var position = positions[i];\r\n            flatPositions[positionIndex++] = position.x;\r\n            flatPositions[positionIndex++] = position.y;\r\n            flatPositions[positionIndex++] = position.z;\r\n\r\n            indices[index++] = i;\r\n            indices[index++] = (i + 1) % length;\r\n        }\r\n\r\n        var attributes = new GeometryAttributes({\r\n            position: new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : flatPositions\r\n            })\r\n        });\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.LINES\r\n        });\r\n    }\r\n\r\n    /**\r\n     * A description of the outline of a polygon composed of arbitrary coplanar positions.\r\n     *\r\n     * @alias CoplanarPolygonOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\r\n     *\r\n     * @see CoplanarPolygonOutlineGeometry.createGeometry\r\n     *\r\n     * @example\r\n     * var polygonOutline = new Cesium.CoplanarPolygonOutlineGeometry({\r\n     *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\r\n     *      -90.0, 30.0, 0.0,\r\n     *      -90.0, 30.0, 1000.0,\r\n     *      -80.0, 30.0, 1000.0,\r\n     *      -80.0, 30.0, 0.0\r\n     *   ])\r\n     * });\r\n     * var geometry = Cesium.CoplanarPolygonOutlineGeometry.createGeometry(polygonOutline);\r\n     */\r\n    function CoplanarPolygonOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var polygonHierarchy = options.polygonHierarchy;\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('options.polygonHierarchy', polygonHierarchy);\r\n        //>>includeEnd('debug');\r\n\r\n        this._polygonHierarchy = polygonHierarchy;\r\n        this._workerName = 'createCoplanarPolygonOutlineGeometry';\r\n\r\n        /**\r\n         * The number of elements used to pack the object into an array.\r\n         * @type {Number}\r\n         */\r\n        this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + 1;\r\n    }\r\n\r\n    /**\r\n     * A description of a coplanar polygon outline from an array of positions.\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\r\n     * @returns {CoplanarPolygonOutlineGeometry}\r\n     */\r\n    CoplanarPolygonOutlineGeometry.fromPositions = function(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('options.positions', options.positions);\r\n        //>>includeEnd('debug');\r\n\r\n        var newOptions = {\r\n            polygonHierarchy : {\r\n                positions : options.positions\r\n            }\r\n        };\r\n        return new CoplanarPolygonOutlineGeometry(newOptions);\r\n    };\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {CoplanarPolygonOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    CoplanarPolygonOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\r\n\r\n        array[startingIndex] = value.packedLength;\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchOptions = {\r\n        polygonHierarchy : {}\r\n    };\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {CoplanarPolygonOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {CoplanarPolygonOutlineGeometry} The modified result parameter or a new CoplanarPolygonOutlineGeometry instance if one was not provided.\r\n     */\r\n    CoplanarPolygonOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\r\n        startingIndex = polygonHierarchy.startingIndex;\r\n        delete polygonHierarchy.startingIndex;\r\n        var packedLength = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            result = new CoplanarPolygonOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        result._polygonHierarchy = polygonHierarchy;\r\n        result.packedLength = packedLength;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {CoplanarPolygonOutlineGeometry} polygonGeometry A description of the polygon.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    CoplanarPolygonOutlineGeometry.createGeometry = function(polygonGeometry) {\r\n        var polygonHierarchy = polygonGeometry._polygonHierarchy;\r\n\r\n        var outerPositions = polygonHierarchy.positions;\r\n        outerPositions = arrayRemoveDuplicates(outerPositions, Cartesian3.equalsEpsilon, true);\r\n        if (outerPositions.length < 3) {\r\n            return;\r\n        }\r\n        var isValid = CoplanarPolygonGeometryLibrary.validOutline(outerPositions);\r\n        if (!isValid) {\r\n            return undefined;\r\n        }\r\n\r\n        var polygons = PolygonGeometryLibrary.polygonOutlinesFromHierarchy(polygonHierarchy, false);\r\n\r\n        if (polygons.length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        var geometries = [];\r\n\r\n        for (var i = 0; i < polygons.length; i++) {\r\n            var geometryInstance = new GeometryInstance({\r\n                geometry : createGeometryFromPositions(polygons[i])\r\n            });\r\n            geometries.push(geometryInstance);\r\n        }\r\n\r\n        var geometry = GeometryPipeline.combineInstances(geometries)[0];\r\n        var boundingSphere = BoundingSphere.fromPoints(polygonHierarchy.positions);\r\n\r\n        return new Geometry({\r\n            attributes : geometry.attributes,\r\n            indices : geometry.indices,\r\n            primitiveType : geometry.primitiveType,\r\n            boundingSphere : boundingSphere\r\n        });\r\n    };\r\nexport default CoplanarPolygonOutlineGeometry;\r\n","import CoplanarPolygonOutlineGeometry from '../Core/CoplanarPolygonOutlineGeometry.js';\r\nimport defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\n\r\n    function createCoplanarPolygonOutlineGeometry(polygonGeometry, offset) {\r\n        if (defined(offset)) {\r\n            polygonGeometry = CoplanarPolygonOutlineGeometry.unpack(polygonGeometry, offset);\r\n        }\r\n        polygonGeometry._ellipsoid = Ellipsoid.clone(polygonGeometry._ellipsoid);\r\n        return CoplanarPolygonOutlineGeometry.createGeometry(polygonGeometry);\r\n    }\r\nexport default createCoplanarPolygonOutlineGeometry;\r\n"],"names":["createGeometryFromPositions","positions","length","flatPositions","Float64Array","indices","IndexDatatype","createTypedArray","positionIndex","index","i","position","x","y","z","attributes","GeometryAttributes","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","Geometry","primitiveType","PrimitiveType","LINES","CoplanarPolygonOutlineGeometry","options","polygonHierarchy","defaultValue","EMPTY_OBJECT","Check","defined","this","_polygonHierarchy","_workerName","packedLength","PolygonGeometryLibrary","computeHierarchyPackedLength","fromPositions","pack","value","array","startingIndex","typeOf","object","packPolygonHierarchy","scratchOptions","unpack","result","unpackPolygonHierarchy","createGeometry","polygonGeometry","outerPositions","arrayRemoveDuplicates","Cartesian3","equalsEpsilon","CoplanarPolygonGeometryLibrary","validOutline","polygons","polygonOutlinesFromHierarchy","geometries","geometryInstance","GeometryInstance","geometry","push","GeometryPipeline","combineInstances","boundingSphere","BoundingSphere","fromPoints","offset","_ellipsoid","Ellipsoid","clone"],"mappings":"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"}