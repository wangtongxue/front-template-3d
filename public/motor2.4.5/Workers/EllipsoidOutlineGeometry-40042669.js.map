{"version":3,"file":"EllipsoidOutlineGeometry-40042669.js","sources":["../../../../Source/Core/EllipsoidOutlineGeometry.js"],"sourcesContent":["import arrayFill from './arrayFill.js';\r\nimport BoundingSphere from './BoundingSphere.js';\r\nimport Cartesian3 from './Cartesian3.js';\r\nimport ComponentDatatype from './ComponentDatatype.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\nimport Geometry from './Geometry.js';\r\nimport GeometryAttribute from './GeometryAttribute.js';\r\nimport GeometryAttributes from './GeometryAttributes.js';\r\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\r\nimport IndexDatatype from './IndexDatatype.js';\r\nimport CesiumMath from './Math.js';\r\nimport PrimitiveType from './PrimitiveType.js';\r\n\r\n    var defaultRadii = new Cartesian3(1.0, 1.0, 1.0);\r\n    var cos = Math.cos;\r\n    var sin = Math.sin;\r\n\r\n    /**\r\n     * A description of the outline of an ellipsoid centered at the origin.\r\n     *\r\n     * @alias EllipsoidOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Cartesian3} [options.radii=Cartesian3(1.0, 1.0, 1.0)] The radii of the ellipsoid in the x, y, and z directions.\r\n     * @param {Cartesian3} [options.innerRadii=options.radii] The inner radii of the ellipsoid in the x, y, and z directions.\r\n     * @param {Number} [options.minimumClock=0.0] The minimum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\r\n     * @param {Number} [options.maximumClock=2*PI] The maximum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\r\n     * @param {Number} [options.minimumCone=0.0] The minimum angle measured from the positive z-axis and toward the negative z-axis.\r\n     * @param {Number} [options.maximumCone=PI] The maximum angle measured from the positive z-axis and toward the negative z-axis.\r\n     * @param {Number} [options.stackPartitions=10] The count of stacks for the ellipsoid (1 greater than the number of parallel lines).\r\n     * @param {Number} [options.slicePartitions=8] The count of slices for the ellipsoid (Equal to the number of radial lines).\r\n     * @param {Number} [options.subdivisions=128] The number of points per line, determining the granularity of the curvature.\r\n     *\r\n     * @exception {DeveloperError} options.stackPartitions must be greater than or equal to one.\r\n     * @exception {DeveloperError} options.slicePartitions must be greater than or equal to zero.\r\n     * @exception {DeveloperError} options.subdivisions must be greater than or equal to zero.\r\n     *\r\n     * @example\r\n     * var ellipsoid = new Cesium.EllipsoidOutlineGeometry({\r\n     *   radii : new Cesium.Cartesian3(1000000.0, 500000.0, 500000.0),\r\n     *   stackPartitions: 6,\r\n     *   slicePartitions: 5\r\n     * });\r\n     * var geometry = Cesium.EllipsoidOutlineGeometry.createGeometry(ellipsoid);\r\n     */\r\n    function EllipsoidOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var radii = defaultValue(options.radii, defaultRadii);\r\n        var innerRadii = defaultValue(options.innerRadii, radii);\r\n        var minimumClock = defaultValue(options.minimumClock, 0.0);\r\n        var maximumClock = defaultValue(options.maximumClock, CesiumMath.TWO_PI);\r\n        var minimumCone = defaultValue(options.minimumCone, 0.0);\r\n        var maximumCone = defaultValue(options.maximumCone, CesiumMath.PI);\r\n        var stackPartitions = Math.round(defaultValue(options.stackPartitions, 10));\r\n        var slicePartitions = Math.round(defaultValue(options.slicePartitions, 8));\r\n        var subdivisions = Math.round(defaultValue(options.subdivisions, 128));\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (stackPartitions < 1) {\r\n            throw new DeveloperError('options.stackPartitions cannot be less than 1');\r\n        }\r\n        if (slicePartitions < 0) {\r\n            throw new DeveloperError('options.slicePartitions cannot be less than 0');\r\n        }\r\n        if (subdivisions < 0) {\r\n            throw new DeveloperError('options.subdivisions must be greater than or equal to zero.');\r\n        }\r\n        if (defined(options.offsetAttribute) && options.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n            throw new DeveloperError('GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        this._radii = Cartesian3.clone(radii);\r\n        this._innerRadii = Cartesian3.clone(innerRadii);\r\n        this._minimumClock = minimumClock;\r\n        this._maximumClock = maximumClock;\r\n        this._minimumCone = minimumCone;\r\n        this._maximumCone = maximumCone;\r\n        this._stackPartitions = stackPartitions;\r\n        this._slicePartitions = slicePartitions;\r\n        this._subdivisions = subdivisions;\r\n        this._offsetAttribute = options.offsetAttribute;\r\n        this._workerName = 'createEllipsoidOutlineGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    EllipsoidOutlineGeometry.packedLength = 2 * (Cartesian3.packedLength) + 8;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {EllipsoidOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    EllipsoidOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(value)) {\r\n            throw new DeveloperError('value is required');\r\n        }\r\n        if (!defined(array)) {\r\n            throw new DeveloperError('array is required');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        Cartesian3.pack(value._radii, array, startingIndex);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        Cartesian3.pack(value._innerRadii, array, startingIndex);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        array[startingIndex++] = value._minimumClock;\r\n        array[startingIndex++] = value._maximumClock;\r\n        array[startingIndex++] = value._minimumCone;\r\n        array[startingIndex++] = value._maximumCone;\r\n        array[startingIndex++] = value._stackPartitions;\r\n        array[startingIndex++] = value._slicePartitions;\r\n        array[startingIndex++] = value._subdivisions;\r\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n        return array;\r\n    };\r\n\r\n    var scratchRadii = new Cartesian3();\r\n    var scratchInnerRadii = new Cartesian3();\r\n    var scratchOptions = {\r\n        radii : scratchRadii,\r\n        innerRadii : scratchInnerRadii,\r\n        minimumClock : undefined,\r\n        maximumClock : undefined,\r\n        minimumCone : undefined,\r\n        maximumCone : undefined,\r\n        stackPartitions : undefined,\r\n        slicePartitions : undefined,\r\n        subdivisions : undefined,\r\n        offsetAttribute : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {EllipsoidOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {EllipsoidOutlineGeometry} The modified result parameter or a new EllipsoidOutlineGeometry instance if one was not provided.\r\n     */\r\n    EllipsoidOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        if (!defined(array)) {\r\n            throw new DeveloperError('array is required');\r\n        }\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n\r\n        var radii = Cartesian3.unpack(array, startingIndex, scratchRadii);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        var innerRadii = Cartesian3.unpack(array, startingIndex, scratchInnerRadii);\r\n        startingIndex += Cartesian3.packedLength;\r\n\r\n        var minimumClock = array[startingIndex++];\r\n        var maximumClock = array[startingIndex++];\r\n        var minimumCone = array[startingIndex++];\r\n        var maximumCone = array[startingIndex++];\r\n        var stackPartitions = array[startingIndex++];\r\n        var slicePartitions = array[startingIndex++];\r\n        var subdivisions = array[startingIndex++];\r\n        var offsetAttribute = array[startingIndex];\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.minimumClock = minimumClock;\r\n            scratchOptions.maximumClock = maximumClock;\r\n            scratchOptions.minimumCone = minimumCone;\r\n            scratchOptions.maximumCone = maximumCone;\r\n            scratchOptions.stackPartitions = stackPartitions;\r\n            scratchOptions.slicePartitions = slicePartitions;\r\n            scratchOptions.subdivisions = subdivisions;\r\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n            return new EllipsoidOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        result._radii = Cartesian3.clone(radii, result._radii);\r\n        result._innerRadii = Cartesian3.clone(innerRadii, result._innerRadii);\r\n        result._minimumClock = minimumClock;\r\n        result._maximumClock = maximumClock;\r\n        result._minimumCone = minimumCone;\r\n        result._maximumCone = maximumCone;\r\n        result._stackPartitions = stackPartitions;\r\n        result._slicePartitions = slicePartitions;\r\n        result._subdivisions = subdivisions;\r\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of an outline of an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {EllipsoidOutlineGeometry} ellipsoidGeometry A description of the ellipsoid outline.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    EllipsoidOutlineGeometry.createGeometry = function(ellipsoidGeometry) {\r\n        var radii = ellipsoidGeometry._radii;\r\n        if ((radii.x <= 0) || (radii.y <= 0) || (radii.z <= 0)) {\r\n            return;\r\n        }\r\n\r\n        var innerRadii = ellipsoidGeometry._innerRadii;\r\n        if ((innerRadii.x <= 0) || (innerRadii.y <= 0) || (innerRadii.z <= 0)) {\r\n            return;\r\n        }\r\n\r\n        var minimumClock = ellipsoidGeometry._minimumClock;\r\n        var maximumClock = ellipsoidGeometry._maximumClock;\r\n        var minimumCone = ellipsoidGeometry._minimumCone;\r\n        var maximumCone = ellipsoidGeometry._maximumCone;\r\n        var subdivisions = ellipsoidGeometry._subdivisions;\r\n        var ellipsoid = Ellipsoid.fromCartesian3(radii);\r\n\r\n        // Add an extra slice and stack to remain consistent with EllipsoidGeometry\r\n        var slicePartitions = ellipsoidGeometry._slicePartitions + 1;\r\n        var stackPartitions = ellipsoidGeometry._stackPartitions + 1;\r\n\r\n        slicePartitions = Math.round(slicePartitions * Math.abs(maximumClock - minimumClock) / CesiumMath.TWO_PI);\r\n        stackPartitions = Math.round(stackPartitions * Math.abs(maximumCone - minimumCone) / CesiumMath.PI);\r\n\r\n        if (slicePartitions < 2) {\r\n            slicePartitions = 2;\r\n        }\r\n        if (stackPartitions < 2) {\r\n            stackPartitions = 2;\r\n        }\r\n\r\n        var extraIndices = 0;\r\n        var vertexMultiplier = 1.0;\r\n        var hasInnerSurface = ((innerRadii.x !== radii.x) || (innerRadii.y !== radii.y) || innerRadii.z !== radii.z);\r\n        var isTopOpen = false;\r\n        var isBotOpen = false;\r\n        if (hasInnerSurface) {\r\n            vertexMultiplier = 2.0;\r\n            // Add 2x slicePartitions to connect the top/bottom of the outer to\r\n            // the top/bottom of the inner\r\n            if (minimumCone > 0.0) {\r\n                isTopOpen = true;\r\n                extraIndices += slicePartitions;\r\n            }\r\n            if (maximumCone < Math.PI) {\r\n                isBotOpen = true;\r\n                extraIndices += slicePartitions;\r\n            }\r\n        }\r\n\r\n        var vertexCount = subdivisions * vertexMultiplier * (stackPartitions + slicePartitions);\r\n        var positions = new Float64Array(vertexCount * 3);\r\n\r\n        // Multiply by two because two points define each line segment\r\n        var numIndices = 2 * (vertexCount + extraIndices - (slicePartitions + stackPartitions) * vertexMultiplier);\r\n        var indices = IndexDatatype.createTypedArray(vertexCount, numIndices);\r\n\r\n        var i;\r\n        var j;\r\n        var theta;\r\n        var phi;\r\n        var index = 0;\r\n\r\n        // Calculate sin/cos phi\r\n        var sinPhi = new Array(stackPartitions);\r\n        var cosPhi = new Array(stackPartitions);\r\n        for (i = 0; i < stackPartitions; i++) {\r\n            phi = minimumCone + i * (maximumCone - minimumCone) / (stackPartitions - 1);\r\n            sinPhi[i] = sin(phi);\r\n            cosPhi[i] = cos(phi);\r\n        }\r\n\r\n        // Calculate sin/cos theta\r\n        var sinTheta = new Array(subdivisions);\r\n        var cosTheta = new Array(subdivisions);\r\n        for (i = 0; i < subdivisions; i++) {\r\n            theta = minimumClock + i * (maximumClock - minimumClock) / (subdivisions - 1);\r\n            sinTheta[i] = sin(theta);\r\n            cosTheta[i] = cos(theta);\r\n        }\r\n\r\n        // Calculate the latitude lines on the outer surface\r\n        for (i = 0; i < stackPartitions; i++) {\r\n            for (j = 0; j < subdivisions; j++) {\r\n                positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\r\n                positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\r\n                positions[index++] = radii.z * cosPhi[i];\r\n            }\r\n        }\r\n\r\n        // Calculate the latitude lines on the inner surface\r\n        if (hasInnerSurface) {\r\n            for (i = 0; i < stackPartitions; i++) {\r\n                for (j = 0; j < subdivisions; j++) {\r\n                    positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\r\n                    positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\r\n                    positions[index++] = innerRadii.z * cosPhi[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        // Calculate sin/cos phi\r\n        sinPhi.length = subdivisions;\r\n        cosPhi.length = subdivisions;\r\n        for (i = 0; i < subdivisions; i++) {\r\n            phi = minimumCone + i * (maximumCone - minimumCone) / (subdivisions - 1);\r\n            sinPhi[i] = sin(phi);\r\n            cosPhi[i] = cos(phi);\r\n        }\r\n\r\n        // Calculate sin/cos theta for each slice partition\r\n        sinTheta.length = slicePartitions;\r\n        cosTheta.length = slicePartitions;\r\n        for (i = 0; i < slicePartitions; i++) {\r\n            theta = minimumClock + i * (maximumClock - minimumClock) / (slicePartitions - 1);\r\n            sinTheta[i] = sin(theta);\r\n            cosTheta[i] = cos(theta);\r\n        }\r\n\r\n        // Calculate the longitude lines on the outer surface\r\n        for (i = 0; i < subdivisions; i++) {\r\n            for (j = 0; j < slicePartitions; j++) {\r\n                positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\r\n                positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\r\n                positions[index++] = radii.z * cosPhi[i];\r\n            }\r\n        }\r\n\r\n        // Calculate the longitude lines on the inner surface\r\n        if (hasInnerSurface) {\r\n            for (i = 0; i < subdivisions; i++) {\r\n                for (j = 0; j < slicePartitions; j++) {\r\n                    positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\r\n                    positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\r\n                    positions[index++] = innerRadii.z * cosPhi[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        // Create indices for the latitude lines\r\n        index = 0;\r\n        for (i = 0; i < stackPartitions * vertexMultiplier; i++) {\r\n            var topOffset = i * subdivisions;\r\n            for (j = 0; j < subdivisions - 1; j++) {\r\n                indices[index++] = topOffset + j;\r\n                indices[index++] = topOffset + j + 1;\r\n            }\r\n        }\r\n\r\n        // Create indices for the outer longitude lines\r\n        var offset = stackPartitions * subdivisions * vertexMultiplier;\r\n        for (i = 0; i < slicePartitions; i++) {\r\n            for (j = 0; j < subdivisions - 1; j++) {\r\n                indices[index++] = offset + i + (j * slicePartitions);\r\n                indices[index++] = offset + i + (j + 1) * slicePartitions;\r\n            }\r\n        }\r\n\r\n        // Create indices for the inner longitude lines\r\n        if (hasInnerSurface) {\r\n            offset = stackPartitions * subdivisions * vertexMultiplier + slicePartitions * subdivisions;\r\n            for (i = 0; i < slicePartitions; i++) {\r\n                for (j = 0; j < subdivisions - 1; j++) {\r\n                    indices[index++] = offset + i + (j * slicePartitions);\r\n                    indices[index++] = offset + i + (j + 1) * slicePartitions;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (hasInnerSurface) {\r\n            var outerOffset = stackPartitions * subdivisions * vertexMultiplier;\r\n            var innerOffset = outerOffset + (subdivisions * slicePartitions);\r\n            if (isTopOpen) {\r\n                // Draw lines from the top of the inner surface to the top of the outer surface\r\n                for (i = 0; i < slicePartitions; i++) {\r\n                    indices[index++] = outerOffset + i;\r\n                    indices[index++] = innerOffset + i;\r\n                }\r\n            }\r\n\r\n            if (isBotOpen) {\r\n                // Draw lines from the top of the inner surface to the top of the outer surface\r\n                outerOffset += (subdivisions * slicePartitions) - slicePartitions;\r\n                innerOffset += (subdivisions * slicePartitions) - slicePartitions;\r\n                for (i = 0; i < slicePartitions; i++) {\r\n                    indices[index++] = outerOffset + i;\r\n                    indices[index++] = innerOffset + i;\r\n                }\r\n            }\r\n        }\r\n\r\n        var attributes = new GeometryAttributes({\r\n            position : new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.DOUBLE,\r\n                componentsPerAttribute : 3,\r\n                values : positions\r\n            })\r\n        });\r\n\r\n        if (defined(ellipsoidGeometry._offsetAttribute)) {\r\n            var length = positions.length;\r\n            var applyOffset = new Uint8Array(length / 3);\r\n            var offsetValue = ellipsoidGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n            arrayFill(applyOffset, offsetValue);\r\n            attributes.applyOffset = new GeometryAttribute({\r\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\r\n                componentsPerAttribute : 1,\r\n                values : applyOffset\r\n            });\r\n        }\r\n\r\n        return new Geometry({\r\n            attributes : attributes,\r\n            indices : indices,\r\n            primitiveType : PrimitiveType.LINES,\r\n            boundingSphere : BoundingSphere.fromEllipsoid(ellipsoid),\r\n            offsetAttribute : ellipsoidGeometry._offsetAttribute\r\n        });\r\n    };\r\nexport default EllipsoidOutlineGeometry;\r\n"],"names":["defaultRadii","Cartesian3","cos","Math","sin","EllipsoidOutlineGeometry","options","defaultValue","EMPTY_OBJECT","radii","innerRadii","minimumClock","maximumClock","CesiumMath","TWO_PI","minimumCone","maximumCone","PI","stackPartitions","round","slicePartitions","subdivisions","DeveloperError","defined","offsetAttribute","GeometryOffsetAttribute","TOP","this","_radii","clone","_innerRadii","_minimumClock","_maximumClock","_minimumCone","_maximumCone","_stackPartitions","_slicePartitions","_subdivisions","_offsetAttribute","_workerName","packedLength","pack","value","array","startingIndex","scratchRadii","scratchInnerRadii","scratchOptions","undefined","unpack","result","createGeometry","ellipsoidGeometry","x","y","z","ellipsoid","Ellipsoid","fromCartesian3","abs","extraIndices","vertexMultiplier","hasInnerSurface","isTopOpen","isBotOpen","i","j","theta","phi","vertexCount","positions","Float64Array","numIndices","indices","IndexDatatype","createTypedArray","index","sinPhi","Array","cosPhi","sinTheta","cosTheta","length","topOffset","offset","outerOffset","innerOffset","attributes","GeometryAttributes","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","applyOffset","Uint8Array","offsetValue","NONE","arrayFill","UNSIGNED_BYTE","Geometry","primitiveType","PrimitiveType","LINES","boundingSphere","BoundingSphere","fromEllipsoid"],"mappings":"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"}