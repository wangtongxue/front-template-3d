{"version":3,"file":"createCircleOutlineGeometry.js","sources":["../../../../Source/Core/CircleOutlineGeometry.js","../../../../Source/WorkersES6/createCircleOutlineGeometry.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport EllipseOutlineGeometry from './EllipseOutlineGeometry.js';\r\nimport Ellipsoid from './Ellipsoid.js';\r\n\r\n    /**\r\n     * A description of the outline of a circle on the ellipsoid.\r\n     *\r\n     * @alias CircleOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} options Object with the following properties:\r\n     * @param {Cartesian3} options.center The circle's center point in the fixed frame.\r\n     * @param {Number} options.radius The radius in meters.\r\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\r\n     * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\r\n     * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\r\n     * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\r\n     * @param {Number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom of an extruded circle.\r\n     *\r\n     * @exception {DeveloperError} radius must be greater than zero.\r\n     * @exception {DeveloperError} granularity must be greater than zero.\r\n     *\r\n     * @see CircleOutlineGeometry.createGeometry\r\n     * @see Packable\r\n     *\r\n     * @example\r\n     * // Create a circle.\r\n     * var circle = new Cesium.CircleOutlineGeometry({\r\n     *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\r\n     *   radius : 100000.0\r\n     * });\r\n     * var geometry = Cesium.CircleOutlineGeometry.createGeometry(circle);\r\n     */\r\n    function CircleOutlineGeometry(options) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n        var radius = options.radius;\r\n\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('radius', radius);\r\n        //>>includeEnd('debug');\r\n\r\n        var ellipseGeometryOptions = {\r\n            center : options.center,\r\n            semiMajorAxis : radius,\r\n            semiMinorAxis : radius,\r\n            ellipsoid : options.ellipsoid,\r\n            height : options.height,\r\n            extrudedHeight : options.extrudedHeight,\r\n            granularity : options.granularity,\r\n            numberOfVerticalLines : options.numberOfVerticalLines\r\n        };\r\n        this._ellipseGeometry = new EllipseOutlineGeometry(ellipseGeometryOptions);\r\n        this._workerName = 'createCircleOutlineGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    CircleOutlineGeometry.packedLength = EllipseOutlineGeometry.packedLength;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {CircleOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    CircleOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        //>>includeEnd('debug');\r\n        return EllipseOutlineGeometry.pack(value._ellipseGeometry, array, startingIndex);\r\n    };\r\n\r\n    var scratchEllipseGeometry = new EllipseOutlineGeometry({\r\n        center : new Cartesian3(),\r\n        semiMajorAxis : 1.0,\r\n        semiMinorAxis : 1.0\r\n    });\r\n    var scratchOptions = {\r\n        center : new Cartesian3(),\r\n        radius : undefined,\r\n        ellipsoid : Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\r\n        height : undefined,\r\n        extrudedHeight : undefined,\r\n        granularity : undefined,\r\n        numberOfVerticalLines : undefined,\r\n        semiMajorAxis : undefined,\r\n        semiMinorAxis : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {CircleOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {CircleOutlineGeometry} The modified result parameter or a new CircleOutlineGeometry instance if one was not provided.\r\n     */\r\n    CircleOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        var ellipseGeometry = EllipseOutlineGeometry.unpack(array, startingIndex, scratchEllipseGeometry);\r\n        scratchOptions.center = Cartesian3.clone(ellipseGeometry._center, scratchOptions.center);\r\n        scratchOptions.ellipsoid = Ellipsoid.clone(ellipseGeometry._ellipsoid, scratchOptions.ellipsoid);\r\n        scratchOptions.height = ellipseGeometry._height;\r\n        scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\r\n        scratchOptions.granularity = ellipseGeometry._granularity;\r\n        scratchOptions.numberOfVerticalLines = ellipseGeometry._numberOfVerticalLines;\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.radius = ellipseGeometry._semiMajorAxis;\r\n            return new CircleOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\r\n        scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\r\n        result._ellipseGeometry = new EllipseOutlineGeometry(scratchOptions);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of an outline of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {CircleOutlineGeometry} circleGeometry A description of the circle.\r\n     * @returns {Geometry|undefined} The computed vertices and indices.\r\n     */\r\n    CircleOutlineGeometry.createGeometry = function(circleGeometry) {\r\n        return EllipseOutlineGeometry.createGeometry(circleGeometry._ellipseGeometry);\r\n    };\r\nexport default CircleOutlineGeometry;\r\n","import Cartesian3 from '../Core/Cartesian3.js';\r\nimport CircleOutlineGeometry from '../Core/CircleOutlineGeometry.js';\r\nimport defined from '../Core/defined.js';\r\nimport Ellipsoid from '../Core/Ellipsoid.js';\r\n\r\n    function createCircleOutlineGeometry(circleGeometry, offset) {\r\n        if (defined(offset)) {\r\n            circleGeometry = CircleOutlineGeometry.unpack(circleGeometry, offset);\r\n        }\r\n        circleGeometry._ellipseGeometry._center = Cartesian3.clone(circleGeometry._ellipseGeometry._center);\r\n        circleGeometry._ellipseGeometry._ellipsoid = Ellipsoid.clone(circleGeometry._ellipseGeometry._ellipsoid);\r\n        return CircleOutlineGeometry.createGeometry(circleGeometry);\r\n    }\r\nexport default createCircleOutlineGeometry;\r\n"],"names":["CircleOutlineGeometry","options","radius","defaultValue","EMPTY_OBJECT","Check","typeOf","number","ellipseGeometryOptions","center","semiMajorAxis","semiMinorAxis","ellipsoid","height","extrudedHeight","granularity","numberOfVerticalLines","this","_ellipseGeometry","EllipseOutlineGeometry","_workerName","packedLength","pack","value","array","startingIndex","object","scratchEllipseGeometry","Cartesian3","scratchOptions","undefined","Ellipsoid","clone","UNIT_SPHERE","unpack","result","ellipseGeometry","_center","_ellipsoid","_height","_extrudedHeight","_granularity","_numberOfVerticalLines","defined","_semiMajorAxis","_semiMinorAxis","createGeometry","circleGeometry","offset"],"mappings":"ydAoCI,SAASA,EAAsBC,GAE3B,IAAIC,GADJD,EAAUE,eAAaF,EAASE,eAAaC,eACxBF,OAGrBG,QAAMC,OAAOC,OAAO,SAAUL,GAG9B,IAAIM,EAAyB,CACzBC,OAASR,EAAQQ,OACjBC,cAAgBR,EAChBS,cAAgBT,EAChBU,UAAYX,EAAQW,UACpBC,OAASZ,EAAQY,OACjBC,eAAiBb,EAAQa,eACzBC,YAAcd,EAAQc,YACtBC,sBAAwBf,EAAQe,uBAEpCC,KAAKC,iBAAmB,IAAIC,yBAAuBX,GACnDS,KAAKG,YAAc,8BAOvBpB,EAAsBqB,aAAeF,yBAAuBE,aAW5DrB,EAAsBsB,KAAO,SAASC,EAAOC,EAAOC,GAIhD,OAFApB,QAAMC,OAAOoB,OAAO,QAASH,GAEtBJ,yBAAuBG,KAAKC,EAAML,iBAAkBM,EAAOC,IAGtE,IAAIE,EAAyB,IAAIR,yBAAuB,CACpDV,OAAS,IAAImB,aACblB,cAAgB,EAChBC,cAAgB,IAEhBkB,EAAiB,CACjBpB,OAAS,IAAImB,aACb1B,YAAS4B,EACTlB,UAAYmB,YAAUC,MAAMD,YAAUE,aACtCpB,YAASiB,EACThB,oBAAiBgB,EACjBf,iBAAce,EACdd,2BAAwBc,EACxBpB,mBAAgBoB,EAChBnB,mBAAgBmB,UAWpB9B,EAAsBkC,OAAS,SAASV,EAAOC,EAAeU,GAC1D,IAAIC,EAAkBjB,yBAAuBe,OAAOV,EAAOC,EAAeE,GAQ1E,OAPAE,EAAepB,OAASmB,aAAWI,MAAMI,EAAgBC,QAASR,EAAepB,QACjFoB,EAAejB,UAAYmB,YAAUC,MAAMI,EAAgBE,WAAYT,EAAejB,WACtFiB,EAAehB,OAASuB,EAAgBG,QACxCV,EAAef,eAAiBsB,EAAgBI,gBAChDX,EAAed,YAAcqB,EAAgBK,aAC7CZ,EAAeb,sBAAwBoB,EAAgBM,uBAElDC,UAAQR,IAKbN,EAAenB,cAAgB0B,EAAgBQ,eAC/Cf,EAAelB,cAAgByB,EAAgBS,eAC/CV,EAAOjB,iBAAmB,IAAIC,yBAAuBU,GAC9CM,IAPHN,EAAe3B,OAASkC,EAAgBQ,eACjC,IAAI5C,EAAsB6B,KAezC7B,EAAsB8C,eAAiB,SAASC,GAC5C,OAAO5B,yBAAuB2B,eAAeC,EAAe7B,mBC/HhE,SAAqC6B,EAAgBC,GAMjD,OALIL,UAAQK,KACRD,EAAiB/C,EAAsBkC,OAAOa,EAAgBC,IAElED,EAAe7B,iBAAiBmB,QAAUT,aAAWI,MAAMe,EAAe7B,iBAAiBmB,SAC3FU,EAAe7B,iBAAiBoB,WAAaP,YAAUC,MAAMe,EAAe7B,iBAAiBoB,YACtFtC,EAAsB8C,eAAeC"}