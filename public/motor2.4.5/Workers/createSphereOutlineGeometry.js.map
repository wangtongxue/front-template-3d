{"version":3,"file":"createSphereOutlineGeometry.js","sources":["../../../../Source/Core/SphereOutlineGeometry.js","../../../../Source/WorkersES6/createSphereOutlineGeometry.js"],"sourcesContent":["import Cartesian3 from './Cartesian3.js';\r\nimport Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport EllipsoidOutlineGeometry from './EllipsoidOutlineGeometry.js';\r\n\r\n    /**\r\n     * A description of the outline of a sphere.\r\n     *\r\n     * @alias SphereOutlineGeometry\r\n     * @constructor\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Number} [options.radius=1.0] The radius of the sphere.\r\n     * @param {Number} [options.stackPartitions=10] The count of stacks for the sphere (1 greater than the number of parallel lines).\r\n     * @param {Number} [options.slicePartitions=8] The count of slices for the sphere (Equal to the number of radial lines).\r\n     * @param {Number} [options.subdivisions=200] The number of points per line, determining the granularity of the curvature .\r\n     *\r\n     * @exception {DeveloperError} options.stackPartitions must be greater than or equal to one.\r\n     * @exception {DeveloperError} options.slicePartitions must be greater than or equal to zero.\r\n     * @exception {DeveloperError} options.subdivisions must be greater than or equal to zero.\r\n     *\r\n     * @example\r\n     * var sphere = new Cesium.SphereOutlineGeometry({\r\n     *   radius : 100.0,\r\n     *   stackPartitions : 6,\r\n     *   slicePartitions: 5\r\n     * });\r\n     * var geometry = Cesium.SphereOutlineGeometry.createGeometry(sphere);\r\n     */\r\n    function SphereOutlineGeometry(options) {\r\n        var radius = defaultValue(options.radius, 1.0);\r\n        var radii = new Cartesian3(radius, radius, radius);\r\n        var ellipsoidOptions = {\r\n                radii: radii,\r\n                stackPartitions: options.stackPartitions,\r\n                slicePartitions: options.slicePartitions,\r\n                subdivisions: options.subdivisions\r\n        };\r\n\r\n        this._ellipsoidGeometry = new EllipsoidOutlineGeometry(ellipsoidOptions);\r\n        this._workerName = 'createSphereOutlineGeometry';\r\n    }\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    SphereOutlineGeometry.packedLength = EllipsoidOutlineGeometry.packedLength;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {SphereOutlineGeometry} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    SphereOutlineGeometry.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        //>>includeEnd('debug');\r\n\r\n        return EllipsoidOutlineGeometry.pack(value._ellipsoidGeometry, array, startingIndex);\r\n    };\r\n\r\n    var scratchEllipsoidGeometry = new EllipsoidOutlineGeometry();\r\n    var scratchOptions = {\r\n        radius : undefined,\r\n        radii : new Cartesian3(),\r\n        stackPartitions : undefined,\r\n        slicePartitions : undefined,\r\n        subdivisions : undefined\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {SphereOutlineGeometry} [result] The object into which to store the result.\r\n     * @returns {SphereOutlineGeometry} The modified result parameter or a new SphereOutlineGeometry instance if one was not provided.\r\n     */\r\n    SphereOutlineGeometry.unpack = function(array, startingIndex, result) {\r\n        var ellipsoidGeometry = EllipsoidOutlineGeometry.unpack(array, startingIndex, scratchEllipsoidGeometry);\r\n        scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\r\n        scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\r\n        scratchOptions.subdivisions = ellipsoidGeometry._subdivisions;\r\n\r\n        if (!defined(result)) {\r\n            scratchOptions.radius = ellipsoidGeometry._radii.x;\r\n            return new SphereOutlineGeometry(scratchOptions);\r\n        }\r\n\r\n        Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\r\n        result._ellipsoidGeometry = new EllipsoidOutlineGeometry(scratchOptions);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the geometric representation of an outline of a sphere, including its vertices, indices, and a bounding sphere.\r\n     *\r\n     * @param {SphereOutlineGeometry} sphereGeometry A description of the sphere outline.\r\n     * @returns {Geometry} The computed vertices and indices.\r\n     */\r\n    SphereOutlineGeometry.createGeometry = function(sphereGeometry) {\r\n        return EllipsoidOutlineGeometry.createGeometry(sphereGeometry._ellipsoidGeometry);\r\n    };\r\nexport default SphereOutlineGeometry;\r\n","import defined from '../Core/defined.js';\r\nimport SphereOutlineGeometry from '../Core/SphereOutlineGeometry.js';\r\n\r\n    function createSphereOutlineGeometry(sphereGeometry, offset) {\r\n        if (defined(offset)) {\r\n            sphereGeometry = SphereOutlineGeometry.unpack(sphereGeometry, offset);\r\n        }\r\n        return SphereOutlineGeometry.createGeometry(sphereGeometry);\r\n    }\r\nexport default createSphereOutlineGeometry;\r\n"],"names":["SphereOutlineGeometry","options","radius","defaultValue","ellipsoidOptions","radii","Cartesian3","stackPartitions","slicePartitions","subdivisions","this","_ellipsoidGeometry","EllipsoidOutlineGeometry","_workerName","packedLength","pack","value","array","startingIndex","Check","typeOf","object","scratchEllipsoidGeometry","scratchOptions","undefined","unpack","result","ellipsoidGeometry","_stackPartitions","_slicePartitions","_subdivisions","defined","clone","_radii","x","createGeometry","sphereGeometry","offset"],"mappings":"qbA8BI,SAASA,EAAsBC,GAC3B,IAAIC,EAASC,eAAaF,EAAQC,OAAQ,GAEtCE,EAAmB,CACfC,MAFI,IAAIC,aAAWJ,EAAQA,EAAQA,GAGnCK,gBAAiBN,EAAQM,gBACzBC,gBAAiBP,EAAQO,gBACzBC,aAAcR,EAAQQ,cAG9BC,KAAKC,mBAAqB,IAAIC,2BAAyBR,GACvDM,KAAKG,YAAc,8BAOvBb,EAAsBc,aAAeF,2BAAyBE,aAW9Dd,EAAsBe,KAAO,SAASC,EAAOC,EAAOC,GAKhD,OAHAC,QAAMC,OAAOC,OAAO,QAASL,GAGtBJ,2BAAyBG,KAAKC,EAAML,mBAAoBM,EAAOC,IAG1E,IAAII,EAA2B,IAAIV,2BAC/BW,EAAiB,CACjBrB,YAASsB,EACTnB,MAAQ,IAAIC,aACZC,qBAAkBiB,EAClBhB,qBAAkBgB,EAClBf,kBAAee,UAWnBxB,EAAsByB,OAAS,SAASR,EAAOC,EAAeQ,GAC1D,IAAIC,EAAoBf,2BAAyBa,OAAOR,EAAOC,EAAeI,GAK9E,OAJAC,EAAehB,gBAAkBoB,EAAkBC,iBACnDL,EAAef,gBAAkBmB,EAAkBE,iBACnDN,EAAed,aAAekB,EAAkBG,cAE3CC,UAAQL,IAKbpB,aAAW0B,MAAML,EAAkBM,OAAQV,EAAelB,OAC1DqB,EAAOf,mBAAqB,IAAIC,2BAAyBW,GAClDG,IANHH,EAAerB,OAASyB,EAAkBM,OAAOC,EAC1C,IAAIlC,EAAsBuB,KAczCvB,EAAsBmC,eAAiB,SAASC,GAC5C,OAAOxB,2BAAyBuB,eAAeC,EAAezB,qBCxGlE,SAAqCyB,EAAgBC,GAIjD,OAHIN,UAAQM,KACRD,EAAiBpC,EAAsByB,OAAOW,EAAgBC,IAE3DrC,EAAsBmC,eAAeC"}