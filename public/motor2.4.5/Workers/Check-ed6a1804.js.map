{"version":3,"file":"Check-ed6a1804.js","sources":["../../../../Source/Core/DeveloperError.js","../../../../Source/Core/Check.js"],"sourcesContent":["import defined from './defined.js';\r\n\r\n    /**\r\n     * Constructs an exception object that is thrown due to a developer error, e.g., invalid argument,\r\n     * argument out of range, etc.  This exception should only be thrown during development;\r\n     * it usually indicates a bug in the calling code.  This exception should never be\r\n     * caught; instead the calling code should strive not to generate it.\r\n     * <br /><br />\r\n     * On the other hand, a {@link RuntimeError} indicates an exception that may\r\n     * be thrown at runtime, e.g., out of memory, that the calling code should be prepared\r\n     * to catch.\r\n     *\r\n     * @alias DeveloperError\r\n     * @constructor\r\n     * @extends Error\r\n     *\r\n     * @param {String} [message] The error message for this exception.\r\n     *\r\n     * @see RuntimeError\r\n     */\r\n    function DeveloperError(message) {\r\n        /**\r\n         * 'DeveloperError' indicating that this exception was thrown due to a developer error.\r\n         * @type {String}\r\n         * @readonly\r\n         */\r\n        this.name = 'DeveloperError';\r\n\r\n        /**\r\n         * The explanation for why this exception was thrown.\r\n         * @type {String}\r\n         * @readonly\r\n         */\r\n        this.message = message;\r\n\r\n        //Browsers such as IE don't have a stack property until you actually throw the error.\r\n        var stack;\r\n        try {\r\n            throw new Error();\r\n        } catch (e) {\r\n            stack = e.stack;\r\n        }\r\n\r\n        /**\r\n         * The stack trace of this exception, if available.\r\n         * @type {String}\r\n         * @readonly\r\n         */\r\n        this.stack = stack;\r\n    }\r\n\r\n    if (defined(Object.create)) {\r\n        DeveloperError.prototype = Object.create(Error.prototype);\r\n        DeveloperError.prototype.constructor = DeveloperError;\r\n    }\r\n\r\n    DeveloperError.prototype.toString = function() {\r\n        var str = this.name + ': ' + this.message;\r\n\r\n        if (defined(this.stack)) {\r\n            str += '\\n' + this.stack.toString();\r\n        }\r\n\r\n        return str;\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    DeveloperError.throwInstantiationError = function() {\r\n        throw new DeveloperError('This function defines an interface and should not be called directly.');\r\n    };\r\nexport default DeveloperError;\r\n","import defined from './defined.js';\r\nimport DeveloperError from './DeveloperError.js';\r\n\r\n    /**\r\n     * Contains functions for checking that supplied arguments are of a specified type\r\n     * or meet specified conditions\r\n     * @private\r\n     */\r\n    var Check = {};\r\n\r\n    /**\r\n     * Contains type checking functions, all using the typeof operator\r\n     */\r\n    Check.typeOf = {};\r\n\r\n    function getUndefinedErrorMessage(name) {\r\n        return name + ' is required, actual value was undefined';\r\n    }\r\n\r\n    function getFailedTypeErrorMessage(actual, expected, name) {\r\n        return 'Expected ' + name + ' to be typeof ' + expected + ', actual typeof was ' + actual;\r\n    }\r\n\r\n    /**\r\n     * Throws if test is not defined\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value that is to be checked\r\n     * @exception {DeveloperError} test must be defined\r\n     */\r\n    Check.defined = function (name, test) {\r\n        if (!defined(test)) {\r\n            throw new DeveloperError(getUndefinedErrorMessage(name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'function'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'function'\r\n     */\r\n    Check.typeOf.func = function (name, test) {\r\n        if (typeof test !== 'function') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'function', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'string'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'string'\r\n     */\r\n    Check.typeOf.string = function (name, test) {\r\n        if (typeof test !== 'string') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'string', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'number'\r\n     */\r\n    Check.typeOf.number = function (name, test) {\r\n        if (typeof test !== 'number') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'number', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number' and less than limit\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @param {Number} limit The limit value to compare against\r\n     * @exception {DeveloperError} test must be typeof 'number' and less than limit\r\n     */\r\n    Check.typeOf.number.lessThan = function (name, test, limit) {\r\n        Check.typeOf.number(name, test);\r\n        if (test >= limit) {\r\n            throw new DeveloperError('Expected ' + name + ' to be less than ' + limit + ', actual value was ' + test);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number' and less than or equal to limit\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @param {Number} limit The limit value to compare against\r\n     * @exception {DeveloperError} test must be typeof 'number' and less than or equal to limit\r\n     */\r\n    Check.typeOf.number.lessThanOrEquals = function (name, test, limit) {\r\n        Check.typeOf.number(name, test);\r\n        if (test > limit) {\r\n            throw new DeveloperError('Expected ' + name + ' to be less than or equal to ' + limit + ', actual value was ' + test);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number' and greater than limit\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @param {Number} limit The limit value to compare against\r\n     * @exception {DeveloperError} test must be typeof 'number' and greater than limit\r\n     */\r\n    Check.typeOf.number.greaterThan = function (name, test, limit) {\r\n        Check.typeOf.number(name, test);\r\n        if (test <= limit) {\r\n            throw new DeveloperError('Expected ' + name + ' to be greater than ' + limit + ', actual value was ' + test);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'number' and greater than or equal to limit\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @param {Number} limit The limit value to compare against\r\n     * @exception {DeveloperError} test must be typeof 'number' and greater than or equal to limit\r\n     */\r\n    Check.typeOf.number.greaterThanOrEquals = function (name, test, limit) {\r\n        Check.typeOf.number(name, test);\r\n        if (test < limit) {\r\n            throw new DeveloperError('Expected ' + name + ' to be greater than or equal to' + limit + ', actual value was ' + test);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'object'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'object'\r\n     */\r\n    Check.typeOf.object = function (name, test) {\r\n        if (typeof test !== 'object') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'object', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test is not typeof 'boolean'\r\n     *\r\n     * @param {String} name The name of the variable being tested\r\n     * @param {*} test The value to test\r\n     * @exception {DeveloperError} test must be typeof 'boolean'\r\n     */\r\n    Check.typeOf.bool = function (name, test) {\r\n        if (typeof test !== 'boolean') {\r\n            throw new DeveloperError(getFailedTypeErrorMessage(typeof test, 'boolean', name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Throws if test1 and test2 is not typeof 'number' and not equal in value\r\n     *\r\n     * @param {String} name1 The name of the first variable being tested\r\n     * @param {String} name2 The name of the second variable being tested against\r\n     * @param {*} test1 The value to test\r\n     * @param {*} test2 The value to test against\r\n     * @exception {DeveloperError} test1 and test2 should be type of 'number' and be equal in value\r\n     */\r\n    Check.typeOf.number.equals = function (name1, name2, test1, test2) {\r\n        Check.typeOf.number(name1, test1);\r\n        Check.typeOf.number(name2, test2);\r\n        if (test1 !== test2) {\r\n            throw new DeveloperError(name1 + ' must be equal to ' + name2 + ', the actual values are ' + test1 + ' and ' + test2);\r\n        }\r\n    };\r\nexport default Check;\r\n"],"names":["DeveloperError","message","stack","this","name","Error","e","defined","Object","create","prototype","constructor","toString","str","throwInstantiationError","Check","getFailedTypeErrorMessage","actual","expected","typeOf","test","getUndefinedErrorMessage","func","string","number","lessThan","limit","lessThanOrEquals","greaterThan","greaterThanOrEquals","object","bool","equals","name1","name2","test1","test2"],"mappings":"iEAoBI,SAASA,EAAeC,GAgBpB,IAAIC,EAVJC,KAAKC,KAAO,iBAOZD,KAAKF,QAAUA,EAIf,IACI,MAAM,IAAII,MACZ,MAAOC,GACLJ,EAAQI,EAAEJ,MAQdC,KAAKD,MAAQA,EAGbK,UAAQC,OAAOC,UACfT,EAAeU,UAAYF,OAAOC,OAAOJ,MAAMK,WAC/CV,EAAeU,UAAUC,YAAcX,GAG3CA,EAAeU,UAAUE,SAAW,WAChC,IAAIC,EAAMV,KAAKC,KAAO,KAAOD,KAAKF,QAMlC,OAJIM,UAAQJ,KAAKD,SACbW,GAAO,KAAOV,KAAKD,MAAMU,YAGtBC,GAMXb,EAAec,wBAA0B,WACrC,MAAM,IAAId,EAAe,0EC9D7B,IAAIe,EAAQ,GAWZ,SAASC,EAA0BC,EAAQC,EAAUd,GACjD,MAAO,YAAcA,EAAO,iBAAmBc,EAAW,uBAAyBD,EAPvFF,EAAMI,OAAS,GAiBfJ,EAAMR,QAAU,SAAUH,EAAMgB,GAC5B,IAAKb,UAAQa,GACT,MAAM,IAAIpB,EAjBlB,SAAkCI,GAC9B,OAAOA,EAAO,2CAgBeiB,CAAyBjB,KAW1DW,EAAMI,OAAOG,KAAO,SAAUlB,EAAMgB,GAChC,GAAoB,mBAATA,EACP,MAAM,IAAIpB,EAAegB,SAAiCI,EAAM,WAAYhB,KAWpFW,EAAMI,OAAOI,OAAS,SAAUnB,EAAMgB,GAClC,GAAoB,iBAATA,EACP,MAAM,IAAIpB,EAAegB,SAAiCI,EAAM,SAAUhB,KAWlFW,EAAMI,OAAOK,OAAS,SAAUpB,EAAMgB,GAClC,GAAoB,iBAATA,EACP,MAAM,IAAIpB,EAAegB,SAAiCI,EAAM,SAAUhB,KAYlFW,EAAMI,OAAOK,OAAOC,SAAW,SAAUrB,EAAMgB,EAAMM,GAEjD,GADAX,EAAMI,OAAOK,OAAOpB,EAAMgB,GACtBA,GAAQM,EACR,MAAM,IAAI1B,EAAe,YAAcI,EAAO,oBAAsBsB,EAAQ,sBAAwBN,IAY5GL,EAAMI,OAAOK,OAAOG,iBAAmB,SAAUvB,EAAMgB,EAAMM,GAEzD,GADAX,EAAMI,OAAOK,OAAOpB,EAAMgB,GACtBA,EAAOM,EACP,MAAM,IAAI1B,EAAe,YAAcI,EAAO,gCAAkCsB,EAAQ,sBAAwBN,IAYxHL,EAAMI,OAAOK,OAAOI,YAAc,SAAUxB,EAAMgB,EAAMM,GAEpD,GADAX,EAAMI,OAAOK,OAAOpB,EAAMgB,GACtBA,GAAQM,EACR,MAAM,IAAI1B,EAAe,YAAcI,EAAO,uBAAyBsB,EAAQ,sBAAwBN,IAY/GL,EAAMI,OAAOK,OAAOK,oBAAsB,SAAUzB,EAAMgB,EAAMM,GAE5D,GADAX,EAAMI,OAAOK,OAAOpB,EAAMgB,GACtBA,EAAOM,EACP,MAAM,IAAI1B,EAAe,YAAcI,EAAO,kCAAoCsB,EAAQ,sBAAwBN,IAW1HL,EAAMI,OAAOW,OAAS,SAAU1B,EAAMgB,GAClC,GAAoB,iBAATA,EACP,MAAM,IAAIpB,EAAegB,SAAiCI,EAAM,SAAUhB,KAWlFW,EAAMI,OAAOY,KAAO,SAAU3B,EAAMgB,GAChC,GAAoB,kBAATA,EACP,MAAM,IAAIpB,EAAegB,SAAiCI,EAAM,UAAWhB,KAanFW,EAAMI,OAAOK,OAAOQ,OAAS,SAAUC,EAAOC,EAAOC,EAAOC,GAGxD,GAFArB,EAAMI,OAAOK,OAAOS,EAAOE,GAC3BpB,EAAMI,OAAOK,OAAOU,EAAOE,GACvBD,IAAUC,EACV,MAAM,IAAIpC,EAAeiC,EAAQ,qBAAuBC,EAAQ,2BAA6BC,EAAQ,QAAUC"}