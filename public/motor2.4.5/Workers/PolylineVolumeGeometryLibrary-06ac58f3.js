/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["exports","./when-4ca4e419","./defineProperties-163ddb68","./Cartesian3-32451e63","./Ellipsoid-d2aa3b12","./Transforms-7b04d7e0","./Matrix4-33464f2b","./Cartesian2-f49a1383","./EllipsoidTangentPlane-3967708f","./PolylinePipeline-4ac94627"],(function(a,e,r,n,t,i,s,o,l,C){"use strict";var c=e.freezeObject({ROUNDED:0,MITERED:1,BEVELED:2}),u=[new n.Cartesian3,new n.Cartesian3],y=new n.Cartesian3,d=new n.Cartesian3,m=new n.Cartesian3,f=new n.Cartesian3,p=new n.Cartesian3,g=new n.Cartesian3,w=new n.Cartesian3,h=new n.Cartesian3,v=new n.Cartesian3,x=new n.Cartesian3,P=new n.Cartesian3,E={},M=new t.Cartographic;function T(a,e,r,t){var i,s=a[0],o=a[1],l=n.Cartesian3.angleBetween(s,o),C=Math.ceil(l/t),c=new Array(C);if(e===r){for(i=0;i<C;i++)c[i]=e;return c.push(r),c}var u=(r-e)/C;for(i=1;i<C;i++){var y=e+i*u;c[i]=y}return c[0]=e,c.push(r),c}var B=new n.Cartesian3,b=new n.Cartesian3;var z=new n.Cartesian3(-1,0,0),S=new s.Matrix4,A=new s.Matrix4,D=new s.Matrix3,O=s.Matrix3.IDENTITY.clone(),N=new n.Cartesian3,V=new s.Cartesian4,G=new n.Cartesian3;function R(a,e,r,t,C,c,u,y){var d=N,m=V;S=i.Transforms.eastNorthUpToFixedFrame(a,C,S),d=s.Matrix4.multiplyByPointAsVector(S,z,d);var f=function(a,e,r,t){var i=new l.EllipsoidTangentPlane(r,t),s=i.projectPointOntoPlane(n.Cartesian3.add(r,a,B),B),C=i.projectPointOntoPlane(n.Cartesian3.add(r,e,b),b),c=o.Cartesian2.angleBetween(s,C);return C.x*s.y-C.y*s.x>=0?-c:c}(d=n.Cartesian3.normalize(d,d),e,a,C);D=s.Matrix3.fromRotationZ(f,D),G.z=c,S=s.Matrix4.multiplyTransformation(S,s.Matrix4.fromRotationTranslation(D,G,A),S);var p=O;p[0]=u;for(var g=0;g<y;g++)for(var w=0;w<r.length;w+=3)m=n.Cartesian3.fromArray(r,w,m),m=s.Matrix3.multiplyByVector(p,m,m),m=s.Matrix4.multiplyByPoint(S,m,m),t.push(m.x,m.y,m.z);return t}var I=new n.Cartesian3;function L(a,e,r,t,i,s,o){for(var l=0;l<a.length;l+=3){t=R(n.Cartesian3.fromArray(a,l,I),e,r,t,i,s[l/3],o,1)}return t}function j(a,e){for(var r=a.length,n=new Array(3*r),t=0,i=e.x+e.width/2,s=e.y+e.height/2,o=0;o<r;o++)n[t++]=a[o].x-i,n[t++]=0,n[t++]=a[o].y-s;return n}var Q=new i.Quaternion,F=new n.Cartesian3,U=new s.Matrix3;function _(a,e,t,o,l,C,u,y,d,m){var f,p,g=n.Cartesian3.angleBetween(n.Cartesian3.subtract(e,a,x),n.Cartesian3.subtract(t,a,P)),w=o===c.BEVELED?0:Math.ceil(g/r.CesiumMath.toRadians(5));if(f=l?s.Matrix3.fromQuaternion(i.Quaternion.fromAxisAngle(n.Cartesian3.negate(a,x),g/(w+1),Q),U):s.Matrix3.fromQuaternion(i.Quaternion.fromAxisAngle(a,g/(w+1),Q),U),e=n.Cartesian3.clone(e,F),w>0)for(var h=m?2:1,v=0;v<w;v++)e=s.Matrix3.multiplyByVector(f,e,e),p=n.Cartesian3.subtract(e,a,x),p=n.Cartesian3.normalize(p,p),l||(p=n.Cartesian3.negate(p,p)),u=R(C.scaleToGeodeticSurface(e,P),p,y,u,C,d,1,h);else p=n.Cartesian3.subtract(e,a,x),p=n.Cartesian3.normalize(p,p),l||(p=n.Cartesian3.negate(p,p)),u=R(C.scaleToGeodeticSurface(e,P),p,y,u,C,d,1,1),t=n.Cartesian3.clone(t,F),p=n.Cartesian3.subtract(t,a,x),p=n.Cartesian3.normalize(p,p),l||(p=n.Cartesian3.negate(p,p)),u=R(C.scaleToGeodeticSurface(t,P),p,y,u,C,d,1,1);return u}E.removeDuplicatesFromShape=function(a){for(var e=a.length,r=[],n=e-1,t=0;t<e;n=t++){var i=a[n],s=a[t];o.Cartesian2.equals(i,s)||r.push(s)}return r},E.angleIsGreaterThanPi=function(a,e,r,t){var i=new l.EllipsoidTangentPlane(r,t),s=i.projectPointOntoPlane(n.Cartesian3.add(r,a,B),B),o=i.projectPointOntoPlane(n.Cartesian3.add(r,e,b),b);return o.x*s.y-o.y*s.x>=0};var q=new n.Cartesian3,Y=new n.Cartesian3;E.computePositions=function(a,e,t,i,s){var o=i._ellipsoid,l=function(a,e){for(var r=new Array(a.length),n=0;n<a.length;n++){var t=a[n];M=e.cartesianToCartographic(t,M),r[n]=M.height,a[n]=e.scaleToGeodeticSurface(t,t)}return r}(a,o),P=i._granularity,B=i._cornerType,b=s?function(a,e){var r=a.length,n=new Array(6*r),t=0,i=e.x+e.width/2,s=e.y+e.height/2,o=a[0];n[t++]=o.x-i,n[t++]=0,n[t++]=o.y-s;for(var l=1;l<r;l++){var C=(o=a[l]).x-i,c=o.y-s;n[t++]=C,n[t++]=0,n[t++]=c,n[t++]=C,n[t++]=0,n[t++]=c}return o=a[0],n[t++]=o.x-i,n[t++]=0,n[t++]=o.y-s,n}(e,t):j(e,t),z=s?j(e,t):void 0,S=t.height/2,A=t.width/2,D=a.length,O=[],N=s?[]:void 0,V=y,G=d,I=m,Q=f,F=p,U=g,Z=w,k=h,H=v,J=a[0],K=a[1];Q=o.geodeticSurfaceNormal(J,Q),V=n.Cartesian3.subtract(K,J,V),V=n.Cartesian3.normalize(V,V),k=n.Cartesian3.cross(Q,V,k),k=n.Cartesian3.normalize(k,k);var W,X=l[0],$=l[1];s&&(N=R(J,k,z,N,o,X+S,1,1)),H=n.Cartesian3.clone(J,H),J=K,G=n.Cartesian3.negate(V,G);for(var aa=1;aa<D-1;aa++){var ea=s?2:1;K=a[aa+1],V=n.Cartesian3.subtract(K,J,V),V=n.Cartesian3.normalize(V,V),I=n.Cartesian3.add(V,G,I),I=n.Cartesian3.normalize(I,I),Q=o.geodeticSurfaceNormal(J,Q);var ra=n.Cartesian3.multiplyByScalar(Q,n.Cartesian3.dot(V,Q),q);n.Cartesian3.subtract(V,ra,ra),n.Cartesian3.normalize(ra,ra);var na=n.Cartesian3.multiplyByScalar(Q,n.Cartesian3.dot(G,Q),Y);if(n.Cartesian3.subtract(G,na,na),n.Cartesian3.normalize(na,na),!r.CesiumMath.equalsEpsilon(Math.abs(n.Cartesian3.dot(ra,na)),1,r.CesiumMath.EPSILON7)){I=n.Cartesian3.cross(I,Q,I),I=n.Cartesian3.cross(Q,I,I),I=n.Cartesian3.normalize(I,I);var ta=1/Math.max(.25,n.Cartesian3.magnitude(n.Cartesian3.cross(I,G,x))),ia=E.angleIsGreaterThanPi(V,G,J,o);ia?(F=n.Cartesian3.add(J,n.Cartesian3.multiplyByScalar(I,ta*A,I),F),U=n.Cartesian3.add(F,n.Cartesian3.multiplyByScalar(k,A,U),U),u[0]=n.Cartesian3.clone(H,u[0]),u[1]=n.Cartesian3.clone(U,u[1]),W=T(u,X+S,$+S,P),O=L(C.PolylinePipeline.generateArc({positions:u,granularity:P,ellipsoid:o}),k,b,O,o,W,1),k=n.Cartesian3.cross(Q,V,k),k=n.Cartesian3.normalize(k,k),Z=n.Cartesian3.add(F,n.Cartesian3.multiplyByScalar(k,A,Z),Z),B===c.ROUNDED||B===c.BEVELED?_(F,U,Z,B,ia,o,O,b,$+S,s):O=R(J,I=n.Cartesian3.negate(I,I),b,O,o,$+S,ta,ea),H=n.Cartesian3.clone(Z,H)):(F=n.Cartesian3.add(J,n.Cartesian3.multiplyByScalar(I,ta*A,I),F),U=n.Cartesian3.add(F,n.Cartesian3.multiplyByScalar(k,-A,U),U),u[0]=n.Cartesian3.clone(H,u[0]),u[1]=n.Cartesian3.clone(U,u[1]),W=T(u,X+S,$+S,P),O=L(C.PolylinePipeline.generateArc({positions:u,granularity:P,ellipsoid:o}),k,b,O,o,W,1),k=n.Cartesian3.cross(Q,V,k),k=n.Cartesian3.normalize(k,k),Z=n.Cartesian3.add(F,n.Cartesian3.multiplyByScalar(k,-A,Z),Z),B===c.ROUNDED||B===c.BEVELED?_(F,U,Z,B,ia,o,O,b,$+S,s):O=R(J,I,b,O,o,$+S,ta,ea),H=n.Cartesian3.clone(Z,H)),G=n.Cartesian3.negate(V,G)}else O=R(H,k,b,O,o,X+S,1,1),H=J;X=$,$=l[aa+1],J=K}u[0]=n.Cartesian3.clone(H,u[0]),u[1]=n.Cartesian3.clone(J,u[1]),W=T(u,X+S,$+S,P),O=L(C.PolylinePipeline.generateArc({positions:u,granularity:P,ellipsoid:o}),k,b,O,o,W,1),s&&(N=R(J,k,z,N,o,$+S,1,1)),D=O.length;var sa=s?D+N.length:D,oa=new Float64Array(sa);return oa.set(O),s&&oa.set(N,D),oa},a.CornerType=c,a.PolylineVolumeGeometryLibrary=E}));
