{"version":3,"file":"Color-c9a50038.js","sources":["../../../../Source/Core/Color.js"],"sourcesContent":["import Check from './Check.js';\r\nimport defaultValue from './defaultValue.js';\r\nimport defined from './defined.js';\r\nimport FeatureDetection from './FeatureDetection.js';\r\nimport CesiumMath from './Math.js';\r\n\r\n    function hue2rgb(m1, m2, h) {\r\n        if (h < 0) {\r\n            h += 1;\r\n        }\r\n        if (h > 1) {\r\n            h -= 1;\r\n        }\r\n        if (h * 6 < 1) {\r\n            return m1 + (m2 - m1) * 6 * h;\r\n        }\r\n        if (h * 2 < 1) {\r\n            return m2;\r\n        }\r\n        if (h * 3 < 2) {\r\n            return m1 + (m2 - m1) * (2 / 3 - h) * 6;\r\n        }\r\n        return m1;\r\n    }\r\n\r\n    /**\r\n     * A color, specified using red, green, blue, and alpha values,\r\n     * which range from <code>0</code> (no intensity) to <code>1.0</code> (full intensity).\r\n     * @param {Number} [red=1.0] The red component.\r\n     * @param {Number} [green=1.0] The green component.\r\n     * @param {Number} [blue=1.0] The blue component.\r\n     * @param {Number} [alpha=1.0] The alpha component.\r\n     *\r\n     * @constructor\r\n     * @alias Color\r\n     *\r\n     * @see Packable\r\n     */\r\n    function Color(red, green, blue, alpha) {\r\n        /**\r\n         * The red component.\r\n         * @type {Number}\r\n         * @default 1.0\r\n         */\r\n        this.red = defaultValue(red, 1.0);\r\n        /**\r\n         * The green component.\r\n         * @type {Number}\r\n         * @default 1.0\r\n         */\r\n        this.green = defaultValue(green, 1.0);\r\n        /**\r\n         * The blue component.\r\n         * @type {Number}\r\n         * @default 1.0\r\n         */\r\n        this.blue = defaultValue(blue, 1.0);\r\n        /**\r\n         * The alpha component.\r\n         * @type {Number}\r\n         * @default 1.0\r\n         */\r\n        this.alpha = defaultValue(alpha, 1.0);\r\n    }\r\n\r\n    /**\r\n     * Creates a Color instance from a {@link Cartesian4}. <code>x</code>, <code>y</code>, <code>z</code>,\r\n     * and <code>w</code> map to <code>red</code>, <code>green</code>, <code>blue</code>, and <code>alpha</code>, respectively.\r\n     *\r\n     * @param {Cartesian4} cartesian The source cartesian.\r\n     * @param {Color} [result] The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\r\n     */\r\n    Color.fromCartesian4 = function(cartesian, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('cartesian', cartesian);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Color(cartesian.x, cartesian.y, cartesian.z, cartesian.w);\r\n        }\r\n\r\n        result.red = cartesian.x;\r\n        result.green = cartesian.y;\r\n        result.blue = cartesian.z;\r\n        result.alpha = cartesian.w;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a new Color specified using red, green, blue, and alpha values\r\n     * that are in the range of 0 to 255, converting them internally to a range of 0.0 to 1.0.\r\n     *\r\n     * @param {Number} [red=255] The red component.\r\n     * @param {Number} [green=255] The green component.\r\n     * @param {Number} [blue=255] The blue component.\r\n     * @param {Number} [alpha=255] The alpha component.\r\n     * @param {Color} [result] The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\r\n     */\r\n    Color.fromBytes = function(red, green, blue, alpha, result) {\r\n        red = Color.byteToFloat(defaultValue(red, 255.0));\r\n        green = Color.byteToFloat(defaultValue(green, 255.0));\r\n        blue = Color.byteToFloat(defaultValue(blue, 255.0));\r\n        alpha = Color.byteToFloat(defaultValue(alpha, 255.0));\r\n\r\n        if (!defined(result)) {\r\n            return new Color(red, green, blue, alpha);\r\n        }\r\n\r\n        result.red = red;\r\n        result.green = green;\r\n        result.blue = blue;\r\n        result.alpha = alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a new Color that has the same red, green, and blue components\r\n     * of the specified color, but with the specified alpha value.\r\n     *\r\n     * @param {Color} color The base color\r\n     * @param {Number} alpha The new alpha component.\r\n     * @param {Color} [result] The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\r\n     *\r\n     * @example var translucentRed = Cesium.Color.fromAlpha(Cesium.Color.RED, 0.9);\r\n     */\r\n    Color.fromAlpha = function(color, alpha, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('color', color);\r\n        Check.typeOf.number('alpha', alpha);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            return new Color(color.red, color.green, color.blue, alpha);\r\n        }\r\n\r\n        result.red = color.red;\r\n        result.green = color.green;\r\n        result.blue = color.blue;\r\n        result.alpha = alpha;\r\n        return result;\r\n    };\r\n\r\n    var scratchArrayBuffer;\r\n    var scratchUint32Array;\r\n    var scratchUint8Array;\r\n    if (FeatureDetection.supportsTypedArrays()) {\r\n        scratchArrayBuffer = new ArrayBuffer(4);\r\n        scratchUint32Array = new Uint32Array(scratchArrayBuffer);\r\n        scratchUint8Array = new Uint8Array(scratchArrayBuffer);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color from a single numeric unsigned 32-bit RGBA value, using the endianness\r\n     * of the system.\r\n     *\r\n     * @param {Number} rgba A single numeric unsigned 32-bit RGBA value.\r\n     * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\r\n     * @returns {Color} The color object.\r\n     *\r\n     * @example\r\n     * var color = Cesium.Color.fromRgba(0x67ADDFFF);\r\n     *\r\n     * @see Color#toRgba\r\n     */\r\n    Color.fromRgba = function(rgba, result) {\r\n        // scratchUint32Array and scratchUint8Array share an underlying array buffer\r\n        scratchUint32Array[0] = rgba;\r\n        return Color.fromBytes(scratchUint8Array[0], scratchUint8Array[1], scratchUint8Array[2], scratchUint8Array[3], result);\r\n    };\r\n\r\n    /**\r\n     * Creates a Color instance from hue, saturation, and lightness.\r\n     *\r\n     * @param {Number} [hue=0] The hue angle 0...1\r\n     * @param {Number} [saturation=0] The saturation value 0...1\r\n     * @param {Number} [lightness=0] The lightness value 0...1\r\n     * @param {Number} [alpha=1.0] The alpha component 0...1\r\n     * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\r\n     * @returns {Color} The color object.\r\n     *\r\n     * @see {@link http://www.w3.org/TR/css3-color/#hsl-color|CSS color values}\r\n     */\r\n    Color.fromHsl = function(hue, saturation, lightness, alpha, result) {\r\n        hue = defaultValue(hue, 0.0) % 1.0;\r\n        saturation = defaultValue(saturation, 0.0);\r\n        lightness = defaultValue(lightness, 0.0);\r\n        alpha = defaultValue(alpha, 1.0);\r\n\r\n        var red = lightness;\r\n        var green = lightness;\r\n        var blue = lightness;\r\n\r\n        if (saturation !== 0) {\r\n            var m2;\r\n            if (lightness < 0.5) {\r\n                m2 = lightness * (1 + saturation);\r\n            } else {\r\n                m2 = lightness + saturation - lightness * saturation;\r\n            }\r\n\r\n            var m1 = 2.0 * lightness - m2;\r\n            red = hue2rgb(m1, m2, hue + 1 / 3);\r\n            green = hue2rgb(m1, m2, hue);\r\n            blue = hue2rgb(m1, m2, hue - 1 / 3);\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Color(red, green, blue, alpha);\r\n        }\r\n\r\n        result.red = red;\r\n        result.green = green;\r\n        result.blue = blue;\r\n        result.alpha = alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a random color using the provided options. For reproducible random colors, you should\r\n     * call {@link CesiumMath#setRandomNumberSeed} once at the beginning of your application.\r\n     *\r\n     * @param {Object} [options] Object with the following properties:\r\n     * @param {Number} [options.red] If specified, the red component to use instead of a randomized value.\r\n     * @param {Number} [options.minimumRed=0.0] The maximum red value to generate if none was specified.\r\n     * @param {Number} [options.maximumRed=1.0] The minimum red value to generate if none was specified.\r\n     * @param {Number} [options.green] If specified, the green component to use instead of a randomized value.\r\n     * @param {Number} [options.minimumGreen=0.0] The maximum green value to generate if none was specified.\r\n     * @param {Number} [options.maximumGreen=1.0] The minimum green value to generate if none was specified.\r\n     * @param {Number} [options.blue] If specified, the blue component to use instead of a randomized value.\r\n     * @param {Number} [options.minimumBlue=0.0] The maximum blue value to generate if none was specified.\r\n     * @param {Number} [options.maximumBlue=1.0] The minimum blue value to generate if none was specified.\r\n     * @param {Number} [options.alpha] If specified, the alpha component to use instead of a randomized value.\r\n     * @param {Number} [options.minimumAlpha=0.0] The maximum alpha value to generate if none was specified.\r\n     * @param {Number} [options.maximumAlpha=1.0] The minimum alpha value to generate if none was specified.\r\n     * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\r\n     * @returns {Color} The modified result parameter or a new instance if result was undefined.\r\n     *\r\n     * @exception {DeveloperError} minimumRed must be less than or equal to maximumRed.\r\n     * @exception {DeveloperError} minimumGreen must be less than or equal to maximumGreen.\r\n     * @exception {DeveloperError} minimumBlue must be less than or equal to maximumBlue.\r\n     * @exception {DeveloperError} minimumAlpha must be less than or equal to maximumAlpha.\r\n     *\r\n     * @example\r\n     * //Create a completely random color\r\n     * var color = Cesium.Color.fromRandom();\r\n     *\r\n     * //Create a random shade of yellow.\r\n     * var color = Cesium.Color.fromRandom({\r\n     *     red : 1.0,\r\n     *     green : 1.0,\r\n     *     alpha : 1.0\r\n     * });\r\n     *\r\n     * //Create a random bright color.\r\n     * var color = Cesium.Color.fromRandom({\r\n     *     minimumRed : 0.75,\r\n     *     minimumGreen : 0.75,\r\n     *     minimumBlue : 0.75,\r\n     *     alpha : 1.0\r\n     * });\r\n     */\r\n    Color.fromRandom = function(options, result) {\r\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n        var red = options.red;\r\n        if (!defined(red)) {\r\n            var minimumRed = defaultValue(options.minimumRed, 0);\r\n            var maximumRed = defaultValue(options.maximumRed, 1.0);\r\n\r\n            //>>includeStart('debug', pragmas.debug);\r\n            Check.typeOf.number.lessThanOrEquals('minimumRed', minimumRed, maximumRed);\r\n            //>>includeEnd('debug');\r\n\r\n            red = minimumRed + (CesiumMath.nextRandomNumber() * (maximumRed - minimumRed));\r\n        }\r\n\r\n        var green = options.green;\r\n        if (!defined(green)) {\r\n            var minimumGreen = defaultValue(options.minimumGreen, 0);\r\n            var maximumGreen = defaultValue(options.maximumGreen, 1.0);\r\n\r\n            //>>includeStart('debug', pragmas.debug);\r\n            Check.typeOf.number.lessThanOrEquals('minimumGreen', minimumGreen, maximumGreen);\r\n            //>>includeEnd('debug');\r\n            green = minimumGreen + (CesiumMath.nextRandomNumber() * (maximumGreen - minimumGreen));\r\n        }\r\n\r\n        var blue = options.blue;\r\n        if (!defined(blue)) {\r\n            var minimumBlue = defaultValue(options.minimumBlue, 0);\r\n            var maximumBlue = defaultValue(options.maximumBlue, 1.0);\r\n\r\n            //>>includeStart('debug', pragmas.debug);\r\n            Check.typeOf.number.lessThanOrEquals('minimumBlue', minimumBlue, maximumBlue);\r\n            //>>includeEnd('debug');\r\n\r\n            blue = minimumBlue + (CesiumMath.nextRandomNumber() * (maximumBlue - minimumBlue));\r\n        }\r\n\r\n        var alpha = options.alpha;\r\n        if (!defined(alpha)) {\r\n            var minimumAlpha = defaultValue(options.minimumAlpha, 0);\r\n            var maximumAlpha = defaultValue(options.maximumAlpha, 1.0);\r\n\r\n            //>>includeStart('debug', pragmas.debug);\r\n            Check.typeOf.number.lessThanOrEquals('minumumAlpha', minimumAlpha, maximumAlpha);\r\n            //>>includeEnd('debug');\r\n\r\n            alpha = minimumAlpha + (CesiumMath.nextRandomNumber() * (maximumAlpha - minimumAlpha));\r\n        }\r\n\r\n        if (!defined(result)) {\r\n            return new Color(red, green, blue, alpha);\r\n        }\r\n\r\n        result.red = red;\r\n        result.green = green;\r\n        result.blue = blue;\r\n        result.alpha = alpha;\r\n        return result;\r\n    };\r\n\r\n    //#rgb\r\n    var rgbMatcher = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i;\r\n    //#rrggbb\r\n    var rrggbbMatcher = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i;\r\n    //rgb(), rgba(), or rgb%()\r\n    var rgbParenthesesMatcher = /^rgba?\\(\\s*([0-9.]+%?)\\s*,\\s*([0-9.]+%?)\\s*,\\s*([0-9.]+%?)(?:\\s*,\\s*([0-9.]+))?\\s*\\)$/i;\r\n    //hsl(), hsla(), or hsl%()\r\n    var hslParenthesesMatcher = /^hsla?\\(\\s*([0-9.]+)\\s*,\\s*([0-9.]+%)\\s*,\\s*([0-9.]+%)(?:\\s*,\\s*([0-9.]+))?\\s*\\)$/i;\r\n\r\n    /**\r\n     * Creates a Color instance from a CSS color value.\r\n     *\r\n     * @param {String} color The CSS color value in #rgb, #rrggbb, rgb(), rgba(), hsl(), or hsla() format.\r\n     * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\r\n     * @returns {Color} The color object, or undefined if the string was not a valid CSS color.\r\n     *\r\n     *\r\n     * @example\r\n     * var cesiumBlue = Cesium.Color.fromCssColorString('#67ADDF');\r\n     * var green = Cesium.Color.fromCssColorString('green');\r\n     *\r\n     * @see {@link http://www.w3.org/TR/css3-color|CSS color values}\r\n     */\r\n    Color.fromCssColorString = function(color, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.string('color', color);\r\n        //>>includeEnd('debug');\r\n\r\n        if (!defined(result)) {\r\n            result = new Color();\r\n        }\r\n\r\n        var namedColor = Color[color.toUpperCase()];\r\n        if (defined(namedColor)) {\r\n            Color.clone(namedColor, result);\r\n            return result;\r\n        }\r\n\r\n        var matches = rgbMatcher.exec(color);\r\n        if (matches !== null) {\r\n            result.red = parseInt(matches[1], 16) / 15;\r\n            result.green = parseInt(matches[2], 16) / 15.0;\r\n            result.blue = parseInt(matches[3], 16) / 15.0;\r\n            result.alpha = 1.0;\r\n            return result;\r\n        }\r\n\r\n        matches = rrggbbMatcher.exec(color);\r\n        if (matches !== null) {\r\n            result.red = parseInt(matches[1], 16) / 255.0;\r\n            result.green = parseInt(matches[2], 16) / 255.0;\r\n            result.blue = parseInt(matches[3], 16) / 255.0;\r\n            result.alpha = 1.0;\r\n            return result;\r\n        }\r\n\r\n        matches = rgbParenthesesMatcher.exec(color);\r\n        if (matches !== null) {\r\n            result.red = parseFloat(matches[1]) / ('%' === matches[1].substr(-1) ? 100.0 : 255.0);\r\n            result.green = parseFloat(matches[2]) / ('%' === matches[2].substr(-1) ? 100.0 : 255.0);\r\n            result.blue = parseFloat(matches[3]) / ('%' === matches[3].substr(-1) ? 100.0 : 255.0);\r\n            result.alpha = parseFloat(defaultValue(matches[4], '1.0'));\r\n            return result;\r\n        }\r\n\r\n        matches = hslParenthesesMatcher.exec(color);\r\n        if (matches !== null) {\r\n            return Color.fromHsl(parseFloat(matches[1]) / 360.0,\r\n                                 parseFloat(matches[2]) / 100.0,\r\n                                 parseFloat(matches[3]) / 100.0,\r\n                                 parseFloat(defaultValue(matches[4], '1.0')), result);\r\n        }\r\n\r\n        result = undefined;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * The number of elements used to pack the object into an array.\r\n     * @type {Number}\r\n     */\r\n    Color.packedLength = 4;\r\n\r\n    /**\r\n     * Stores the provided instance into the provided array.\r\n     *\r\n     * @param {Color} value The value to pack.\r\n     * @param {Number[]} array The array to pack into.\r\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n     *\r\n     * @returns {Number[]} The array that was packed into\r\n     */\r\n    Color.pack = function(value, array, startingIndex) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('value', value);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n        array[startingIndex++] = value.red;\r\n        array[startingIndex++] = value.green;\r\n        array[startingIndex++] = value.blue;\r\n        array[startingIndex] = value.alpha;\r\n\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Retrieves an instance from a packed array.\r\n     *\r\n     * @param {Number[]} array The packed array.\r\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n     * @param {Color} [result] The object into which to store the result.\r\n     * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\r\n     */\r\n    Color.unpack = function(array, startingIndex, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.defined('array', array);\r\n        //>>includeEnd('debug');\r\n\r\n        startingIndex = defaultValue(startingIndex, 0);\r\n        if (!defined(result)) {\r\n            result = new Color();\r\n        }\r\n        result.red = array[startingIndex++];\r\n        result.green = array[startingIndex++];\r\n        result.blue = array[startingIndex++];\r\n        result.alpha = array[startingIndex];\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Converts a 'byte' color component in the range of 0 to 255 into\r\n     * a 'float' color component in the range of 0 to 1.0.\r\n     *\r\n     * @param {Number} number The number to be converted.\r\n     * @returns {Number} The converted number.\r\n     */\r\n    Color.byteToFloat = function(number) {\r\n        return number / 255.0;\r\n    };\r\n\r\n    /**\r\n     * Converts a 'float' color component in the range of 0 to 1.0 into\r\n     * a 'byte' color component in the range of 0 to 255.\r\n     *\r\n     * @param {Number} number The number to be converted.\r\n     * @returns {Number} The converted number.\r\n     */\r\n    Color.floatToByte = function(number) {\r\n        return number === 1.0 ? 255.0 : (number * 256.0) | 0;\r\n    };\r\n\r\n    /**\r\n     * Duplicates a Color.\r\n     *\r\n     * @param {Color} color The Color to duplicate.\r\n     * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\r\n     * @returns {Color} The modified result parameter or a new instance if result was undefined. (Returns undefined if color is undefined)\r\n     */\r\n    Color.clone = function(color, result) {\r\n        if (!defined(color)) {\r\n            return undefined;\r\n        }\r\n        if (!defined(result)) {\r\n            return new Color(color.red, color.green, color.blue, color.alpha);\r\n        }\r\n        result.red = color.red;\r\n        result.green = color.green;\r\n        result.blue = color.blue;\r\n        result.alpha = color.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Returns true if the first Color equals the second color.\r\n     *\r\n     * @param {Color} left The first Color to compare for equality.\r\n     * @param {Color} right The second Color to compare for equality.\r\n     * @returns {Boolean} <code>true</code> if the Colors are equal; otherwise, <code>false</code>.\r\n     */\r\n    Color.equals = function(left, right) {\r\n        return (left === right) || //\r\n               (defined(left) && //\r\n                defined(right) && //\r\n                left.red === right.red && //\r\n                left.green === right.green && //\r\n                left.blue === right.blue && //\r\n                left.alpha === right.alpha);\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    Color.equalsArray = function(color, array, offset) {\r\n        return color.red === array[offset] &&\r\n               color.green === array[offset + 1] &&\r\n               color.blue === array[offset + 2] &&\r\n               color.alpha === array[offset + 3];\r\n    };\r\n\r\n    /**\r\n     * Returns a duplicate of a Color instance.\r\n     *\r\n     * @param {Color} [result] The object to store the result in, if undefined a new instance will be created.\r\n     * @returns {Color} The modified result parameter or a new instance if result was undefined.\r\n     */\r\n    Color.prototype.clone = function(result) {\r\n        return Color.clone(this, result);\r\n    };\r\n\r\n    /**\r\n     * Returns true if this Color equals other.\r\n     *\r\n     * @param {Color} other The Color to compare for equality.\r\n     * @returns {Boolean} <code>true</code> if the Colors are equal; otherwise, <code>false</code>.\r\n     */\r\n    Color.prototype.equals = function(other) {\r\n        return Color.equals(this, other);\r\n    };\r\n\r\n    /**\r\n     * Returns <code>true</code> if this Color equals other componentwise within the specified epsilon.\r\n     *\r\n     * @param {Color} other The Color to compare for equality.\r\n     * @param {Number} [epsilon=0.0] The epsilon to use for equality testing.\r\n     * @returns {Boolean} <code>true</code> if the Colors are equal within the specified epsilon; otherwise, <code>false</code>.\r\n     */\r\n    Color.prototype.equalsEpsilon = function(other, epsilon) {\r\n        return (this === other) || //\r\n               ((defined(other)) && //\r\n                (Math.abs(this.red - other.red) <= epsilon) && //\r\n                (Math.abs(this.green - other.green) <= epsilon) && //\r\n                (Math.abs(this.blue - other.blue) <= epsilon) && //\r\n                (Math.abs(this.alpha - other.alpha) <= epsilon));\r\n    };\r\n\r\n    /**\r\n     * Creates a string representing this Color in the format '(red, green, blue, alpha)'.\r\n     *\r\n     * @returns {String} A string representing this Color in the format '(red, green, blue, alpha)'.\r\n     */\r\n    Color.prototype.toString = function() {\r\n        return '(' + this.red + ', ' + this.green + ', ' + this.blue + ', ' + this.alpha + ')';\r\n    };\r\n\r\n    /**\r\n     * Creates a string containing the CSS color value for this color.\r\n     *\r\n     * @returns {String} The CSS equivalent of this color.\r\n     *\r\n     * @see {@link http://www.w3.org/TR/css3-color/#rgba-color|CSS RGB or RGBA color values}\r\n     */\r\n    Color.prototype.toCssColorString = function() {\r\n        var red = Color.floatToByte(this.red);\r\n        var green = Color.floatToByte(this.green);\r\n        var blue = Color.floatToByte(this.blue);\r\n        if (this.alpha === 1) {\r\n            return 'rgb(' + red + ',' + green + ',' + blue + ')';\r\n        }\r\n        return 'rgba(' + red + ',' + green + ',' + blue + ',' + this.alpha + ')';\r\n    };\r\n\r\n    /**\r\n     * Converts this color to an array of red, green, blue, and alpha values\r\n     * that are in the range of 0 to 255.\r\n     *\r\n     * @param {Number[]} [result] The array to store the result in, if undefined a new instance will be created.\r\n     * @returns {Number[]} The modified result parameter or a new instance if result was undefined.\r\n     */\r\n    Color.prototype.toBytes = function(result) {\r\n        var red = Color.floatToByte(this.red);\r\n        var green = Color.floatToByte(this.green);\r\n        var blue = Color.floatToByte(this.blue);\r\n        var alpha = Color.floatToByte(this.alpha);\r\n\r\n        if (!defined(result)) {\r\n            return [red, green, blue, alpha];\r\n        }\r\n        result[0] = red;\r\n        result[1] = green;\r\n        result[2] = blue;\r\n        result[3] = alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Converts this color to a single numeric unsigned 32-bit RGBA value, using the endianness\r\n     * of the system.\r\n     *\r\n     * @returns {Number} A single numeric unsigned 32-bit RGBA value.\r\n     *\r\n     *\r\n     * @example\r\n     * var rgba = Cesium.Color.BLUE.toRgba();\r\n     *\r\n     * @see Color.fromRgba\r\n     */\r\n    Color.prototype.toRgba = function() {\r\n        // scratchUint32Array and scratchUint8Array share an underlying array buffer\r\n        scratchUint8Array[0] = Color.floatToByte(this.red);\r\n        scratchUint8Array[1] = Color.floatToByte(this.green);\r\n        scratchUint8Array[2] = Color.floatToByte(this.blue);\r\n        scratchUint8Array[3] = Color.floatToByte(this.alpha);\r\n        return scratchUint32Array[0];\r\n    };\r\n\r\n    /**\r\n     * Brightens this color by the provided magnitude.\r\n     *\r\n     * @param {Number} magnitude A positive number indicating the amount to brighten.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     *\r\n     * @example\r\n     * var brightBlue = Cesium.Color.BLUE.brighten(0.5, new Cesium.Color());\r\n     */\r\n    Color.prototype.brighten = function(magnitude, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('magnitude', magnitude);\r\n        Check.typeOf.number.greaterThanOrEquals('magnitude', magnitude, 0.0);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        magnitude = (1.0 - magnitude);\r\n        result.red = 1.0 - ((1.0 - this.red) * magnitude);\r\n        result.green = 1.0 - ((1.0 - this.green) * magnitude);\r\n        result.blue = 1.0 - ((1.0 - this.blue) * magnitude);\r\n        result.alpha = this.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Darkens this color by the provided magnitude.\r\n     *\r\n     * @param {Number} magnitude A positive number indicating the amount to darken.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     *\r\n     * @example\r\n     * var darkBlue = Cesium.Color.BLUE.darken(0.5, new Cesium.Color());\r\n     */\r\n    Color.prototype.darken = function(magnitude, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.number('magnitude', magnitude);\r\n        Check.typeOf.number.greaterThanOrEquals('magnitude', magnitude, 0.0);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        magnitude = (1.0 - magnitude);\r\n        result.red = this.red * magnitude;\r\n        result.green = this.green * magnitude;\r\n        result.blue = this.blue * magnitude;\r\n        result.alpha = this.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a new Color that has the same red, green, and blue components\r\n     * as this Color, but with the specified alpha value.\r\n     *\r\n     * @param {Number} alpha The new alpha component.\r\n     * @param {Color} [result] The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\r\n     *\r\n     * @example var translucentRed = Cesium.Color.RED.withAlpha(0.9);\r\n     */\r\n    Color.prototype.withAlpha = function(alpha, result) {\r\n        return Color.fromAlpha(this, alpha, result);\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise sum of two Colors.\r\n     *\r\n     * @param {Color} left The first Color.\r\n     * @param {Color} right The second Color.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     */\r\n    Color.add = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.red = left.red + right.red;\r\n        result.green = left.green + right.green;\r\n        result.blue = left.blue + right.blue;\r\n        result.alpha = left.alpha + right.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise difference of two Colors.\r\n     *\r\n     * @param {Color} left The first Color.\r\n     * @param {Color} right The second Color.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     */\r\n    Color.subtract = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.red = left.red - right.red;\r\n        result.green = left.green - right.green;\r\n        result.blue = left.blue - right.blue;\r\n        result.alpha = left.alpha - right.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise product of two Colors.\r\n     *\r\n     * @param {Color} left The first Color.\r\n     * @param {Color} right The second Color.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     */\r\n    Color.multiply = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.red = left.red * right.red;\r\n        result.green = left.green * right.green;\r\n        result.blue = left.blue * right.blue;\r\n        result.alpha = left.alpha * right.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise quotient of two Colors.\r\n     *\r\n     * @param {Color} left The first Color.\r\n     * @param {Color} right The second Color.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     */\r\n    Color.divide = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.red = left.red / right.red;\r\n        result.green = left.green / right.green;\r\n        result.blue = left.blue / right.blue;\r\n        result.alpha = left.alpha / right.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the componentwise modulus of two Colors.\r\n     *\r\n     * @param {Color} left The first Color.\r\n     * @param {Color} right The second Color.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     */\r\n    Color.mod = function(left, right, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('left', left);\r\n        Check.typeOf.object('right', right);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.red = left.red % right.red;\r\n        result.green = left.green % right.green;\r\n        result.blue = left.blue % right.blue;\r\n        result.alpha = left.alpha % right.alpha;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Computes the linear interpolation or extrapolation at t between the provided colors.\r\n     *\r\n     * @param {Color} start The color corresponding to t at 0.0.\r\n     * @param {Color} end The color corresponding to t at 1.0.\r\n     * @param {Number} t The point along t at which to interpolate.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     */\r\n    Color.lerp = function(start, end, t, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('start', start);\r\n        Check.typeOf.object('end', end);\r\n        Check.typeOf.number('t', t);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.red = CesiumMath.lerp(start.red, end.red, t);\r\n        result.green = CesiumMath.lerp(start.green, end.green, t);\r\n        result.blue = CesiumMath.lerp(start.blue, end.blue, t);\r\n        result.alpha = CesiumMath.lerp(start.alpha, end.alpha, t);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Multiplies the provided Color componentwise by the provided scalar.\r\n     *\r\n     * @param {Color} color The Color to be scaled.\r\n     * @param {Number} scalar The scalar to multiply with.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     */\r\n    Color.multiplyByScalar = function(color, scalar, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('color', color);\r\n        Check.typeOf.number('scalar', scalar);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.red = color.red * scalar;\r\n        result.green = color.green * scalar;\r\n        result.blue = color.blue * scalar;\r\n        result.alpha = color.alpha * scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Divides the provided Color componentwise by the provided scalar.\r\n     *\r\n     * @param {Color} color The Color to be divided.\r\n     * @param {Number} scalar The scalar to divide with.\r\n     * @param {Color} result The object onto which to store the result.\r\n     * @returns {Color} The modified result parameter.\r\n     */\r\n    Color.divideByScalar = function(color, scalar, result) {\r\n        //>>includeStart('debug', pragmas.debug);\r\n        Check.typeOf.object('color', color);\r\n        Check.typeOf.number('scalar', scalar);\r\n        Check.typeOf.object('result', result);\r\n        //>>includeEnd('debug');\r\n\r\n        result.red = color.red / scalar;\r\n        result.green = color.green / scalar;\r\n        result.blue = color.blue / scalar;\r\n        result.alpha = color.alpha / scalar;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F0F8FF\r\n     * <span class=\"colorSwath\" style=\"background: #F0F8FF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.ALICEBLUE = Object.freeze(Color.fromCssColorString('#F0F8FF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FAEBD7\r\n     * <span class=\"colorSwath\" style=\"background: #FAEBD7;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.ANTIQUEWHITE = Object.freeze(Color.fromCssColorString('#FAEBD7'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #00FFFF\r\n     * <span class=\"colorSwath\" style=\"background: #00FFFF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.AQUA = Object.freeze(Color.fromCssColorString('#00FFFF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #7FFFD4\r\n     * <span class=\"colorSwath\" style=\"background: #7FFFD4;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.AQUAMARINE = Object.freeze(Color.fromCssColorString('#7FFFD4'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F0FFFF\r\n     * <span class=\"colorSwath\" style=\"background: #F0FFFF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.AZURE = Object.freeze(Color.fromCssColorString('#F0FFFF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F5F5DC\r\n     * <span class=\"colorSwath\" style=\"background: #F5F5DC;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.BEIGE = Object.freeze(Color.fromCssColorString('#F5F5DC'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFE4C4\r\n     * <span class=\"colorSwath\" style=\"background: #FFE4C4;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.BISQUE = Object.freeze(Color.fromCssColorString('#FFE4C4'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #000000\r\n     * <span class=\"colorSwath\" style=\"background: #000000;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.BLACK = Object.freeze(Color.fromCssColorString('#000000'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFEBCD\r\n     * <span class=\"colorSwath\" style=\"background: #FFEBCD;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.BLANCHEDALMOND = Object.freeze(Color.fromCssColorString('#FFEBCD'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #0000FF\r\n     * <span class=\"colorSwath\" style=\"background: #0000FF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.BLUE = Object.freeze(Color.fromCssColorString('#0000FF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #8A2BE2\r\n     * <span class=\"colorSwath\" style=\"background: #8A2BE2;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.BLUEVIOLET = Object.freeze(Color.fromCssColorString('#8A2BE2'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #A52A2A\r\n     * <span class=\"colorSwath\" style=\"background: #A52A2A;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.BROWN = Object.freeze(Color.fromCssColorString('#A52A2A'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #DEB887\r\n     * <span class=\"colorSwath\" style=\"background: #DEB887;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.BURLYWOOD = Object.freeze(Color.fromCssColorString('#DEB887'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #5F9EA0\r\n     * <span class=\"colorSwath\" style=\"background: #5F9EA0;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.CADETBLUE = Object.freeze(Color.fromCssColorString('#5F9EA0'));\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #7FFF00\r\n     * <span class=\"colorSwath\" style=\"background: #7FFF00;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.CHARTREUSE = Object.freeze(Color.fromCssColorString('#7FFF00'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #D2691E\r\n     * <span class=\"colorSwath\" style=\"background: #D2691E;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.CHOCOLATE = Object.freeze(Color.fromCssColorString('#D2691E'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF7F50\r\n     * <span class=\"colorSwath\" style=\"background: #FF7F50;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.CORAL = Object.freeze(Color.fromCssColorString('#FF7F50'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #6495ED\r\n     * <span class=\"colorSwath\" style=\"background: #6495ED;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.CORNFLOWERBLUE = Object.freeze(Color.fromCssColorString('#6495ED'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFF8DC\r\n     * <span class=\"colorSwath\" style=\"background: #FFF8DC;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.CORNSILK = Object.freeze(Color.fromCssColorString('#FFF8DC'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #DC143C\r\n     * <span class=\"colorSwath\" style=\"background: #DC143C;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.CRIMSON = Object.freeze(Color.fromCssColorString('#DC143C'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #00FFFF\r\n     * <span class=\"colorSwath\" style=\"background: #00FFFF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.CYAN = Object.freeze(Color.fromCssColorString('#00FFFF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #00008B\r\n     * <span class=\"colorSwath\" style=\"background: #00008B;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKBLUE = Object.freeze(Color.fromCssColorString('#00008B'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #008B8B\r\n     * <span class=\"colorSwath\" style=\"background: #008B8B;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKCYAN = Object.freeze(Color.fromCssColorString('#008B8B'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #B8860B\r\n     * <span class=\"colorSwath\" style=\"background: #B8860B;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKGOLDENROD = Object.freeze(Color.fromCssColorString('#B8860B'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #A9A9A9\r\n     * <span class=\"colorSwath\" style=\"background: #A9A9A9;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKGRAY = Object.freeze(Color.fromCssColorString('#A9A9A9'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #006400\r\n     * <span class=\"colorSwath\" style=\"background: #006400;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKGREEN = Object.freeze(Color.fromCssColorString('#006400'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #A9A9A9\r\n     * <span class=\"colorSwath\" style=\"background: #A9A9A9;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKGREY = Color.DARKGRAY;\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #BDB76B\r\n     * <span class=\"colorSwath\" style=\"background: #BDB76B;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKKHAKI = Object.freeze(Color.fromCssColorString('#BDB76B'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #8B008B\r\n     * <span class=\"colorSwath\" style=\"background: #8B008B;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKMAGENTA = Object.freeze(Color.fromCssColorString('#8B008B'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #556B2F\r\n     * <span class=\"colorSwath\" style=\"background: #556B2F;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKOLIVEGREEN = Object.freeze(Color.fromCssColorString('#556B2F'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF8C00\r\n     * <span class=\"colorSwath\" style=\"background: #FF8C00;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKORANGE = Object.freeze(Color.fromCssColorString('#FF8C00'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #9932CC\r\n     * <span class=\"colorSwath\" style=\"background: #9932CC;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKORCHID = Object.freeze(Color.fromCssColorString('#9932CC'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #8B0000\r\n     * <span class=\"colorSwath\" style=\"background: #8B0000;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKRED = Object.freeze(Color.fromCssColorString('#8B0000'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #E9967A\r\n     * <span class=\"colorSwath\" style=\"background: #E9967A;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKSALMON = Object.freeze(Color.fromCssColorString('#E9967A'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #8FBC8F\r\n     * <span class=\"colorSwath\" style=\"background: #8FBC8F;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKSEAGREEN = Object.freeze(Color.fromCssColorString('#8FBC8F'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #483D8B\r\n     * <span class=\"colorSwath\" style=\"background: #483D8B;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKSLATEBLUE = Object.freeze(Color.fromCssColorString('#483D8B'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #2F4F4F\r\n     * <span class=\"colorSwath\" style=\"background: #2F4F4F;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKSLATEGRAY = Object.freeze(Color.fromCssColorString('#2F4F4F'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #2F4F4F\r\n     * <span class=\"colorSwath\" style=\"background: #2F4F4F;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKSLATEGREY = Color.DARKSLATEGRAY;\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #00CED1\r\n     * <span class=\"colorSwath\" style=\"background: #00CED1;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKTURQUOISE = Object.freeze(Color.fromCssColorString('#00CED1'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #9400D3\r\n     * <span class=\"colorSwath\" style=\"background: #9400D3;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DARKVIOLET = Object.freeze(Color.fromCssColorString('#9400D3'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF1493\r\n     * <span class=\"colorSwath\" style=\"background: #FF1493;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DEEPPINK = Object.freeze(Color.fromCssColorString('#FF1493'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #00BFFF\r\n     * <span class=\"colorSwath\" style=\"background: #00BFFF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DEEPSKYBLUE = Object.freeze(Color.fromCssColorString('#00BFFF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #696969\r\n     * <span class=\"colorSwath\" style=\"background: #696969;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DIMGRAY = Object.freeze(Color.fromCssColorString('#696969'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #696969\r\n     * <span class=\"colorSwath\" style=\"background: #696969;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DIMGREY = Color.DIMGRAY;\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #1E90FF\r\n     * <span class=\"colorSwath\" style=\"background: #1E90FF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.DODGERBLUE = Object.freeze(Color.fromCssColorString('#1E90FF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #B22222\r\n     * <span class=\"colorSwath\" style=\"background: #B22222;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.FIREBRICK = Object.freeze(Color.fromCssColorString('#B22222'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFFAF0\r\n     * <span class=\"colorSwath\" style=\"background: #FFFAF0;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.FLORALWHITE = Object.freeze(Color.fromCssColorString('#FFFAF0'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #228B22\r\n     * <span class=\"colorSwath\" style=\"background: #228B22;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.FORESTGREEN = Object.freeze(Color.fromCssColorString('#228B22'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF00FF\r\n     * <span class=\"colorSwath\" style=\"background: #FF00FF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.FUCHSIA = Object.freeze(Color.fromCssColorString('#FF00FF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #DCDCDC\r\n     * <span class=\"colorSwath\" style=\"background: #DCDCDC;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.GAINSBORO = Object.freeze(Color.fromCssColorString('#DCDCDC'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F8F8FF\r\n     * <span class=\"colorSwath\" style=\"background: #F8F8FF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.GHOSTWHITE = Object.freeze(Color.fromCssColorString('#F8F8FF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFD700\r\n     * <span class=\"colorSwath\" style=\"background: #FFD700;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.GOLD = Object.freeze(Color.fromCssColorString('#FFD700'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #DAA520\r\n     * <span class=\"colorSwath\" style=\"background: #DAA520;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.GOLDENROD = Object.freeze(Color.fromCssColorString('#DAA520'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #808080\r\n     * <span class=\"colorSwath\" style=\"background: #808080;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.GRAY = Object.freeze(Color.fromCssColorString('#808080'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #008000\r\n     * <span class=\"colorSwath\" style=\"background: #008000;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.GREEN = Object.freeze(Color.fromCssColorString('#008000'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #ADFF2F\r\n     * <span class=\"colorSwath\" style=\"background: #ADFF2F;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.GREENYELLOW = Object.freeze(Color.fromCssColorString('#ADFF2F'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #808080\r\n     * <span class=\"colorSwath\" style=\"background: #808080;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.GREY = Color.GRAY;\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F0FFF0\r\n     * <span class=\"colorSwath\" style=\"background: #F0FFF0;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.HONEYDEW = Object.freeze(Color.fromCssColorString('#F0FFF0'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF69B4\r\n     * <span class=\"colorSwath\" style=\"background: #FF69B4;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.HOTPINK = Object.freeze(Color.fromCssColorString('#FF69B4'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #CD5C5C\r\n     * <span class=\"colorSwath\" style=\"background: #CD5C5C;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.INDIANRED = Object.freeze(Color.fromCssColorString('#CD5C5C'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #4B0082\r\n     * <span class=\"colorSwath\" style=\"background: #4B0082;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.INDIGO = Object.freeze(Color.fromCssColorString('#4B0082'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFFFF0\r\n     * <span class=\"colorSwath\" style=\"background: #FFFFF0;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.IVORY = Object.freeze(Color.fromCssColorString('#FFFFF0'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F0E68C\r\n     * <span class=\"colorSwath\" style=\"background: #F0E68C;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.KHAKI = Object.freeze(Color.fromCssColorString('#F0E68C'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #E6E6FA\r\n     * <span class=\"colorSwath\" style=\"background: #E6E6FA;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LAVENDER = Object.freeze(Color.fromCssColorString('#E6E6FA'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFF0F5\r\n     * <span class=\"colorSwath\" style=\"background: #FFF0F5;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LAVENDAR_BLUSH = Object.freeze(Color.fromCssColorString('#FFF0F5'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #7CFC00\r\n     * <span class=\"colorSwath\" style=\"background: #7CFC00;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LAWNGREEN = Object.freeze(Color.fromCssColorString('#7CFC00'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFFACD\r\n     * <span class=\"colorSwath\" style=\"background: #FFFACD;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LEMONCHIFFON = Object.freeze(Color.fromCssColorString('#FFFACD'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #ADD8E6\r\n     * <span class=\"colorSwath\" style=\"background: #ADD8E6;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTBLUE = Object.freeze(Color.fromCssColorString('#ADD8E6'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F08080\r\n     * <span class=\"colorSwath\" style=\"background: #F08080;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTCORAL = Object.freeze(Color.fromCssColorString('#F08080'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #E0FFFF\r\n     * <span class=\"colorSwath\" style=\"background: #E0FFFF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTCYAN = Object.freeze(Color.fromCssColorString('#E0FFFF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FAFAD2\r\n     * <span class=\"colorSwath\" style=\"background: #FAFAD2;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTGOLDENRODYELLOW = Object.freeze(Color.fromCssColorString('#FAFAD2'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #D3D3D3\r\n     * <span class=\"colorSwath\" style=\"background: #D3D3D3;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTGRAY = Object.freeze(Color.fromCssColorString('#D3D3D3'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #90EE90\r\n     * <span class=\"colorSwath\" style=\"background: #90EE90;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTGREEN = Object.freeze(Color.fromCssColorString('#90EE90'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #D3D3D3\r\n     * <span class=\"colorSwath\" style=\"background: #D3D3D3;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTGREY = Color.LIGHTGRAY;\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFB6C1\r\n     * <span class=\"colorSwath\" style=\"background: #FFB6C1;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTPINK = Object.freeze(Color.fromCssColorString('#FFB6C1'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #20B2AA\r\n     * <span class=\"colorSwath\" style=\"background: #20B2AA;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTSEAGREEN = Object.freeze(Color.fromCssColorString('#20B2AA'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #87CEFA\r\n     * <span class=\"colorSwath\" style=\"background: #87CEFA;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTSKYBLUE = Object.freeze(Color.fromCssColorString('#87CEFA'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #778899\r\n     * <span class=\"colorSwath\" style=\"background: #778899;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTSLATEGRAY = Object.freeze(Color.fromCssColorString('#778899'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #778899\r\n     * <span class=\"colorSwath\" style=\"background: #778899;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTSLATEGREY = Color.LIGHTSLATEGRAY;\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #B0C4DE\r\n     * <span class=\"colorSwath\" style=\"background: #B0C4DE;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTSTEELBLUE = Object.freeze(Color.fromCssColorString('#B0C4DE'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFFFE0\r\n     * <span class=\"colorSwath\" style=\"background: #FFFFE0;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIGHTYELLOW = Object.freeze(Color.fromCssColorString('#FFFFE0'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #00FF00\r\n     * <span class=\"colorSwath\" style=\"background: #00FF00;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIME = Object.freeze(Color.fromCssColorString('#00FF00'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #32CD32\r\n     * <span class=\"colorSwath\" style=\"background: #32CD32;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LIMEGREEN = Object.freeze(Color.fromCssColorString('#32CD32'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FAF0E6\r\n     * <span class=\"colorSwath\" style=\"background: #FAF0E6;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.LINEN = Object.freeze(Color.fromCssColorString('#FAF0E6'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF00FF\r\n     * <span class=\"colorSwath\" style=\"background: #FF00FF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MAGENTA = Object.freeze(Color.fromCssColorString('#FF00FF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #800000\r\n     * <span class=\"colorSwath\" style=\"background: #800000;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MAROON = Object.freeze(Color.fromCssColorString('#800000'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #66CDAA\r\n     * <span class=\"colorSwath\" style=\"background: #66CDAA;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMAQUAMARINE = Object.freeze(Color.fromCssColorString('#66CDAA'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #0000CD\r\n     * <span class=\"colorSwath\" style=\"background: #0000CD;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMBLUE = Object.freeze(Color.fromCssColorString('#0000CD'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #BA55D3\r\n     * <span class=\"colorSwath\" style=\"background: #BA55D3;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMORCHID = Object.freeze(Color.fromCssColorString('#BA55D3'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #9370DB\r\n     * <span class=\"colorSwath\" style=\"background: #9370DB;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMPURPLE = Object.freeze(Color.fromCssColorString('#9370DB'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #3CB371\r\n     * <span class=\"colorSwath\" style=\"background: #3CB371;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMSEAGREEN = Object.freeze(Color.fromCssColorString('#3CB371'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #7B68EE\r\n     * <span class=\"colorSwath\" style=\"background: #7B68EE;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMSLATEBLUE = Object.freeze(Color.fromCssColorString('#7B68EE'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #00FA9A\r\n     * <span class=\"colorSwath\" style=\"background: #00FA9A;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMSPRINGGREEN = Object.freeze(Color.fromCssColorString('#00FA9A'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #48D1CC\r\n     * <span class=\"colorSwath\" style=\"background: #48D1CC;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMTURQUOISE = Object.freeze(Color.fromCssColorString('#48D1CC'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #C71585\r\n     * <span class=\"colorSwath\" style=\"background: #C71585;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MEDIUMVIOLETRED = Object.freeze(Color.fromCssColorString('#C71585'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #191970\r\n     * <span class=\"colorSwath\" style=\"background: #191970;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MIDNIGHTBLUE = Object.freeze(Color.fromCssColorString('#191970'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F5FFFA\r\n     * <span class=\"colorSwath\" style=\"background: #F5FFFA;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MINTCREAM = Object.freeze(Color.fromCssColorString('#F5FFFA'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFE4E1\r\n     * <span class=\"colorSwath\" style=\"background: #FFE4E1;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MISTYROSE = Object.freeze(Color.fromCssColorString('#FFE4E1'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFE4B5\r\n     * <span class=\"colorSwath\" style=\"background: #FFE4B5;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.MOCCASIN = Object.freeze(Color.fromCssColorString('#FFE4B5'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFDEAD\r\n     * <span class=\"colorSwath\" style=\"background: #FFDEAD;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.NAVAJOWHITE = Object.freeze(Color.fromCssColorString('#FFDEAD'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #000080\r\n     * <span class=\"colorSwath\" style=\"background: #000080;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.NAVY = Object.freeze(Color.fromCssColorString('#000080'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FDF5E6\r\n     * <span class=\"colorSwath\" style=\"background: #FDF5E6;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.OLDLACE = Object.freeze(Color.fromCssColorString('#FDF5E6'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #808000\r\n     * <span class=\"colorSwath\" style=\"background: #808000;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.OLIVE = Object.freeze(Color.fromCssColorString('#808000'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #6B8E23\r\n     * <span class=\"colorSwath\" style=\"background: #6B8E23;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.OLIVEDRAB = Object.freeze(Color.fromCssColorString('#6B8E23'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFA500\r\n     * <span class=\"colorSwath\" style=\"background: #FFA500;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.ORANGE = Object.freeze(Color.fromCssColorString('#FFA500'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF4500\r\n     * <span class=\"colorSwath\" style=\"background: #FF4500;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.ORANGERED = Object.freeze(Color.fromCssColorString('#FF4500'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #DA70D6\r\n     * <span class=\"colorSwath\" style=\"background: #DA70D6;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.ORCHID = Object.freeze(Color.fromCssColorString('#DA70D6'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #EEE8AA\r\n     * <span class=\"colorSwath\" style=\"background: #EEE8AA;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PALEGOLDENROD = Object.freeze(Color.fromCssColorString('#EEE8AA'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #98FB98\r\n     * <span class=\"colorSwath\" style=\"background: #98FB98;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PALEGREEN = Object.freeze(Color.fromCssColorString('#98FB98'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #AFEEEE\r\n     * <span class=\"colorSwath\" style=\"background: #AFEEEE;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PALETURQUOISE = Object.freeze(Color.fromCssColorString('#AFEEEE'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #DB7093\r\n     * <span class=\"colorSwath\" style=\"background: #DB7093;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PALEVIOLETRED = Object.freeze(Color.fromCssColorString('#DB7093'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFEFD5\r\n     * <span class=\"colorSwath\" style=\"background: #FFEFD5;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PAPAYAWHIP = Object.freeze(Color.fromCssColorString('#FFEFD5'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFDAB9\r\n     * <span class=\"colorSwath\" style=\"background: #FFDAB9;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PEACHPUFF = Object.freeze(Color.fromCssColorString('#FFDAB9'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #CD853F\r\n     * <span class=\"colorSwath\" style=\"background: #CD853F;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PERU = Object.freeze(Color.fromCssColorString('#CD853F'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFC0CB\r\n     * <span class=\"colorSwath\" style=\"background: #FFC0CB;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PINK = Object.freeze(Color.fromCssColorString('#FFC0CB'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #DDA0DD\r\n     * <span class=\"colorSwath\" style=\"background: #DDA0DD;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PLUM = Object.freeze(Color.fromCssColorString('#DDA0DD'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #B0E0E6\r\n     * <span class=\"colorSwath\" style=\"background: #B0E0E6;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.POWDERBLUE = Object.freeze(Color.fromCssColorString('#B0E0E6'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #800080\r\n     * <span class=\"colorSwath\" style=\"background: #800080;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.PURPLE = Object.freeze(Color.fromCssColorString('#800080'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF0000\r\n     * <span class=\"colorSwath\" style=\"background: #FF0000;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.RED = Object.freeze(Color.fromCssColorString('#FF0000'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #BC8F8F\r\n     * <span class=\"colorSwath\" style=\"background: #BC8F8F;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.ROSYBROWN = Object.freeze(Color.fromCssColorString('#BC8F8F'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #4169E1\r\n     * <span class=\"colorSwath\" style=\"background: #4169E1;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.ROYALBLUE = Object.freeze(Color.fromCssColorString('#4169E1'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #8B4513\r\n     * <span class=\"colorSwath\" style=\"background: #8B4513;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SADDLEBROWN = Object.freeze(Color.fromCssColorString('#8B4513'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FA8072\r\n     * <span class=\"colorSwath\" style=\"background: #FA8072;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SALMON = Object.freeze(Color.fromCssColorString('#FA8072'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F4A460\r\n     * <span class=\"colorSwath\" style=\"background: #F4A460;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SANDYBROWN = Object.freeze(Color.fromCssColorString('#F4A460'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #2E8B57\r\n     * <span class=\"colorSwath\" style=\"background: #2E8B57;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SEAGREEN = Object.freeze(Color.fromCssColorString('#2E8B57'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFF5EE\r\n     * <span class=\"colorSwath\" style=\"background: #FFF5EE;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SEASHELL = Object.freeze(Color.fromCssColorString('#FFF5EE'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #A0522D\r\n     * <span class=\"colorSwath\" style=\"background: #A0522D;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SIENNA = Object.freeze(Color.fromCssColorString('#A0522D'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #C0C0C0\r\n     * <span class=\"colorSwath\" style=\"background: #C0C0C0;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SILVER = Object.freeze(Color.fromCssColorString('#C0C0C0'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #87CEEB\r\n     * <span class=\"colorSwath\" style=\"background: #87CEEB;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SKYBLUE = Object.freeze(Color.fromCssColorString('#87CEEB'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #6A5ACD\r\n     * <span class=\"colorSwath\" style=\"background: #6A5ACD;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SLATEBLUE = Object.freeze(Color.fromCssColorString('#6A5ACD'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #708090\r\n     * <span class=\"colorSwath\" style=\"background: #708090;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SLATEGRAY = Object.freeze(Color.fromCssColorString('#708090'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #708090\r\n     * <span class=\"colorSwath\" style=\"background: #708090;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SLATEGREY = Color.SLATEGRAY;\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFFAFA\r\n     * <span class=\"colorSwath\" style=\"background: #FFFAFA;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SNOW = Object.freeze(Color.fromCssColorString('#FFFAFA'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #00FF7F\r\n     * <span class=\"colorSwath\" style=\"background: #00FF7F;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.SPRINGGREEN = Object.freeze(Color.fromCssColorString('#00FF7F'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #4682B4\r\n     * <span class=\"colorSwath\" style=\"background: #4682B4;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.STEELBLUE = Object.freeze(Color.fromCssColorString('#4682B4'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #D2B48C\r\n     * <span class=\"colorSwath\" style=\"background: #D2B48C;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.TAN = Object.freeze(Color.fromCssColorString('#D2B48C'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #008080\r\n     * <span class=\"colorSwath\" style=\"background: #008080;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.TEAL = Object.freeze(Color.fromCssColorString('#008080'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #D8BFD8\r\n     * <span class=\"colorSwath\" style=\"background: #D8BFD8;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.THISTLE = Object.freeze(Color.fromCssColorString('#D8BFD8'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FF6347\r\n     * <span class=\"colorSwath\" style=\"background: #FF6347;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.TOMATO = Object.freeze(Color.fromCssColorString('#FF6347'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #40E0D0\r\n     * <span class=\"colorSwath\" style=\"background: #40E0D0;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.TURQUOISE = Object.freeze(Color.fromCssColorString('#40E0D0'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #EE82EE\r\n     * <span class=\"colorSwath\" style=\"background: #EE82EE;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.VIOLET = Object.freeze(Color.fromCssColorString('#EE82EE'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F5DEB3\r\n     * <span class=\"colorSwath\" style=\"background: #F5DEB3;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.WHEAT = Object.freeze(Color.fromCssColorString('#F5DEB3'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFFFFF\r\n     * <span class=\"colorSwath\" style=\"background: #FFFFFF;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.WHITE = Object.freeze(Color.fromCssColorString('#FFFFFF'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #F5F5F5\r\n     * <span class=\"colorSwath\" style=\"background: #F5F5F5;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.WHITESMOKE = Object.freeze(Color.fromCssColorString('#F5F5F5'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #FFFF00\r\n     * <span class=\"colorSwath\" style=\"background: #FFFF00;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.YELLOW = Object.freeze(Color.fromCssColorString('#FFFF00'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS color #9ACD32\r\n     * <span class=\"colorSwath\" style=\"background: #9ACD32;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.YELLOWGREEN = Object.freeze(Color.fromCssColorString('#9ACD32'));\r\n\r\n    /**\r\n     * An immutable Color instance initialized to CSS transparent.\r\n     * <span class=\"colorSwath\" style=\"background: transparent;\"></span>\r\n     *\r\n     * @constant\r\n     * @type {Color}\r\n     */\r\n    Color.TRANSPARENT = Object.freeze(new Color(0, 0, 0, 0));\r\nexport default Color;\r\n"],"names":["hue2rgb","m1","m2","h","Color","red","green","blue","alpha","this","defaultValue","scratchArrayBuffer","scratchUint32Array","scratchUint8Array","fromCartesian4","cartesian","result","Check","typeOf","object","defined","x","y","z","w","fromBytes","byteToFloat","fromAlpha","color","number","FeatureDetection","supportsTypedArrays","ArrayBuffer","Uint32Array","Uint8Array","fromRgba","rgba","fromHsl","hue","saturation","lightness","fromRandom","options","EMPTY_OBJECT","minimumRed","maximumRed","lessThanOrEquals","CesiumMath","nextRandomNumber","minimumGreen","maximumGreen","minimumBlue","maximumBlue","minimumAlpha","maximumAlpha","rgbMatcher","rrggbbMatcher","rgbParenthesesMatcher","hslParenthesesMatcher","fromCssColorString","string","namedColor","toUpperCase","clone","matches","exec","parseInt","parseFloat","substr","undefined","packedLength","pack","value","array","startingIndex","unpack","floatToByte","equals","left","right","equalsArray","offset","prototype","other","equalsEpsilon","epsilon","Math","abs","toString","toCssColorString","toBytes","toRgba","brighten","magnitude","greaterThanOrEquals","darken","withAlpha","add","subtract","multiply","divide","mod","lerp","start","end","t","multiplyByScalar","scalar","divideByScalar","ALICEBLUE","Object","freeze","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREEN","DARKGREY","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREEN","GREENYELLOW","GREY","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDAR_BLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREEN","LIGHTGREY","LIGHTPINK","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN","TRANSPARENT"],"mappings":"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"}